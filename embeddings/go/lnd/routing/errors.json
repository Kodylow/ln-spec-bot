{
  "filepath": "../implementations/go/lnd/routing/errors.go",
  "package": "routing",
  "sections": [
    {
      "slug": "type errorCode uint8",
      "content": "type errorCode uint8\n\nconst (\n\t// ErrOutdated is returned when the routing update already have\n\t// been applied, or a newer update is already known.\n\tErrOutdated errorCode = iota\n\n\t// ErrIgnored is returned when the update have been ignored because\n\t// this update can't bring us something new, or because a node\n\t// announcement was given for node not found in any channel.\n\tErrIgnored\n\n\t// ErrChannelSpent is returned when we go to validate a channel, but\n\t// the purported funding output has actually already been spent on\n\t// chain.\n\tErrChannelSpent\n\n\t// ErrNoFundingTransaction is returned when we are unable to find the\n\t// funding transaction described by the short channel ID on chain.\n\tErrNoFundingTransaction\n\n\t// ErrInvalidFundingOutput is returned if the channel funding output\n\t// fails validation.\n\tErrInvalidFundingOutput\n\n\t// ErrVBarrierShuttingDown signals that the barrier has been requested\n\t// to shutdown, and that the caller should not treat the wait condition\n\t// as fulfilled.\n\tErrVBarrierShuttingDown\n\n\t// ErrParentValidationFailed signals that the validation of a\n\t// dependent's parent failed, so the dependent must not be processed.\n\tErrParentValidationFailed\n)\n\n// routerError is a structure that represent the error inside the routing package,\n// this structure carries additional information about error code in order to\n// be able distinguish errors outside of the current package.",
      "length": 1356,
      "tokens": 205,
      "embedding": []
    },
    {
      "slug": "type routerError struct {",
      "content": "type routerError struct {\n\terr  *errors.Error\n\tcode errorCode\n}\n\n// Error represents errors as the string\n// NOTE: Part of the error interface.",
      "length": 112,
      "tokens": 19,
      "embedding": []
    },
    {
      "slug": "func (e *routerError) Error() string {",
      "content": "func (e *routerError) Error() string {\n\treturn e.err.Error()\n}\n\n// A compile time check to ensure routerError implements the error interface.\nvar _ error = (*routerError)(nil)\n\n// newErrf creates a routerError by the given error formatted description and\n// its corresponding error code.",
      "length": 241,
      "tokens": 37,
      "embedding": []
    },
    {
      "slug": "func newErrf(code errorCode, format string, a ...interface{}) *routerError {",
      "content": "func newErrf(code errorCode, format string, a ...interface{}) *routerError {\n\treturn &routerError{\n\t\tcode: code,\n\t\terr:  errors.Errorf(format, a...),\n\t}\n}\n\n// IsError is a helper function which is needed to have ability to check that\n// returned error has specific error code.",
      "length": 192,
      "tokens": 31,
      "embedding": []
    },
    {
      "slug": "func IsError(e interface{}, codes ...errorCode) bool {",
      "content": "func IsError(e interface{}, codes ...errorCode) bool {\n\terr, ok := e.(*routerError)\n\tif !ok {\n\t\treturn false\n\t}\n\n\tfor _, code := range codes {\n\t\tif err.code == code {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n",
      "length": 138,
      "tokens": 29,
      "embedding": []
    }
  ]
}