{
  "filepath": "../implementations/go/lnd/routing/probability_estimator_test.go",
  "package": "routing",
  "sections": [
    {
      "slug": "func BenchmarkBimodalPairProbability(b *testing.B) {",
      "content": "func BenchmarkBimodalPairProbability(b *testing.B) {\n\testimator := BimodalEstimator{\n\t\tBimodalConfig: BimodalConfig{\n\t\t\tBimodalScaleMsat:  scale,\n\t\t\tBimodalNodeWeight: 0.2,\n\t\t\tBimodalDecayTime:  48 * time.Hour,\n\t\t},\n\t}\n\n\ttoNode := route.Vertex{byte(0)}\n\tvar p float64\n\tfor i := 0; i < b.N; i++ {\n\t\tp = estimator.PairProbability(now, results, toNode,\n\t\t\t150_000_000, 300_000)\n\t}\n\tprobability = p\n}\n\n// BenchmarkAprioriPairProbability benchmarks the probability calculation.",
      "length": 402,
      "tokens": 48,
      "embedding": []
    },
    {
      "slug": "func BenchmarkAprioriPairProbability(b *testing.B) {",
      "content": "func BenchmarkAprioriPairProbability(b *testing.B) {\n\testimator := AprioriEstimator{\n\t\tAprioriConfig: AprioriConfig{\n\t\t\tAprioriWeight:         0.2,\n\t\t\tPenaltyHalfLife:       48 * time.Hour,\n\t\t\tAprioriHopProbability: 0.5,\n\t\t},\n\t}\n\n\ttoNode := route.Vertex{byte(0)}\n\tvar p float64\n\tfor i := 0; i < b.N; i++ {\n\t\tp = estimator.PairProbability(now, results, toNode,\n\t\t\t150_000_000, 300_000)\n\t}\n\tprobability = p\n}\n\n// BenchmarkExp benchmarks the exponential function as provided by the math\n// library.",
      "length": 424,
      "tokens": 55,
      "embedding": []
    },
    {
      "slug": "func BenchmarkExp(b *testing.B) {",
      "content": "func BenchmarkExp(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tmath.Exp(0.1)\n\t}\n}\n",
      "length": 45,
      "tokens": 12,
      "embedding": []
    }
  ]
}