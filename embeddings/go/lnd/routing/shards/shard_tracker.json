{
  "filepath": "../implementations/go/lnd/routing/shards/shard_tracker.go",
  "package": "shards",
  "sections": [
    {
      "slug": "type PaymentShard interface {",
      "content": "type PaymentShard interface {\n\t// Hash returns the hash used for the HTLC representing this shard.\n\tHash() lntypes.Hash\n\n\t// MPP returns any extra MPP records that should be set for the final\n\t// hop on the route used by this shard.\n\tMPP() *record.MPP\n\n\t// AMP returns any extra AMP records that should be set for the final\n\t// hop on the route used by this shard.\n\tAMP() *record.AMP\n}\n\n// ShardTracker is an interface representing a tracker that keeps track of the\n// inflight shards of a payment, and is able to assign new shards the correct\n// options such as hash and extra records.",
      "length": 542,
      "tokens": 101,
      "embedding": []
    },
    {
      "slug": "type ShardTracker interface {",
      "content": "type ShardTracker interface {\n\t// NewShard registers a new attempt with the ShardTracker and returns a\n\t// new shard representing this attempt. This attempt's shard should be\n\t// canceled if it ends up not being used by the overall payment, i.e.\n\t// if the attempt fails.\n\tNewShard(uint64, bool) (PaymentShard, error)\n\n\t// CancelShard cancel's the shard corresponding to the given attempt\n\t// ID. This lets the ShardTracker free up any slots used by this shard,\n\t// and in case of AMP payments return the share used by this shard to\n\t// the root share.\n\tCancelShard(uint64) error\n\n\t// GetHash retrieves the hash used by the shard of the given attempt\n\t// ID. This will return an error if the attempt ID is unknown.\n\tGetHash(uint64) (lntypes.Hash, error)\n}\n\n// Shard is a struct used for simple shards where we only need to keep map it\n// to a single hash.",
      "length": 807,
      "tokens": 143,
      "embedding": []
    },
    {
      "slug": "type Shard struct {",
      "content": "type Shard struct {\n\thash lntypes.Hash\n}\n\n// Hash returns the hash used for the HTLC representing this shard.",
      "length": 86,
      "tokens": 15,
      "embedding": []
    },
    {
      "slug": "func (s *Shard) Hash() lntypes.Hash {",
      "content": "func (s *Shard) Hash() lntypes.Hash {\n\treturn s.hash\n}\n\n// MPP returns any extra MPP records that should be set for the final hop on\n// the route used by this shard.",
      "length": 123,
      "tokens": 26,
      "embedding": []
    },
    {
      "slug": "func (s *Shard) MPP() *record.MPP {",
      "content": "func (s *Shard) MPP() *record.MPP {\n\treturn nil\n}\n\n// AMP returns any extra AMP records that should be set for the final hop on\n// the route used by this shard.",
      "length": 120,
      "tokens": 26,
      "embedding": []
    },
    {
      "slug": "func (s *Shard) AMP() *record.AMP {",
      "content": "func (s *Shard) AMP() *record.AMP {\n\treturn nil\n}\n\n// SimpleShardTracker is an implementation of the ShardTracker interface that\n// simply maps attempt IDs to hashes. New shards will be given a static payment\n// hash. This should be used for regular and MPP payments, in addition to\n// resumed payments where all the attempt's hashes have already been created.",
      "length": 318,
      "tokens": 54,
      "embedding": []
    },
    {
      "slug": "type SimpleShardTracker struct {",
      "content": "type SimpleShardTracker struct {\n\thash   lntypes.Hash\n\tshards map[uint64]lntypes.Hash\n\tsync.Mutex\n}\n\n// A compile time check to ensure SimpleShardTracker implements the\n// ShardTracker interface.\nvar _ ShardTracker = (*SimpleShardTracker)(nil)\n\n// NewSimpleShardTracker creates a new instance of the SimpleShardTracker with\n// the given payment hash and existing attempts.",
      "length": 329,
      "tokens": 42,
      "embedding": []
    },
    {
      "slug": "func NewSimpleShardTracker(paymentHash lntypes.Hash,",
      "content": "func NewSimpleShardTracker(paymentHash lntypes.Hash,\n\tshards map[uint64]lntypes.Hash) ShardTracker {\n\n\tif shards == nil {\n\t\tshards = make(map[uint64]lntypes.Hash)\n\t}\n\n\treturn &SimpleShardTracker{\n\t\thash:   paymentHash,\n\t\tshards: shards,\n\t}\n}\n\n// NewShard registers a new attempt with the ShardTracker and returns a\n// new shard representing this attempt. This attempt's shard should be canceled\n// if it ends up not being used by the overall payment, i.e. if the attempt\n// fails.",
      "length": 412,
      "tokens": 63,
      "embedding": []
    },
    {
      "slug": "func (m *SimpleShardTracker) NewShard(id uint64, _ bool) (PaymentShard, error) {",
      "content": "func (m *SimpleShardTracker) NewShard(id uint64, _ bool) (PaymentShard, error) {\n\tm.Lock()\n\tm.shards[id] = m.hash\n\tm.Unlock()\n\n\treturn &Shard{\n\t\thash: m.hash,\n\t}, nil\n}\n\n// CancelShard cancel's the shard corresponding to the given attempt ID.",
      "length": 152,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (m *SimpleShardTracker) CancelShard(id uint64) error {",
      "content": "func (m *SimpleShardTracker) CancelShard(id uint64) error {\n\tm.Lock()\n\tdelete(m.shards, id)\n\tm.Unlock()\n\n\treturn nil\n}\n\n// GetHash retrieves the hash used by the shard of the given attempt ID. This\n// will return an error if the attempt ID is unknown.",
      "length": 183,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "func (m *SimpleShardTracker) GetHash(id uint64) (lntypes.Hash, error) {",
      "content": "func (m *SimpleShardTracker) GetHash(id uint64) (lntypes.Hash, error) {\n\tm.Lock()\n\thash, ok := m.shards[id]\n\tm.Unlock()\n\tif !ok {\n\t\treturn lntypes.Hash{}, fmt.Errorf(\"hash for attempt id %v \"+\n\t\t\t\"not found\", id)\n\t}\n\n\treturn hash, nil\n}\n",
      "length": 155,
      "tokens": 25,
      "embedding": []
    }
  ]
}