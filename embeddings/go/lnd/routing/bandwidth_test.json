{
  "filepath": "../implementations/go/lnd/routing/bandwidth_test.go",
  "package": "routing",
  "sections": [
    {
      "slug": "func TestBandwidthManager(t *testing.T) {",
      "content": "func TestBandwidthManager(t *testing.T) {\n\tvar (\n\t\tchan1ID      uint64         = 101\n\t\tchan2ID      uint64         = 102\n\t\tchanCapacity btcutil.Amount = 100000\n\t)\n\n\ttestCases := []struct {\n\t\tname              string\n\t\tchannelID         uint64\n\t\tlinkQuery         getLinkQuery\n\t\texpectedBandwidth lnwire.MilliSatoshi\n\t\texpectFound       bool\n\t}{\n\t\t{\n\t\t\tname:      \"channel not ours\",\n\t\t\tchannelID: chan2ID,\n\t\t\t// Set a link query that will fail our test since we\n\t\t\t// don't expect to query the switch for a channel that\n\t\t\t// is not ours.\n\t\t\tlinkQuery: func(id lnwire.ShortChannelID) (\n\t\t\t\thtlcswitch.ChannelLink, error) {\n\n\t\t\t\trequire.Fail(t, \"link query unexpected for: \"+\n\t\t\t\t\t\"%v\", id)\n\n\t\t\t\treturn nil, nil\n\t\t\t},\n\t\t\texpectedBandwidth: 0,\n\t\t\texpectFound:       false,\n\t\t},\n\t\t{\n\t\t\tname:      \"channel ours, link not online\",\n\t\t\tchannelID: chan1ID,\n\t\t\tlinkQuery: func(lnwire.ShortChannelID) (\n\t\t\t\thtlcswitch.ChannelLink, error) {\n\n\t\t\t\treturn nil, htlcswitch.ErrChannelLinkNotFound\n\t\t\t},\n\t\t\texpectedBandwidth: 0,\n\t\t\texpectFound:       true,\n\t\t},\n\t\t{\n\t\t\tname:      \"channel ours, link not eligible\",\n\t\t\tchannelID: chan1ID,\n\t\t\tlinkQuery: func(lnwire.ShortChannelID) (\n\t\t\t\thtlcswitch.ChannelLink, error) {\n\n\t\t\t\treturn &mockLink{\n\t\t\t\t\tineligible: true,\n\t\t\t\t}, nil\n\t\t\t},\n\t\t\texpectedBandwidth: 0,\n\t\t\texpectFound:       true,\n\t\t},\n\t\t{\n\t\t\tname:      \"channel ours, link can't add htlc\",\n\t\t\tchannelID: chan1ID,\n\t\t\tlinkQuery: func(lnwire.ShortChannelID) (\n\t\t\t\thtlcswitch.ChannelLink, error) {\n\n\t\t\t\treturn &mockLink{\n\t\t\t\t\tmayAddOutgoingErr: errors.New(\n\t\t\t\t\t\t\"can't add htlc\",\n\t\t\t\t\t),\n\t\t\t\t}, nil\n\t\t\t},\n\t\t\texpectedBandwidth: 0,\n\t\t\texpectFound:       true,\n\t\t},\n\t\t{\n\t\t\tname:      \"channel ours, bandwidth available\",\n\t\t\tchannelID: chan1ID,\n\t\t\tlinkQuery: func(lnwire.ShortChannelID) (\n\t\t\t\thtlcswitch.ChannelLink, error) {\n\n\t\t\t\treturn &mockLink{\n\t\t\t\t\tbandwidth: 321,\n\t\t\t\t}, nil\n\t\t\t},\n\t\t\texpectedBandwidth: 321,\n\t\t\texpectFound:       true,\n\t\t},\n\t}\n\n\tfor _, testCase := range testCases {\n\t\ttestCase := testCase\n\n\t\tt.Run(testCase.name, func(t *testing.T) {\n\t\t\tg := newMockGraph(t)\n\n\t\t\tsourceNode := newMockNode(sourceNodeID)\n\t\t\ttargetNode := newMockNode(targetNodeID)\n\n\t\t\tg.addNode(sourceNode)\n\t\t\tg.addNode(targetNode)\n\t\t\tg.addChannel(\n\t\t\t\tchan1ID, sourceNodeID, targetNodeID,\n\t\t\t\tchanCapacity,\n\t\t\t)\n\n\t\t\tm, err := newBandwidthManager(\n\t\t\t\tg, sourceNode.pubkey, testCase.linkQuery,\n\t\t\t)\n\t\t\trequire.NoError(t, err)\n\n\t\t\tbandwidth, found := m.availableChanBandwidth(\n\t\t\t\ttestCase.channelID, 10,\n\t\t\t)\n\t\t\trequire.Equal(t, testCase.expectedBandwidth, bandwidth)\n\t\t\trequire.Equal(t, testCase.expectFound, found)\n\t\t})\n\t}\n}\n",
      "length": 2441,
      "tokens": 255,
      "embedding": []
    }
  ]
}