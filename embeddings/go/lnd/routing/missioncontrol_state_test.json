{
  "filepath": "../implementations/go/lnd/routing/missioncontrol_state_test.go",
  "package": "routing",
  "sections": [
    {
      "slug": "func TestMissionControlStateSetLastPairResult(t *testing.T) {",
      "content": "func TestMissionControlStateSetLastPairResult(t *testing.T) {\n\tconst minFailureRelaxInterval = time.Minute\n\tstate := newMissionControlState(minFailureRelaxInterval)\n\n\tvar (\n\t\tfrom      = route.Vertex{1}\n\t\tto        = route.Vertex{2}\n\t\ttimestamp = testTime\n\t)\n\n\t// Report a 1000 sat failure.\n\tstate.setLastPairResult(\n\t\tfrom, to, timestamp, &pairResult{amt: 1000}, false,\n\t)\n\tresult, _ := state.getLastPairResult(from)\n\tif result[to].FailAmt != 1000 {\n\t\tt.Fatalf(\"unexpected fail amount %v\", result[to].FailAmt)\n\t}\n\n\t// Report an 1100 sat failure one hour later. It is expected to\n\t// overwrite the previous failure.\n\ttimestamp = timestamp.Add(time.Hour)\n\tstate.setLastPairResult(\n\t\tfrom, to, timestamp, &pairResult{amt: 1100}, false,\n\t)\n\tresult, _ = state.getLastPairResult(from)\n\tif result[to].FailAmt != 1100 {\n\t\tt.Fatalf(\"unexpected fail amount %v\", result[to].FailAmt)\n\t}\n\n\t// Report a 1200 sat failure one second later. Because this increase of\n\t// the failure amount is too soon after the previous failure, the result\n\t// is not applied.\n\ttimestamp = timestamp.Add(time.Second)\n\tstate.setLastPairResult(\n\t\tfrom, to, timestamp, &pairResult{amt: 1200}, false,\n\t)\n\tresult, _ = state.getLastPairResult(from)\n\tif result[to].FailAmt != 1100 {\n\t\tt.Fatalf(\"unexpected fail amount %v\", result[to].FailAmt)\n\t}\n\n\t// Roll back time 1 second to test forced import.\n\ttimestamp = testTime\n\tstate.setLastPairResult(\n\t\tfrom, to, timestamp, &pairResult{amt: 999}, true,\n\t)\n\tresult, _ = state.getLastPairResult(from)\n\trequire.Equal(t, 999, int(result[to].FailAmt))\n\n\t// Report an 1500 sat success.\n\ttimestamp = timestamp.Add(time.Second)\n\tstate.setLastPairResult(\n\t\tfrom, to, timestamp, &pairResult{amt: 1500, success: true}, false,\n\t)\n\tresult, _ = state.getLastPairResult(from)\n\t// We don't expect the failtime to change, only the fail amount, we\n\t// expect however change of both the success time and the success amount.\n\texpected := TimedPairResult{\n\t\tFailTime:    timestamp.Add(-time.Second),\n\t\tFailAmt:     1501,\n\t\tSuccessTime: timestamp,\n\t\tSuccessAmt:  1500,\n\t}\n\trequire.Equal(t, expected, result[to])\n\n\t// Again roll back time to test forced import.\n\tstate.setLastPairResult(\n\t\tfrom, to, testTime, &pairResult{amt: 50, success: true}, true,\n\t)\n\tresult, _ = state.getLastPairResult(from)\n\t// We don't expect the failtime to change, only the fail amount, we\n\t// expect however change of both the success time and the success amount.\n\texpected = TimedPairResult{\n\t\tFailTime:    timestamp.Add(-time.Second),\n\t\tFailAmt:     51,\n\t\tSuccessTime: testTime,\n\t\tSuccessAmt:  50,\n\t}\n\trequire.Equal(t, expected, result[to])\n}\n",
      "length": 2464,
      "tokens": 305,
      "embedding": []
    }
  ]
}