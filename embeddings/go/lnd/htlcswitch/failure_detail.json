{
  "filepath": "../implementations/go/lnd/htlcswitch/failure_detail.go",
  "package": "htlcswitch",
  "sections": [
    {
      "slug": "type FailureDetail interface {",
      "content": "type FailureDetail interface {\n\t// FailureString returns the string representation of a failure\n\t// detail.\n\tFailureString() string\n}\n\n// OutgoingFailure is an enum which is used to enrich failures which occur in\n// the switch or on our outgoing link with additional metadata.",
      "length": 239,
      "tokens": 39,
      "embedding": []
    },
    {
      "slug": "type OutgoingFailure int",
      "content": "type OutgoingFailure int\n\nconst (\n\t// OutgoingFailureNone is returned when the wire message contains\n\t// sufficient information.\n\tOutgoingFailureNone OutgoingFailure = iota\n\n\t// OutgoingFailureDecodeError indicates that we could not decode the\n\t// failure reason provided for a failed payment.\n\tOutgoingFailureDecodeError\n\n\t// OutgoingFailureLinkNotEligible indicates that a routing attempt was\n\t// made over a link that is not eligible for routing.\n\tOutgoingFailureLinkNotEligible\n\n\t// OutgoingFailureOnChainTimeout indicates that a payment had to be\n\t// timed out on chain before it got past the first hop by us or the\n\t// remote party.\n\tOutgoingFailureOnChainTimeout\n\n\t// OutgoingFailureHTLCExceedsMax is returned when a htlc exceeds our\n\t// policy's maximum htlc amount.\n\tOutgoingFailureHTLCExceedsMax\n\n\t// OutgoingFailureInsufficientBalance is returned when we cannot route a\n\t// htlc due to insufficient outgoing capacity.\n\tOutgoingFailureInsufficientBalance\n\n\t// OutgoingFailureCircularRoute is returned when an attempt is made\n\t// to forward a htlc through our node which arrives and leaves on the\n\t// same channel.\n\tOutgoingFailureCircularRoute\n\n\t// OutgoingFailureIncompleteForward is returned when we cancel an incomplete\n\t// forward.\n\tOutgoingFailureIncompleteForward\n\n\t// OutgoingFailureDownstreamHtlcAdd is returned when we fail to add a\n\t// downstream htlc to our outgoing link.\n\tOutgoingFailureDownstreamHtlcAdd\n\n\t// OutgoingFailureForwardsDisabled is returned when the switch is\n\t// configured to disallow forwards.\n\tOutgoingFailureForwardsDisabled\n)\n\n// FailureString returns the string representation of a failure detail.\n//\n// Note: it is part of the FailureDetail interface.",
      "length": 1623,
      "tokens": 209,
      "embedding": []
    },
    {
      "slug": "func (fd OutgoingFailure) FailureString() string {",
      "content": "func (fd OutgoingFailure) FailureString() string {\n\tswitch fd {\n\tcase OutgoingFailureNone:\n\t\treturn \"no failure detail\"\n\n\tcase OutgoingFailureDecodeError:\n\t\treturn \"could not decode wire failure\"\n\n\tcase OutgoingFailureLinkNotEligible:\n\t\treturn \"link not eligible\"\n\n\tcase OutgoingFailureOnChainTimeout:\n\t\treturn \"payment was resolved on-chain, then canceled back\"\n\n\tcase OutgoingFailureHTLCExceedsMax:\n\t\treturn \"htlc exceeds maximum policy amount\"\n\n\tcase OutgoingFailureInsufficientBalance:\n\t\treturn \"insufficient bandwidth to route htlc\"\n\n\tcase OutgoingFailureCircularRoute:\n\t\treturn \"same incoming and outgoing channel\"\n\n\tcase OutgoingFailureIncompleteForward:\n\t\treturn \"failed after detecting incomplete forward\"\n\n\tcase OutgoingFailureDownstreamHtlcAdd:\n\t\treturn \"could not add downstream htlc\"\n\n\tcase OutgoingFailureForwardsDisabled:\n\t\treturn \"node configured to disallow forwards\"\n\n\tdefault:\n\t\treturn \"unknown failure detail\"\n\t}\n}\n",
      "length": 849,
      "tokens": 88,
      "embedding": []
    }
  ]
}