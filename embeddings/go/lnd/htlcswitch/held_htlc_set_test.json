{
  "filepath": "../implementations/go/lnd/htlcswitch/held_htlc_set_test.go",
  "package": "htlcswitch",
  "sections": [
    {
      "slug": "func TestHeldHtlcSetEmpty(t *testing.T) {",
      "content": "func TestHeldHtlcSetEmpty(t *testing.T) {\n\tset := newHeldHtlcSet()\n\n\t// Test operations on an empty set.\n\trequire.False(t, set.exists(models.CircuitKey{}))\n\n\t_, err := set.pop(models.CircuitKey{})\n\trequire.Error(t, err)\n\n\tset.popAll(\n\t\tfunc(_ InterceptedForward) {\n\t\t\trequire.Fail(t, \"unexpected fwd\")\n\t\t},\n\t)\n}\n",
      "length": 256,
      "tokens": 28,
      "embedding": []
    },
    {
      "slug": "func TestHeldHtlcSet(t *testing.T) {",
      "content": "func TestHeldHtlcSet(t *testing.T) {\n\tset := newHeldHtlcSet()\n\n\tkey := models.CircuitKey{\n\t\tChanID: lnwire.NewShortChanIDFromInt(1),\n\t\tHtlcID: 2,\n\t}\n\n\t// Test pushing a nil forward.\n\trequire.Error(t, set.push(key, nil))\n\n\t// Test pushing a forward.\n\tfwd := &interceptedForward{\n\t\thtlc: &lnwire.UpdateAddHTLC{},\n\t}\n\trequire.NoError(t, set.push(key, fwd))\n\n\t// Re-pushing should fail.\n\trequire.Error(t, set.push(key, fwd))\n\n\t// Test popping the fwd.\n\tpoppedFwd, err := set.pop(key)\n\trequire.NoError(t, err)\n\trequire.Equal(t, fwd, poppedFwd)\n\n\t_, err = set.pop(key)\n\trequire.Error(t, err)\n\n\t// Pushing the forward again.\n\trequire.NoError(t, set.push(key, fwd))\n\n\t// Test for each.\n\tvar cbCalled bool\n\tset.forEach(func(_ InterceptedForward) {\n\t\tcbCalled = true\n\n\t\trequire.Equal(t, fwd, poppedFwd)\n\t})\n\trequire.True(t, cbCalled)\n\n\t// Test popping all forwards.\n\tcbCalled = false\n\tset.popAll(\n\t\tfunc(_ InterceptedForward) {\n\t\t\tcbCalled = true\n\n\t\t\trequire.Equal(t, fwd, poppedFwd)\n\t\t},\n\t)\n\trequire.True(t, cbCalled)\n\n\t_, err = set.pop(key)\n\trequire.Error(t, err)\n}\n",
      "length": 968,
      "tokens": 117,
      "embedding": []
    },
    {
      "slug": "func TestHeldHtlcSetAutoFails(t *testing.T) {",
      "content": "func TestHeldHtlcSetAutoFails(t *testing.T) {\n\tset := newHeldHtlcSet()\n\n\tkey := models.CircuitKey{\n\t\tChanID: lnwire.NewShortChanIDFromInt(1),\n\t\tHtlcID: 2,\n\t}\n\n\tconst autoFailHeight = 100\n\tfwd := &interceptedForward{\n\t\tpacket:         &htlcPacket{},\n\t\thtlc:           &lnwire.UpdateAddHTLC{},\n\t\tautoFailHeight: autoFailHeight,\n\t}\n\trequire.NoError(t, set.push(key, fwd))\n\n\t// Test popping auto fails up to one block before the auto-fail height\n\t// of our forward.\n\tset.popAutoFails(\n\t\tautoFailHeight-1,\n\t\tfunc(_ InterceptedForward) {\n\t\t\trequire.Fail(t, \"unexpected fwd\")\n\t\t},\n\t)\n\n\t// Popping succeeds at the auto-fail height.\n\tcbCalled := false\n\tset.popAutoFails(\n\t\tautoFailHeight,\n\t\tfunc(poppedFwd InterceptedForward) {\n\t\t\tcbCalled = true\n\n\t\t\trequire.Equal(t, fwd, poppedFwd)\n\t\t},\n\t)\n\trequire.True(t, cbCalled)\n\n\t// After this, there should be nothing more to pop.\n\tset.popAutoFails(\n\t\tautoFailHeight,\n\t\tfunc(_ InterceptedForward) {\n\t\t\trequire.Fail(t, \"unexpected fwd\")\n\t\t},\n\t)\n}\n",
      "length": 889,
      "tokens": 101,
      "embedding": []
    }
  ]
}