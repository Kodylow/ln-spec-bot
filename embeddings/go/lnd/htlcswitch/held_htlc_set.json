{
  "filepath": "../implementations/go/lnd/htlcswitch/held_htlc_set.go",
  "package": "htlcswitch",
  "sections": [
    {
      "slug": "type heldHtlcSet struct {",
      "content": "type heldHtlcSet struct {\n\tset map[models.CircuitKey]InterceptedForward\n}\n",
      "length": 46,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func newHeldHtlcSet() *heldHtlcSet {",
      "content": "func newHeldHtlcSet() *heldHtlcSet {\n\treturn &heldHtlcSet{\n\t\tset: make(map[models.CircuitKey]InterceptedForward),\n\t}\n}\n\n// forEach iterates over all held forwards and calls the given callback for each\n// of them.",
      "length": 169,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (h *heldHtlcSet) forEach(cb func(InterceptedForward)) {",
      "content": "func (h *heldHtlcSet) forEach(cb func(InterceptedForward)) {\n\tfor _, fwd := range h.set {\n\t\tcb(fwd)\n\t}\n}\n\n// popAll calls the callback for each forward and removes them from the set.",
      "length": 116,
      "tokens": 24,
      "embedding": []
    },
    {
      "slug": "func (h *heldHtlcSet) popAll(cb func(InterceptedForward)) {",
      "content": "func (h *heldHtlcSet) popAll(cb func(InterceptedForward)) {\n\tfor _, fwd := range h.set {\n\t\tcb(fwd)\n\t}\n\n\th.set = make(map[models.CircuitKey]InterceptedForward)\n}\n\n// popAutoFails calls the callback for each forward that has an auto-fail height\n// equal or less then the specified pop height and removes them from the set.",
      "length": 252,
      "tokens": 41,
      "embedding": []
    },
    {
      "slug": "func (h *heldHtlcSet) popAutoFails(height uint32, cb func(InterceptedForward)) {",
      "content": "func (h *heldHtlcSet) popAutoFails(height uint32, cb func(InterceptedForward)) {\n\tfor key, fwd := range h.set {\n\t\tif uint32(fwd.Packet().AutoFailHeight) > height {\n\t\t\tcontinue\n\t\t}\n\n\t\tcb(fwd)\n\n\t\tdelete(h.set, key)\n\t}\n}\n\n// pop returns the specified forward and removes it from the set.",
      "length": 192,
      "tokens": 31,
      "embedding": []
    },
    {
      "slug": "func (h *heldHtlcSet) pop(key models.CircuitKey) (InterceptedForward, error) {",
      "content": "func (h *heldHtlcSet) pop(key models.CircuitKey) (InterceptedForward, error) {\n\tintercepted, ok := h.set[key]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"fwd %v not found\", key)\n\t}\n\n\tdelete(h.set, key)\n\n\treturn intercepted, nil\n}\n\n// exists tests whether the specified forward is part of the set.",
      "length": 199,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "func (h *heldHtlcSet) exists(key models.CircuitKey) bool {",
      "content": "func (h *heldHtlcSet) exists(key models.CircuitKey) bool {\n\t_, ok := h.set[key]\n\n\treturn ok\n}\n\n// push adds the specified forward to the set. An error is returned if the\n// forward exists already.",
      "length": 131,
      "tokens": 26,
      "embedding": []
    },
    {
      "slug": "func (h *heldHtlcSet) push(key models.CircuitKey,",
      "content": "func (h *heldHtlcSet) push(key models.CircuitKey,\n\tfwd InterceptedForward) error {\n\n\tif fwd == nil {\n\t\treturn errors.New(\"nil fwd pushed\")\n\t}\n\n\tif h.exists(key) {\n\t\treturn errors.New(\"htlc already exists in set\")\n\t}\n\n\th.set[key] = fwd\n\n\treturn nil\n}\n",
      "length": 186,
      "tokens": 30,
      "embedding": []
    }
  ]
}