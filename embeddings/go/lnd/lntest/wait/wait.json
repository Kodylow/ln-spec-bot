{
  "filepath": "../implementations/go/lnd/lntest/wait/wait.go",
  "package": "wait",
  "sections": [
    {
      "slug": "func Predicate(pred func() bool, timeout time.Duration) error {",
      "content": "func Predicate(pred func() bool, timeout time.Duration) error {\n\texitTimer := time.After(timeout)\n\tresult := make(chan bool, 1)\n\n\tfor {\n\t\t<-time.After(PollInterval)\n\n\t\tgo func() {\n\t\t\tresult <- pred()\n\t\t}()\n\n\t\t// Each time we call the pred(), we expect a result to be\n\t\t// returned otherwise it will timeout.\n\t\tselect {\n\t\tcase <-exitTimer:\n\t\t\treturn fmt.Errorf(\"predicate not satisfied after \" +\n\t\t\t\t\"time out\")\n\n\t\tcase succeed := <-result:\n\t\t\tif succeed {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n}\n\n// NoError is a wrapper around Predicate that waits for the passed method f to\n// execute without error, and returns the last error encountered if this doesn't\n// happen within the timeout.",
      "length": 584,
      "tokens": 96,
      "embedding": []
    },
    {
      "slug": "func NoError(f func() error, timeout time.Duration) error {",
      "content": "func NoError(f func() error, timeout time.Duration) error {\n\tvar predErr error\n\tpred := func() bool {\n\t\tif err := f(); err != nil {\n\t\t\tpredErr = err\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\n\t// If f() doesn't succeed within the timeout, return the last\n\t// encountered error.\n\tif err := Predicate(pred, timeout); err != nil {\n\t\treturn predErr\n\t}\n\n\treturn nil\n}\n\n// Invariant is a helper test function that will wait for a timeout period of\n// time, verifying that a statement remains true for the entire duration.  This\n// function is helpful as timing doesn't always line up well when running\n// integration tests with several running lnd nodes. This function gives callers\n// a way to assert that some property is maintained over a particular time\n// frame.",
      "length": 673,
      "tokens": 123,
      "embedding": []
    },
    {
      "slug": "func Invariant(statement func() bool, timeout time.Duration) error {",
      "content": "func Invariant(statement func() bool, timeout time.Duration) error {\n\tconst pollInterval = 20 * time.Millisecond\n\n\texitTimer := time.After(timeout)\n\tfor {\n\t\t<-time.After(pollInterval)\n\n\t\t// Fail if the invariant is broken while polling.\n\t\tif !statement() {\n\t\t\treturn fmt.Errorf(\"invariant broken before time out\")\n\t\t}\n\n\t\tselect {\n\t\tcase <-exitTimer:\n\t\t\treturn nil\n\t\tdefault:\n\t\t}\n\t}\n}\n\n// InvariantNoError is a wrapper around Invariant that waits out the duration\n// specified by timeout. It fails if the predicate ever returns an error during\n// that time.",
      "length": 466,
      "tokens": 70,
      "embedding": []
    },
    {
      "slug": "func InvariantNoError(f func() error, timeout time.Duration) error {",
      "content": "func InvariantNoError(f func() error, timeout time.Duration) error {\n\tvar predErr error\n\tpred := func() bool {\n\t\tif err := f(); err != nil {\n\t\t\tpredErr = err\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\n\tif err := Invariant(pred, timeout); err != nil {\n\t\treturn predErr\n\t}\n\n\treturn nil\n}\n",
      "length": 197,
      "tokens": 40,
      "embedding": []
    }
  ]
}