{
  "filepath": "../implementations/go/lnd/lntest/bitcoind_common.go",
  "package": "lntest",
  "sections": [
    {
      "slug": "//go:build bitcoind",
      "content": "//go:build bitcoind\n// +build bitcoind\n\npackage lntest\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/btcsuite/btcd/chaincfg\"\n\t\"github.com/btcsuite/btcd/rpcclient\"\n\t\"github.com/lightningnetwork/lnd/lntest/node\"\n)\n\n// logDirPattern is the pattern of the name of the temporary log directory.\nconst logDirPattern = \"%s/.backendlogs\"\n\n// BitcoindBackendConfig is an implementation of the BackendConfig interface\n// backed by a Bitcoind node.",
      "length": 444,
      "tokens": 50,
      "embedding": []
    },
    {
      "slug": "type BitcoindBackendConfig struct {",
      "content": "type BitcoindBackendConfig struct {\n\trpcHost      string\n\trpcUser      string\n\trpcPass      string\n\tzmqBlockPath string\n\tzmqTxPath    string\n\tp2pPort      int\n\trpcClient    *rpcclient.Client\n\trpcPolling   bool\n\n\t// minerAddr is the p2p address of the miner to connect to.\n\tminerAddr string\n}\n\n// A compile time assertion to ensure BitcoindBackendConfig meets the\n// BackendConfig interface.\nvar _ node.BackendConfig = (*BitcoindBackendConfig)(nil)\n\n// GenArgs returns the arguments needed to be passed to LND at startup for\n// using this node as a chain backend.",
      "length": 508,
      "tokens": 71,
      "embedding": []
    },
    {
      "slug": "func (b BitcoindBackendConfig) GenArgs() []string {",
      "content": "func (b BitcoindBackendConfig) GenArgs() []string {\n\tvar args []string\n\targs = append(args, \"--bitcoin.node=bitcoind\")\n\targs = append(args, fmt.Sprintf(\"--bitcoind.rpchost=%v\", b.rpcHost))\n\targs = append(args, fmt.Sprintf(\"--bitcoind.rpcuser=%v\", b.rpcUser))\n\targs = append(args, fmt.Sprintf(\"--bitcoind.rpcpass=%v\", b.rpcPass))\n\n\tif b.rpcPolling {\n\t\targs = append(args, fmt.Sprintf(\"--bitcoind.rpcpolling\"))\n\t\targs = append(args,\n\t\t\tfmt.Sprintf(\"--bitcoind.blockpollinginterval=10ms\"))\n\t\targs = append(args,\n\t\t\tfmt.Sprintf(\"--bitcoind.txpollinginterval=10ms\"))\n\t} else {\n\t\targs = append(args, fmt.Sprintf(\"--bitcoind.zmqpubrawblock=%v\",\n\t\t\tb.zmqBlockPath))\n\t\targs = append(args, fmt.Sprintf(\"--bitcoind.zmqpubrawtx=%v\",\n\t\t\tb.zmqTxPath))\n\t}\n\n\treturn args\n}\n\n// ConnectMiner is called to establish a connection to the test miner.",
      "length": 754,
      "tokens": 66,
      "embedding": []
    },
    {
      "slug": "func (b BitcoindBackendConfig) ConnectMiner() error {",
      "content": "func (b BitcoindBackendConfig) ConnectMiner() error {\n\treturn b.rpcClient.AddNode(b.minerAddr, rpcclient.ANAdd)\n}\n\n// DisconnectMiner is called to disconnect the miner.",
      "length": 111,
      "tokens": 12,
      "embedding": []
    },
    {
      "slug": "func (b BitcoindBackendConfig) DisconnectMiner() error {",
      "content": "func (b BitcoindBackendConfig) DisconnectMiner() error {\n\treturn b.rpcClient.AddNode(b.minerAddr, rpcclient.ANRemove)\n}\n\n// Credentials returns the rpc username, password and host for the backend.",
      "length": 136,
      "tokens": 16,
      "embedding": []
    },
    {
      "slug": "func (b BitcoindBackendConfig) Credentials() (string, string, string, error) {",
      "content": "func (b BitcoindBackendConfig) Credentials() (string, string, string, error) {\n\treturn b.rpcUser, b.rpcPass, b.rpcHost, nil\n}\n\n// Name returns the name of the backend type.",
      "length": 90,
      "tokens": 15,
      "embedding": []
    },
    {
      "slug": "func (b BitcoindBackendConfig) Name() string {",
      "content": "func (b BitcoindBackendConfig) Name() string {\n\treturn \"bitcoind\"\n}\n\n// newBackend starts a bitcoind node with the given extra parameters and returns\n// a BitcoindBackendConfig for that node.",
      "length": 140,
      "tokens": 22,
      "embedding": []
    },
    {
      "slug": "func newBackend(miner string, netParams *chaincfg.Params, extraArgs []string,",
      "content": "func newBackend(miner string, netParams *chaincfg.Params, extraArgs []string,\n\trpcPolling bool) (*BitcoindBackendConfig, func() error, error) {\n\n\tbaseLogDir := fmt.Sprintf(logDirPattern, node.GetLogDir())\n\tif netParams != &chaincfg.RegressionNetParams {\n\t\treturn nil, nil, fmt.Errorf(\"only regtest supported\")\n\t}\n\n\tif err := os.MkdirAll(baseLogDir, 0700); err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tlogFile, err := filepath.Abs(baseLogDir + \"/bitcoind.log\")\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\ttempBitcoindDir, err := ioutil.TempDir(\"\", \"bitcoind\")\n\tif err != nil {\n\t\treturn nil, nil,\n\t\t\tfmt.Errorf(\"unable to create temp directory: %v\", err)\n\t}\n\n\tzmqBlockAddr := fmt.Sprintf(\"tcp://127.0.0.1:%d\",\n\t\tnode.NextAvailablePort())\n\tzmqTxAddr := fmt.Sprintf(\"tcp://127.0.0.1:%d\",\n\t\tnode.NextAvailablePort())\n\trpcPort := node.NextAvailablePort()\n\tp2pPort := node.NextAvailablePort()\n\n\tcmdArgs := []string{\n\t\t\"-datadir=\" + tempBitcoindDir,\n\t\t\"-whitelist=127.0.0.1\", // whitelist localhost to speed up relay\n\t\t\"-rpcauth=weks:469e9bb14ab2360f8e226efed5ca6f\" +\n\t\t\t\"d$507c670e800a95284294edb5773b05544b\" +\n\t\t\t\"220110063096c221be9933c82d38e1\",\n\t\tfmt.Sprintf(\"-rpcport=%d\", rpcPort),\n\t\tfmt.Sprintf(\"-port=%d\", p2pPort),\n\t\t\"-zmqpubrawblock=\" + zmqBlockAddr,\n\t\t\"-zmqpubrawtx=\" + zmqTxAddr,\n\t\t\"-debuglogfile=\" + logFile,\n\t}\n\tcmdArgs = append(cmdArgs, extraArgs...)\n\tbitcoind := exec.Command(\"bitcoind\", cmdArgs...)\n\n\terr = bitcoind.Start()\n\tif err != nil {\n\t\tif err := os.RemoveAll(tempBitcoindDir); err != nil {\n\t\t\tfmt.Printf(\"unable to remote temp dir %v: %v\",\n\t\t\t\ttempBitcoindDir, err)\n\t\t}\n\t\treturn nil, nil, fmt.Errorf(\"couldn't start bitcoind: %v\", err)\n\t}\n\n\tcleanUp := func() error {\n\t\t_ = bitcoind.Process.Kill()\n\t\t_ = bitcoind.Wait()\n\n\t\tvar errStr string\n\t\t// After shutting down the chain backend, we'll make a copy of\n\t\t// the log file before deleting the temporary log dir.\n\t\tlogDestination := fmt.Sprintf(\n\t\t\t\"%s/output_bitcoind_chainbackend.log\", node.GetLogDir(),\n\t\t)\n\t\terr := node.CopyFile(logDestination, logFile)\n\t\tif err != nil {\n\t\t\terrStr += fmt.Sprintf(\"unable to copy file: %v\\n\", err)\n\t\t}\n\t\tif err = os.RemoveAll(baseLogDir); err != nil {\n\t\t\terrStr += fmt.Sprintf(\n\t\t\t\t\"cannot remove dir %s: %v\\n\", baseLogDir, err,\n\t\t\t)\n\t\t}\n\t\tif err := os.RemoveAll(tempBitcoindDir); err != nil {\n\t\t\terrStr += fmt.Sprintf(\n\t\t\t\t\"cannot remove dir %s: %v\\n\",\n\t\t\t\ttempBitcoindDir, err,\n\t\t\t)\n\t\t}\n\t\tif errStr != \"\" {\n\t\t\treturn errors.New(errStr)\n\t\t}\n\t\treturn nil\n\t}\n\n\t// Allow process to start.\n\ttime.Sleep(1 * time.Second)\n\n\trpcHost := fmt.Sprintf(\"127.0.0.1:%d\", rpcPort)\n\trpcUser := \"weks\"\n\trpcPass := \"weks\"\n\n\trpcCfg := rpcclient.ConnConfig{\n\t\tHost:                 rpcHost,\n\t\tUser:                 rpcUser,\n\t\tPass:                 rpcPass,\n\t\tDisableConnectOnNew:  true,\n\t\tDisableAutoReconnect: false,\n\t\tDisableTLS:           true,\n\t\tHTTPPostMode:         true,\n\t}\n\n\tclient, err := rpcclient.New(&rpcCfg, nil)\n\tif err != nil {\n\t\t_ = cleanUp()\n\t\treturn nil, nil, fmt.Errorf(\"unable to create rpc client: %v\",\n\t\t\terr)\n\t}\n\n\tbd := BitcoindBackendConfig{\n\t\trpcHost:      rpcHost,\n\t\trpcUser:      rpcUser,\n\t\trpcPass:      rpcPass,\n\t\tzmqBlockPath: zmqBlockAddr,\n\t\tzmqTxPath:    zmqTxAddr,\n\t\tp2pPort:      p2pPort,\n\t\trpcClient:    client,\n\t\tminerAddr:    miner,\n\t\trpcPolling:   rpcPolling,\n\t}\n\n\treturn &bd, cleanUp, nil\n}\n",
      "length": 3109,
      "tokens": 362,
      "embedding": []
    }
  ]
}