{
  "filepath": "../implementations/go/lnd/lntest/mock/secretkeyring.go",
  "package": "mock",
  "sections": [
    {
      "slug": "type SecretKeyRing struct {",
      "content": "type SecretKeyRing struct {\n\tRootKey *btcec.PrivateKey\n}\n\n// DeriveNextKey currently returns dummy values.",
      "length": 75,
      "tokens": 9,
      "embedding": []
    },
    {
      "slug": "func (s *SecretKeyRing) DeriveNextKey(",
      "content": "func (s *SecretKeyRing) DeriveNextKey(\n\t_ keychain.KeyFamily) (keychain.KeyDescriptor, error) {\n\n\treturn keychain.KeyDescriptor{\n\t\tPubKey: s.RootKey.PubKey(),\n\t}, nil\n}\n\n// DeriveKey currently returns dummy values.",
      "length": 168,
      "tokens": 18,
      "embedding": []
    },
    {
      "slug": "func (s *SecretKeyRing) DeriveKey(",
      "content": "func (s *SecretKeyRing) DeriveKey(\n\t_ keychain.KeyLocator) (keychain.KeyDescriptor, error) {\n\n\treturn keychain.KeyDescriptor{\n\t\tPubKey: s.RootKey.PubKey(),\n\t}, nil\n}\n\n// DerivePrivKey currently returns dummy values.",
      "length": 173,
      "tokens": 18,
      "embedding": []
    },
    {
      "slug": "func (s *SecretKeyRing) DerivePrivKey(",
      "content": "func (s *SecretKeyRing) DerivePrivKey(\n\t_ keychain.KeyDescriptor) (*btcec.PrivateKey, error) {\n\n\treturn s.RootKey, nil\n}\n\n// ECDH currently returns dummy values.",
      "length": 117,
      "tokens": 15,
      "embedding": []
    },
    {
      "slug": "func (s *SecretKeyRing) ECDH(_ keychain.KeyDescriptor,",
      "content": "func (s *SecretKeyRing) ECDH(_ keychain.KeyDescriptor,\n\t_ *btcec.PublicKey) ([32]byte, error) {\n\n\treturn [32]byte{}, nil\n}\n\n// SignMessage signs the passed message and ignores the KeyDescriptor.",
      "length": 134,
      "tokens": 19,
      "embedding": []
    },
    {
      "slug": "func (s *SecretKeyRing) SignMessage(_ keychain.KeyLocator,",
      "content": "func (s *SecretKeyRing) SignMessage(_ keychain.KeyLocator,\n\tmsg []byte, doubleHash bool) (*ecdsa.Signature, error) {\n\n\tvar digest []byte\n\tif doubleHash {\n\t\tdigest = chainhash.DoubleHashB(msg)\n\t} else {\n\t\tdigest = chainhash.HashB(msg)\n\t}\n\treturn ecdsa.Sign(s.RootKey, digest), nil\n}\n\n// SignMessageCompact signs the passed message.",
      "length": 260,
      "tokens": 34,
      "embedding": []
    },
    {
      "slug": "func (s *SecretKeyRing) SignMessageCompact(_ keychain.KeyLocator,",
      "content": "func (s *SecretKeyRing) SignMessageCompact(_ keychain.KeyLocator,\n\tmsg []byte, doubleHash bool) ([]byte, error) {\n\n\tvar digest []byte\n\tif doubleHash {\n\t\tdigest = chainhash.DoubleHashB(msg)\n\t} else {\n\t\tdigest = chainhash.HashB(msg)\n\t}\n\treturn ecdsa.SignCompact(s.RootKey, digest, true)\n}\n\n// SignMessageSchnorr signs the passed message and ignores the KeyDescriptor.",
      "length": 288,
      "tokens": 38,
      "embedding": []
    },
    {
      "slug": "func (s *SecretKeyRing) SignMessageSchnorr(_ keychain.KeyLocator,",
      "content": "func (s *SecretKeyRing) SignMessageSchnorr(_ keychain.KeyLocator,\n\tmsg []byte, doubleHash bool, taprootTweak []byte) (*schnorr.Signature,\n\terror) {\n\n\tvar digest []byte\n\tif doubleHash {\n\t\tdigest = chainhash.DoubleHashB(msg)\n\t} else {\n\t\tdigest = chainhash.HashB(msg)\n\t}\n\n\tprivKey := s.RootKey\n\tif len(taprootTweak) > 0 {\n\t\tprivKey = txscript.TweakTaprootPrivKey(*privKey, taprootTweak)\n\t}\n\n\treturn schnorr.Sign(privKey, digest)\n}\n",
      "length": 345,
      "tokens": 42,
      "embedding": []
    }
  ]
}