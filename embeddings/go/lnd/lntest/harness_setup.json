{
  "filepath": "../implementations/go/lnd/lntest/harness_setup.go",
  "package": "lntest",
  "sections": [
    {
      "slug": "func SetupHarness(t *testing.T, binaryPath, dbBackendName string,",
      "content": "func SetupHarness(t *testing.T, binaryPath, dbBackendName string,\n\tfeeService WebFeeService) *HarnessTest {\n\n\tt.Log(\"Setting up HarnessTest...\")\n\n\t// Parse testing flags that influence our test execution.\n\tlogDir := node.GetLogDir()\n\trequire.NoError(t, os.MkdirAll(logDir, 0700), \"create log dir failed\")\n\n\t// Parse database backend\n\tdbBackend := prepareDBBackend(t, dbBackendName)\n\n\t// Create a new HarnessTest.\n\tht := NewHarnessTest(t, binaryPath, feeService, dbBackend)\n\n\t// Init the miner.\n\tt.Log(\"Prepare the miner and mine blocks to activate segwit...\")\n\tminer := prepareMiner(ht.runCtx, ht.T)\n\n\t// Start a chain backend.\n\tchainBackend, cleanUp := prepareChainBackend(t, miner.P2PAddress())\n\tht.stopChainBackend = cleanUp\n\n\t// Connect our chainBackend to our miner.\n\tt.Log(\"Connecting the miner with the chain backend...\")\n\trequire.NoError(t, chainBackend.ConnectMiner(), \"connect miner\")\n\n\t// Start the HarnessTest with the chainBackend and miner.\n\tht.Start(chainBackend, miner)\n\n\treturn ht\n}\n\n// prepareMiner creates an instance of the btcd's rpctest.Harness that will act\n// as the miner for all tests. This will be used to fund the wallets of the\n// nodes within the test network and to drive blockchain related events within\n// the network. Revert the default setting of accepting non-standard\n// transactions on simnet to reject them. Transactions on the lightning network\n// should always be standard to get better guarantees of getting included in to\n// blocks.",
      "length": 1371,
      "tokens": 187,
      "embedding": []
    },
    {
      "slug": "func prepareMiner(ctxt context.Context, t *testing.T) *HarnessMiner {",
      "content": "func prepareMiner(ctxt context.Context, t *testing.T) *HarnessMiner {\n\tminer := NewMiner(ctxt, t)\n\n\t// Before we start anything, we want to overwrite some of the\n\t// connection settings to make the tests more robust. We might need to\n\t// restart the miner while there are already blocks present, which will\n\t// take a bit longer than the 1 second the default settings amount to.\n\t// Doubling both values will give us retries up to 4 seconds.\n\tminer.MaxConnRetries = rpctest.DefaultMaxConnectionRetries * 2\n\tminer.ConnectionRetryTimeout = rpctest.DefaultConnectionRetryTimeout * 2\n\n\t// Set up miner and connect chain backend to it.\n\trequire.NoError(t, miner.SetUp(true, 50))\n\trequire.NoError(t, miner.Client.NotifyNewTransactions(false))\n\n\t// Next mine enough blocks in order for segwit and the CSV package\n\t// soft-fork to activate on SimNet.\n\tnumBlocks := harnessNetParams.MinerConfirmationWindow * 2\n\tminer.GenerateBlocks(numBlocks)\n\n\treturn miner\n}\n\n// prepareChainBackend creates a new chain backend.",
      "length": 912,
      "tokens": 127,
      "embedding": []
    },
    {
      "slug": "func prepareChainBackend(t *testing.T,",
      "content": "func prepareChainBackend(t *testing.T,\n\tminerAddr string) (node.BackendConfig, func()) {\n\n\tchainBackend, cleanUp, err := NewBackend(\n\t\tminerAddr, harnessNetParams,\n\t)\n\trequire.NoError(t, err, \"new backend\")\n\n\treturn chainBackend, func() {\n\t\trequire.NoError(t, cleanUp(), \"cleanup\")\n\t}\n}\n\n// prepareDBBackend parses a DatabaseBackend based on the name given.",
      "length": 306,
      "tokens": 36,
      "embedding": []
    },
    {
      "slug": "func prepareDBBackend(t *testing.T,",
      "content": "func prepareDBBackend(t *testing.T,\n\tdbBackendName string) node.DatabaseBackend {\n\n\tvar dbBackend node.DatabaseBackend\n\tswitch dbBackendName {\n\tcase \"bbolt\":\n\t\tdbBackend = node.BackendBbolt\n\n\tcase \"etcd\":\n\t\tdbBackend = node.BackendEtcd\n\n\tcase \"postgres\":\n\t\tdbBackend = node.BackendPostgres\n\n\tcase \"sqlite\":\n\t\tdbBackend = node.BackendSqlite\n\n\tdefault:\n\t\trequire.Fail(t, \"unknown db backend\")\n\t}\n\n\treturn dbBackend\n}\n",
      "length": 357,
      "tokens": 39,
      "embedding": []
    }
  ]
}