{
  "filepath": "../implementations/go/lnd/lntest/rpc/harness_rpc.go",
  "package": "rpc",
  "sections": [
    {
      "slug": "type HarnessRPC struct {",
      "content": "type HarnessRPC struct {\n\t*testing.T\n\n\tLN               lnrpc.LightningClient\n\tWalletUnlocker   lnrpc.WalletUnlockerClient\n\tInvoice          invoicesrpc.InvoicesClient\n\tSigner           signrpc.SignerClient\n\tRouter           routerrpc.RouterClient\n\tWalletKit        walletrpc.WalletKitClient\n\tWatchtower       watchtowerrpc.WatchtowerClient\n\tWatchtowerClient wtclientrpc.WatchtowerClientClient\n\tState            lnrpc.StateClient\n\tChainClient      chainrpc.ChainNotifierClient\n\tChainKit         chainrpc.ChainKitClient\n\tNeutrinoKit      neutrinorpc.NeutrinoKitClient\n\tPeer             peersrpc.PeersClient\n\n\t// Name is the HarnessNode's name.\n\tName string\n\n\t// runCtx is a context with cancel method. It's used to signal when the\n\t// node needs to quit, and used as the parent context when spawning\n\t// children contexts for RPC requests.\n\trunCtx context.Context //nolint:containedctx\n\tcancel context.CancelFunc\n}\n\n// NewHarnessRPC creates a new HarnessRPC with its own context inherted from\n// the pass context.",
      "length": 960,
      "tokens": 90,
      "embedding": []
    },
    {
      "slug": "func NewHarnessRPC(ctxt context.Context, t *testing.T, c *grpc.ClientConn,",
      "content": "func NewHarnessRPC(ctxt context.Context, t *testing.T, c *grpc.ClientConn,\n\tname string) *HarnessRPC {\n\n\th := &HarnessRPC{\n\t\tT:                t,\n\t\tLN:               lnrpc.NewLightningClient(c),\n\t\tInvoice:          invoicesrpc.NewInvoicesClient(c),\n\t\tRouter:           routerrpc.NewRouterClient(c),\n\t\tWalletKit:        walletrpc.NewWalletKitClient(c),\n\t\tWalletUnlocker:   lnrpc.NewWalletUnlockerClient(c),\n\t\tWatchtower:       watchtowerrpc.NewWatchtowerClient(c),\n\t\tWatchtowerClient: wtclientrpc.NewWatchtowerClientClient(c),\n\t\tSigner:           signrpc.NewSignerClient(c),\n\t\tState:            lnrpc.NewStateClient(c),\n\t\tChainClient:      chainrpc.NewChainNotifierClient(c),\n\t\tChainKit:         chainrpc.NewChainKitClient(c),\n\t\tNeutrinoKit:      neutrinorpc.NewNeutrinoKitClient(c),\n\t\tPeer:             peersrpc.NewPeersClient(c),\n\t\tName:             name,\n\t}\n\n\t// Inherit parent context.\n\th.runCtx, h.cancel = context.WithCancel(ctxt)\n\treturn h\n}\n\n// MakeOutpoint returns the outpoint of the channel's funding transaction.",
      "length": 923,
      "tokens": 59,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) MakeOutpoint(cp *lnrpc.ChannelPoint) wire.OutPoint {",
      "content": "func (h *HarnessRPC) MakeOutpoint(cp *lnrpc.ChannelPoint) wire.OutPoint {\n\tfundingTxID, err := lnrpc.GetChanPointFundingTxid(cp)\n\trequire.NoErrorf(h, err, \"failed to make chanPoint\", h.Name)\n\n\treturn wire.OutPoint{\n\t\tHash:  *fundingTxID,\n\t\tIndex: cp.OutputIndex,\n\t}\n}\n\n// NoError is a helper method to format the error message used in calling RPCs.",
      "length": 265,
      "tokens": 34,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) NoError(err error, operation string) {",
      "content": "func (h *HarnessRPC) NoError(err error, operation string) {\n\trequire.NoErrorf(h, err, \"%s: failed to call %s\", h.Name, operation)\n}\n",
      "length": 70,
      "tokens": 10,
      "embedding": []
    }
  ]
}