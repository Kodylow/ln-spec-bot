{
  "filepath": "../implementations/go/lnd/lntest/rpc/router.go",
  "package": "rpc",
  "sections": [
    {
      "slug": "func (h *HarnessRPC) UpdateChanStatus(",
      "content": "func (h *HarnessRPC) UpdateChanStatus(\n\treq *routerrpc.UpdateChanStatusRequest) *routerrpc.UpdateChanStatusResponse {\n\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\tresp, err := h.Router.UpdateChanStatus(ctxt, req)\n\th.NoError(err, \"UpdateChanStatus\")\n\n\treturn resp\n}\n",
      "length": 253,
      "tokens": 21,
      "embedding": []
    },
    {
      "slug": "type PaymentClient routerrpc.Router_SendPaymentV2Client",
      "content": "type PaymentClient routerrpc.Router_SendPaymentV2Client\n\n// SendPayment sends a payment using the given node and payment request. It\n// also asserts the payment being sent successfully.",
      "length": 127,
      "tokens": 21,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) SendPayment(",
      "content": "func (h *HarnessRPC) SendPayment(\n\treq *routerrpc.SendPaymentRequest) PaymentClient {\n\n\t// SendPayment needs to have the context alive for the entire test case\n\t// as the router relies on the context to propagate HTLCs. Thus we use\n\t// runCtx here instead of a timeout context.\n\tstream, err := h.Router.SendPaymentV2(h.runCtx, req)\n\th.NoError(err, \"SendPaymentV2\")\n\n\treturn stream\n}\n",
      "length": 339,
      "tokens": 49,
      "embedding": []
    },
    {
      "slug": "type HtlcEventsClient routerrpc.Router_SubscribeHtlcEventsClient",
      "content": "type HtlcEventsClient routerrpc.Router_SubscribeHtlcEventsClient\n\n// SubscribeHtlcEvents makes a subscription to the HTLC events and returns a\n// htlc event client.",
      "length": 97,
      "tokens": 16,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) SubscribeHtlcEvents() HtlcEventsClient {",
      "content": "func (h *HarnessRPC) SubscribeHtlcEvents() HtlcEventsClient {\n\t// Use runCtx here to keep the client alive for the scope of the test.\n\tclient, err := h.Router.SubscribeHtlcEvents(\n\t\th.runCtx, &routerrpc.SubscribeHtlcEventsRequest{},\n\t)\n\th.NoError(err, \"SubscribeHtlcEvents\")\n\n\treturn client\n}\n\n// GetMissionControlConfig makes a RPC call to the node's\n// GetMissionControlConfig and asserts.\n//\n//nolint:lll",
      "length": 333,
      "tokens": 42,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) GetMissionControlConfig() *routerrpc.GetMissionControlConfigResponse {",
      "content": "func (h *HarnessRPC) GetMissionControlConfig() *routerrpc.GetMissionControlConfigResponse {\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\treq := &routerrpc.GetMissionControlConfigRequest{}\n\tresp, err := h.Router.GetMissionControlConfig(ctxt, req)\n\th.NoError(err, \"GetMissionControlConfig\")\n\n\treturn resp\n}\n\n// SetMissionControlConfig makes a RPC call to the node's\n// SetMissionControlConfig and asserts.",
      "length": 336,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) SetMissionControlConfig(",
      "content": "func (h *HarnessRPC) SetMissionControlConfig(\n\tconfig *routerrpc.MissionControlConfig) {\n\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\treq := &routerrpc.SetMissionControlConfigRequest{Config: config}\n\t_, err := h.Router.SetMissionControlConfig(ctxt, req)\n\th.NoError(err, \"SetMissionControlConfig\")\n}\n\n// SetMissionControlConfigAssertErr makes a RPC call to the node's\n// SetMissionControlConfig and asserts that we error.",
      "length": 400,
      "tokens": 38,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) SetMissionControlConfigAssertErr(",
      "content": "func (h *HarnessRPC) SetMissionControlConfigAssertErr(\n\tconfig *routerrpc.MissionControlConfig) {\n\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\treq := &routerrpc.SetMissionControlConfigRequest{Config: config}\n\t_, err := h.Router.SetMissionControlConfig(ctxt, req)\n\trequire.Error(h, err, \"expect an error from setting import mission \"+\n\t\t\"control\")\n}\n\n// ResetMissionControl makes a RPC call to the node's ResetMissionControl and\n// asserts.",
      "length": 409,
      "tokens": 44,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) ResetMissionControl() {",
      "content": "func (h *HarnessRPC) ResetMissionControl() {\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\treq := &routerrpc.ResetMissionControlRequest{}\n\t_, err := h.Router.ResetMissionControl(ctxt, req)\n\th.NoError(err, \"ResetMissionControl\")\n}\n\n// SendToRouteV2 makes a RPC call to SendToRouteV2 and asserts.",
      "length": 276,
      "tokens": 28,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) SendToRouteV2(",
      "content": "func (h *HarnessRPC) SendToRouteV2(\n\treq *routerrpc.SendToRouteRequest) *lnrpc.HTLCAttempt {\n\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\tresp, err := h.Router.SendToRouteV2(ctxt, req)\n\th.NoError(err, \"SendToRouteV2\")\n\n\treturn resp\n}\n\n// QueryProbability makes a RPC call to the node's QueryProbability and\n// asserts.\n//\n//nolint:lll",
      "length": 321,
      "tokens": 36,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) QueryProbability(",
      "content": "func (h *HarnessRPC) QueryProbability(\n\treq *routerrpc.QueryProbabilityRequest) *routerrpc.QueryProbabilityResponse {\n\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\tresp, err := h.Router.QueryProbability(ctxt, req)\n\th.NoError(err, \"QueryProbability\")\n\n\treturn resp\n}\n\n// XImportMissionControl makes a RPC call to the node's XImportMissionControl\n// and asserts.",
      "length": 345,
      "tokens": 34,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) XImportMissionControl(",
      "content": "func (h *HarnessRPC) XImportMissionControl(\n\treq *routerrpc.XImportMissionControlRequest) {\n\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\t_, err := h.Router.XImportMissionControl(ctxt, req)\n\th.NoError(err, \"XImportMissionControl\")\n}\n\n// XImportMissionControlAssertErr makes a RPC call to the node's\n// XImportMissionControl\n// and asserts an error occurred.",
      "length": 338,
      "tokens": 35,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) XImportMissionControlAssertErr(",
      "content": "func (h *HarnessRPC) XImportMissionControlAssertErr(\n\treq *routerrpc.XImportMissionControlRequest) {\n\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\t_, err := h.Router.XImportMissionControl(ctxt, req)\n\trequire.Error(h, err, \"expect an error from x import mission control\")\n}\n\n// BuildRoute makes a RPC call to the node's RouterClient and asserts.",
      "length": 318,
      "tokens": 38,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) BuildRoute(",
      "content": "func (h *HarnessRPC) BuildRoute(\n\treq *routerrpc.BuildRouteRequest) *routerrpc.BuildRouteResponse {\n\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\tresp, err := h.Router.BuildRoute(ctxt, req)\n\th.NoError(err, \"BuildRoute\")\n\n\treturn resp\n}\n",
      "length": 229,
      "tokens": 21,
      "embedding": []
    },
    {
      "slug": "type InterceptorClient routerrpc.Router_HtlcInterceptorClient",
      "content": "type InterceptorClient routerrpc.Router_HtlcInterceptorClient\n\n// HtlcInterceptor makes a RPC call to the node's RouterClient and asserts.",
      "length": 75,
      "tokens": 12,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) HtlcInterceptor() (InterceptorClient, context.CancelFunc) {",
      "content": "func (h *HarnessRPC) HtlcInterceptor() (InterceptorClient, context.CancelFunc) {\n\t// HtlcInterceptor needs to have the context alive for the entire test\n\t// case as the returned client will be used for send and receive events\n\t// stream. Thus we use cancel context here instead of a timeout\n\t// context.\n\tctxt, cancel := context.WithCancel(h.runCtx)\n\tresp, err := h.Router.HtlcInterceptor(ctxt)\n\th.NoError(err, \"HtlcInterceptor\")\n\n\treturn resp, cancel\n}\n",
      "length": 363,
      "tokens": 54,
      "embedding": []
    },
    {
      "slug": "type TrackPaymentsClient routerrpc.Router_TrackPaymentsClient",
      "content": "type TrackPaymentsClient routerrpc.Router_TrackPaymentsClient\n\n// TrackPayments makes a RPC call to the node's RouterClient and asserts.",
      "length": 73,
      "tokens": 12,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) TrackPayments(",
      "content": "func (h *HarnessRPC) TrackPayments(\n\treq *routerrpc.TrackPaymentsRequest) TrackPaymentsClient {\n\n\tresp, err := h.Router.TrackPayments(h.runCtx, req)\n\th.NoError(err, \"TrackPayments\")\n\n\treturn resp\n}\n",
      "length": 155,
      "tokens": 14,
      "embedding": []
    }
  ]
}