{
  "filepath": "../implementations/go/lnd/lntest/rpc/invoices.go",
  "package": "rpc",
  "sections": [
    {
      "slug": "func (h *HarnessRPC) LookupInvoiceV2(",
      "content": "func (h *HarnessRPC) LookupInvoiceV2(\n\treq *invoicesrpc.LookupInvoiceMsg) *lnrpc.Invoice {\n\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\tresp, err := h.Invoice.LookupInvoiceV2(ctxt, req)\n\th.NoError(err, \"LookupInvoiceV2\")\n\n\treturn resp\n}\n\n// AddHoldInvoice adds a hold invoice for the given node and asserts.",
      "length": 295,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) AddHoldInvoice(",
      "content": "func (h *HarnessRPC) AddHoldInvoice(\n\tr *invoicesrpc.AddHoldInvoiceRequest) *invoicesrpc.AddHoldInvoiceResp {\n\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\tinvoice, err := h.Invoice.AddHoldInvoice(ctxt, r)\n\th.NoError(err, \"AddHoldInvoice\")\n\n\treturn invoice\n}\n\n// SettleInvoice settles a given invoice and asserts.",
      "length": 301,
      "tokens": 29,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) SettleInvoice(",
      "content": "func (h *HarnessRPC) SettleInvoice(\n\tpreimage []byte) *invoicesrpc.SettleInvoiceResp {\n\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\treq := &invoicesrpc.SettleInvoiceMsg{Preimage: preimage}\n\tresp, err := h.Invoice.SettleInvoice(ctxt, req)\n\th.NoError(err, \"SettleInvoice\")\n\n\treturn resp\n}\n\n// CancelInvoice cancels a given invoice and asserts.",
      "length": 330,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) CancelInvoice(",
      "content": "func (h *HarnessRPC) CancelInvoice(\n\tpayHash []byte) *invoicesrpc.CancelInvoiceResp {\n\n\tctxt, cancel := context.WithTimeout(h.runCtx, DefaultTimeout)\n\tdefer cancel()\n\n\treq := &invoicesrpc.CancelInvoiceMsg{PaymentHash: payHash}\n\tresp, err := h.Invoice.CancelInvoice(ctxt, req)\n\th.NoError(err, \"CancelInvoice\")\n\n\treturn resp\n}\n",
      "length": 278,
      "tokens": 25,
      "embedding": []
    },
    {
      "slug": "type SingleInvoiceClient invoicesrpc.Invoices_SubscribeSingleInvoiceClient",
      "content": "type SingleInvoiceClient invoicesrpc.Invoices_SubscribeSingleInvoiceClient\n\n// SubscribeSingleInvoice creates a subscription client for given invoice and\n// asserts its creation.",
      "length": 101,
      "tokens": 14,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) SubscribeSingleInvoice(rHash []byte) SingleInvoiceClient {",
      "content": "func (h *HarnessRPC) SubscribeSingleInvoice(rHash []byte) SingleInvoiceClient {\n\treq := &invoicesrpc.SubscribeSingleInvoiceRequest{RHash: rHash}\n\n\t// SubscribeSingleInvoice needs to have the context alive for the\n\t// entire test case as the returned client will be used for send and\n\t// receive events stream. Thus we use runCtx here instead of a timeout\n\t// context.\n\tclient, err := h.Invoice.SubscribeSingleInvoice(h.runCtx, req)\n\th.NoError(err, \"SubscribeSingleInvoice\")\n\n\treturn client\n}\n",
      "length": 401,
      "tokens": 53,
      "embedding": []
    },
    {
      "slug": "type TrackPaymentClient routerrpc.Router_TrackPaymentV2Client",
      "content": "type TrackPaymentClient routerrpc.Router_TrackPaymentV2Client\n\n// TrackPaymentV2 creates a subscription client for given invoice and\n// asserts its creation.",
      "length": 93,
      "tokens": 14,
      "embedding": []
    },
    {
      "slug": "func (h *HarnessRPC) TrackPaymentV2(payHash []byte) TrackPaymentClient {",
      "content": "func (h *HarnessRPC) TrackPaymentV2(payHash []byte) TrackPaymentClient {\n\treq := &routerrpc.TrackPaymentRequest{PaymentHash: payHash}\n\n\t// TrackPaymentV2 needs to have the context alive for the entire test\n\t// case as the returned client will be used for send and receive events\n\t// stream. Thus we use runCtx here instead of a timeout context.\n\tclient, err := h.Router.TrackPaymentV2(h.runCtx, req)\n\th.NoError(err, \"TrackPaymentV2\")\n\n\treturn client\n}\n",
      "length": 369,
      "tokens": 52,
      "embedding": []
    }
  ]
}