{
  "filepath": "../implementations/go/lnd/kvdb/postgres_test.go",
  "package": "kvdb",
  "sections": [
    {
      "slug": "//go:build kvdb_postgres",
      "content": "//go:build kvdb_postgres\n// +build kvdb_postgres\n\npackage kvdb\n\nimport (\n\t\"testing\"\n\n\t\"github.com/btcsuite/btcwallet/walletdb\"\n\t\"github.com/lightningnetwork/lnd/kvdb/postgres\"\n\t\"github.com/stretchr/testify/require\"\n)\n",
      "length": 181,
      "tokens": 12,
      "embedding": []
    },
    {
      "slug": "type m = map[string]interface{}",
      "content": "type m = map[string]interface{}\n",
      "length": 0,
      "tokens": 0,
      "embedding": []
    },
    {
      "slug": "func TestPostgres(t *testing.T) {",
      "content": "func TestPostgres(t *testing.T) {\n\tstop, err := postgres.StartEmbeddedPostgres()\n\trequire.NoError(t, err)\n\tdefer stop()\n\n\ttests := []struct {\n\t\tname       string\n\t\ttest       func(*testing.T, walletdb.DB)\n\t\texpectedDb m\n\t}{\n\t\t{\n\t\t\tname: \"read cursor empty interval\",\n\t\t\ttest: testReadCursorEmptyInterval,\n\t\t},\n\t\t{\n\t\t\tname: \"read cursor non empty interval\",\n\t\t\ttest: testReadCursorNonEmptyInterval,\n\t\t},\n\t\t{\n\t\t\tname: \"read write cursor\",\n\t\t\ttest: testReadWriteCursor,\n\t\t\texpectedDb: m{\n\t\t\t\t\"test_kv\": []m{\n\t\t\t\t\t{\"id\": int64(1), \"key\": \"apple\", \"parent_id\": nil, \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(4), \"key\": \"da\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"3\"},\n\t\t\t\t\t{\"id\": int64(6), \"key\": \"a\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"0\"},\n\t\t\t\t\t{\"id\": int64(7), \"key\": \"f\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"5\"},\n\t\t\t\t\t{\"id\": int64(3), \"key\": \"c\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"3\"},\n\t\t\t\t\t{\"id\": int64(9), \"key\": \"cx\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"x\"},\n\t\t\t\t\t{\"id\": int64(10), \"key\": \"cy\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"y\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"read write cursor with bucket and value\",\n\t\t\ttest: testReadWriteCursorWithBucketAndValue,\n\t\t\texpectedDb: m{\n\t\t\t\t\"test_kv\": []m{\n\t\t\t\t\t{\"id\": int64(1), \"key\": \"apple\", \"parent_id\": nil, \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(2), \"key\": \"key\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"val\"},\n\t\t\t\t\t{\"id\": int64(3), \"key\": \"banana\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(4), \"key\": \"pear\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": nil},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket creation\",\n\t\t\ttest: testBucketCreation,\n\t\t\texpectedDb: m{\n\t\t\t\t\"test_kv\": []m{\n\t\t\t\t\t{\"id\": int64(1), \"key\": \"apple\", \"parent_id\": nil, \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(2), \"key\": \"banana\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(3), \"key\": \"mango\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(4), \"key\": \"pear\", \"parent_id\": int64(2), \"sequence\": nil, \"value\": nil},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket deletion\",\n\t\t\ttest: testBucketDeletion,\n\t\t\texpectedDb: m{\n\t\t\t\t\"test_kv\": []m{\n\t\t\t\t\t{\"id\": int64(1), \"key\": \"apple\", \"parent_id\": nil, \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(2), \"key\": \"banana\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(3), \"key\": \"key1\", \"parent_id\": int64(2), \"sequence\": nil, \"value\": \"val1\"},\n\t\t\t\t\t{\"id\": int64(5), \"key\": \"key3\", \"parent_id\": int64(2), \"sequence\": nil, \"value\": \"val3\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket for each\",\n\t\t\ttest: func(t *testing.T, db walletdb.DB) {\n\t\t\t\ttestBucketIterator(t, db, func(bucket walletdb.ReadWriteBucket,\n\t\t\t\t\tcallback func(key, val []byte) error) error {\n\n\t\t\t\t\treturn bucket.ForEach(callback)\n\t\t\t\t})\n\t\t\t},\n\t\t\texpectedDb: m{\n\t\t\t\t\"test_kv\": []m{\n\t\t\t\t\t{\"id\": int64(1), \"key\": \"apple\", \"parent_id\": nil, \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(2), \"key\": \"banana\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(3), \"key\": \"key1\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"val1\"},\n\t\t\t\t\t{\"id\": int64(4), \"key\": \"key1\", \"parent_id\": int64(2), \"sequence\": nil, \"value\": \"val1\"},\n\t\t\t\t\t{\"id\": int64(5), \"key\": \"key2\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"val2\"},\n\t\t\t\t\t{\"id\": int64(6), \"key\": \"key2\", \"parent_id\": int64(2), \"sequence\": nil, \"value\": \"val2\"},\n\t\t\t\t\t{\"id\": int64(7), \"key\": \"key3\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"val3\"},\n\t\t\t\t\t{\"id\": int64(8), \"key\": \"key3\", \"parent_id\": int64(2), \"sequence\": nil, \"value\": \"val3\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket for all\",\n\t\t\ttest: func(t *testing.T, db walletdb.DB) {\n\t\t\t\ttestBucketIterator(t, db, func(bucket walletdb.ReadWriteBucket,\n\t\t\t\t\tcallback func(key, val []byte) error) error {\n\n\t\t\t\t\treturn ForAll(bucket, callback)\n\t\t\t\t})\n\t\t\t},\n\t\t\texpectedDb: m{\n\t\t\t\t\"test_kv\": []m{\n\t\t\t\t\t{\"id\": int64(1), \"key\": \"apple\", \"parent_id\": nil, \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(2), \"key\": \"banana\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(3), \"key\": \"key1\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"val1\"},\n\t\t\t\t\t{\"id\": int64(4), \"key\": \"key1\", \"parent_id\": int64(2), \"sequence\": nil, \"value\": \"val1\"},\n\t\t\t\t\t{\"id\": int64(5), \"key\": \"key2\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"val2\"},\n\t\t\t\t\t{\"id\": int64(6), \"key\": \"key2\", \"parent_id\": int64(2), \"sequence\": nil, \"value\": \"val2\"},\n\t\t\t\t\t{\"id\": int64(7), \"key\": \"key3\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"val3\"},\n\t\t\t\t\t{\"id\": int64(8), \"key\": \"key3\", \"parent_id\": int64(2), \"sequence\": nil, \"value\": \"val3\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket for each with error\",\n\t\t\ttest: testBucketForEachWithError,\n\t\t\texpectedDb: m{\n\t\t\t\t\"test_kv\": []m{\n\t\t\t\t\t{\"id\": int64(1), \"key\": \"apple\", \"parent_id\": nil, \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(2), \"key\": \"banana\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(3), \"key\": \"pear\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(4), \"key\": \"key1\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"val1\"},\n\t\t\t\t\t{\"id\": int64(5), \"key\": \"key2\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"val2\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket sequence\",\n\t\t\ttest: testBucketSequence,\n\t\t\texpectedDb: m{\n\t\t\t\t\"test_kv\": []m{\n\t\t\t\t\t{\"id\": int64(2), \"key\": \"banana\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(1), \"key\": \"apple\", \"parent_id\": nil, \"sequence\": int64(4), \"value\": nil},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"key clash\",\n\t\t\ttest: testKeyClash,\n\t\t\texpectedDb: m{\n\t\t\t\t\"test_kv\": []m{\n\t\t\t\t\t{\"id\": int64(1), \"key\": \"apple\", \"parent_id\": nil, \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(2), \"key\": \"key\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"val\"},\n\t\t\t\t\t{\"id\": int64(3), \"key\": \"banana\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": nil},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket create delete\",\n\t\t\ttest: testBucketCreateDelete,\n\t\t\texpectedDb: m{\n\t\t\t\t\"test_kv\": []m{\n\t\t\t\t\t{\"id\": int64(1), \"key\": \"apple\", \"parent_id\": nil, \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(3), \"key\": \"banana\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"value\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"tx manual commit\",\n\t\t\ttest: testTxManualCommit,\n\t\t\texpectedDb: m{\n\t\t\t\t\"test_kv\": []m{\n\t\t\t\t\t{\"id\": int64(1), \"key\": \"apple\", \"parent_id\": nil, \"sequence\": nil, \"value\": nil},\n\t\t\t\t\t{\"id\": int64(2), \"key\": \"testKey\", \"parent_id\": int64(1), \"sequence\": nil, \"value\": \"testVal\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"tx rollback\",\n\t\t\ttest: testTxRollback,\n\t\t\texpectedDb: m{\n\t\t\t\t\"test_kv\": []m(nil),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"top level bucket creation\",\n\t\t\ttest: testTopLevelBucketCreation,\n\t\t},\n\t\t{\n\t\t\tname: \"bucket operation\",\n\t\t\ttest: testBucketOperations,\n\t\t},\n\t\t{\n\t\t\tname: \"sub bucket sequence\",\n\t\t\ttest: testSubBucketSequence,\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\tf, err := postgres.NewFixture(\"\")\n\t\t\trequire.NoError(t, err)\n\n\t\t\ttest.test(t, f.Db)\n\n\t\t\tif test.expectedDb != nil {\n\t\t\t\tdump, err := f.Dump()\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.Equal(t, test.expectedDb, dump)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "length": 7066,
      "tokens": 798,
      "embedding": []
    }
  ]
}