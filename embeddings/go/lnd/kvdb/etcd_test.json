{
  "filepath": "../implementations/go/lnd/kvdb/etcd_test.go",
  "package": "kvdb",
  "sections": [
    {
      "slug": "//go:build kvdb_etcd",
      "content": "//go:build kvdb_etcd\n// +build kvdb_etcd\n\npackage kvdb\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/btcsuite/btcwallet/walletdb\"\n\t\"github.com/lightningnetwork/lnd/kvdb/etcd\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nvar (\n\tbkey = etcd.BucketKey\n\tbval = etcd.BucketVal\n\tvkey = etcd.ValueKey\n)\n",
      "length": 250,
      "tokens": 25,
      "embedding": []
    },
    {
      "slug": "func TestEtcd(t *testing.T) {",
      "content": "func TestEtcd(t *testing.T) {\n\ttests := []struct {\n\t\tname       string\n\t\tdebugOnly  bool\n\t\ttest       func(*testing.T, walletdb.DB)\n\t\texpectedDb map[string]string\n\t}{\n\t\t{\n\t\t\tname: \"read cursor empty interval\",\n\t\t\ttest: testReadCursorEmptyInterval,\n\t\t},\n\t\t{\n\t\t\tname: \"read cursor non empty interval\",\n\t\t\ttest: testReadCursorNonEmptyInterval,\n\t\t},\n\t\t{\n\t\t\tname: \"read write cursor\",\n\t\t\ttest: testReadWriteCursor,\n\t\t\texpectedDb: map[string]string{\n\t\t\t\tbkey(\"apple\"):       bval(\"apple\"),\n\t\t\t\tvkey(\"a\", \"apple\"):  \"0\",\n\t\t\t\tvkey(\"c\", \"apple\"):  \"3\",\n\t\t\t\tvkey(\"cx\", \"apple\"): \"x\",\n\t\t\t\tvkey(\"cy\", \"apple\"): \"y\",\n\t\t\t\tvkey(\"da\", \"apple\"): \"3\",\n\t\t\t\tvkey(\"f\", \"apple\"):  \"5\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"read write cursor with bucket and value\",\n\t\t\ttest: testReadWriteCursorWithBucketAndValue,\n\t\t\texpectedDb: map[string]string{\n\t\t\t\tbkey(\"apple\"):           bval(\"apple\"),\n\t\t\t\tbkey(\"apple\", \"banana\"): bval(\"apple\", \"banana\"),\n\t\t\t\tbkey(\"apple\", \"pear\"):   bval(\"apple\", \"pear\"),\n\t\t\t\tvkey(\"key\", \"apple\"):    \"val\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket creation\",\n\t\t\ttest: testBucketCreation,\n\t\t\texpectedDb: map[string]string{\n\t\t\t\tbkey(\"apple\"):                   bval(\"apple\"),\n\t\t\t\tbkey(\"apple\", \"banana\"):         bval(\"apple\", \"banana\"),\n\t\t\t\tbkey(\"apple\", \"mango\"):          bval(\"apple\", \"mango\"),\n\t\t\t\tbkey(\"apple\", \"banana\", \"pear\"): bval(\"apple\", \"banana\", \"pear\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket deletion\",\n\t\t\ttest: testBucketDeletion,\n\t\t\texpectedDb: map[string]string{\n\t\t\t\tbkey(\"apple\"):                   bval(\"apple\"),\n\t\t\t\tbkey(\"apple\", \"banana\"):         bval(\"apple\", \"banana\"),\n\t\t\t\tvkey(\"key1\", \"apple\", \"banana\"): \"val1\",\n\t\t\t\tvkey(\"key3\", \"apple\", \"banana\"): \"val3\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket for each\",\n\t\t\ttest: testBucketForEach,\n\t\t\texpectedDb: map[string]string{\n\t\t\t\tbkey(\"apple\"):                   bval(\"apple\"),\n\t\t\t\tbkey(\"apple\", \"banana\"):         bval(\"apple\", \"banana\"),\n\t\t\t\tvkey(\"key1\", \"apple\"):           \"val1\",\n\t\t\t\tvkey(\"key2\", \"apple\"):           \"val2\",\n\t\t\t\tvkey(\"key3\", \"apple\"):           \"val3\",\n\t\t\t\tvkey(\"key1\", \"apple\", \"banana\"): \"val1\",\n\t\t\t\tvkey(\"key2\", \"apple\", \"banana\"): \"val2\",\n\t\t\t\tvkey(\"key3\", \"apple\", \"banana\"): \"val3\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket for each with error\",\n\t\t\ttest: testBucketForEachWithError,\n\t\t\texpectedDb: map[string]string{\n\t\t\t\tbkey(\"apple\"):           bval(\"apple\"),\n\t\t\t\tbkey(\"apple\", \"banana\"): bval(\"apple\", \"banana\"),\n\t\t\t\tbkey(\"apple\", \"pear\"):   bval(\"apple\", \"pear\"),\n\t\t\t\tvkey(\"key1\", \"apple\"):   \"val1\",\n\t\t\t\tvkey(\"key2\", \"apple\"):   \"val2\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket sequence\",\n\t\t\ttest: testBucketSequence,\n\t\t},\n\t\t{\n\t\t\tname:      \"key clash\",\n\t\t\tdebugOnly: true,\n\t\t\ttest:      testKeyClash,\n\t\t\texpectedDb: map[string]string{\n\t\t\t\tbkey(\"apple\"):           bval(\"apple\"),\n\t\t\t\tbkey(\"apple\", \"banana\"): bval(\"apple\", \"banana\"),\n\t\t\t\tvkey(\"key\", \"apple\"):    \"val\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"bucket create delete\",\n\t\t\ttest: testBucketCreateDelete,\n\t\t\texpectedDb: map[string]string{\n\t\t\t\tvkey(\"banana\", \"apple\"): \"value\",\n\t\t\t\tbkey(\"apple\"):           bval(\"apple\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"tx manual commit\",\n\t\t\ttest: testTxManualCommit,\n\t\t\texpectedDb: map[string]string{\n\t\t\t\tbkey(\"apple\"):            bval(\"apple\"),\n\t\t\t\tvkey(\"testKey\", \"apple\"): \"testVal\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:       \"tx rollback\",\n\t\t\ttest:       testTxRollback,\n\t\t\texpectedDb: map[string]string{},\n\t\t},\n\t\t{\n\t\t\tname:       \"prefetch\",\n\t\t\ttest:       testPrefetch,\n\t\t\texpectedDb: map[string]string{},\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\ttest := test\n\n\t\tif test.debugOnly && !etcdDebug {\n\t\t\tcontinue\n\t\t}\n\n\t\trwLock := []bool{false, true}\n\t\tfor _, doRwLock := range rwLock {\n\t\t\tname := fmt.Sprintf(\"%v/RWLock=%v\", test.name, doRwLock)\n\n\t\t\tt.Run(name, func(t *testing.T) {\n\t\t\t\tt.Parallel()\n\n\t\t\t\tf := etcd.NewEtcdTestFixture(t)\n\n\t\t\t\ttest.test(t, f.NewBackend(doRwLock))\n\n\t\t\t\tif test.expectedDb != nil {\n\t\t\t\t\tdump := f.Dump()\n\t\t\t\t\trequire.Equal(t, test.expectedDb, dump)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n}\n",
      "length": 3735,
      "tokens": 346,
      "embedding": []
    }
  ]
}