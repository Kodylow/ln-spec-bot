{
  "filepath": "../implementations/go/lnd/kvdb/sqlbase/db_conn_set.go",
  "package": "sqlbase",
  "sections": [
    {
      "slug": "type dbConn struct {",
      "content": "type dbConn struct {\n\tdb    *sql.DB\n\tcount int\n}\n\n// dbConnSet stores a set of connections.",
      "length": 66,
      "tokens": 12,
      "embedding": []
    },
    {
      "slug": "type dbConnSet struct {",
      "content": "type dbConnSet struct {\n\tdbConn         map[string]*dbConn\n\tmaxConnections int\n\n\t// mu is used to guard access to the dbConn map.\n\tmu sync.Mutex\n}\n\n// newDbConnSet initializes a new set of connections.",
      "length": 170,
      "tokens": 26,
      "embedding": []
    },
    {
      "slug": "func newDbConnSet(maxConnections int) *dbConnSet {",
      "content": "func newDbConnSet(maxConnections int) *dbConnSet {\n\treturn &dbConnSet{\n\t\tdbConn:         make(map[string]*dbConn),\n\t\tmaxConnections: maxConnections,\n\t}\n}\n\n// Open opens a new database connection. If a connection already exists for the\n// given dsn, the existing connection is returned.",
      "length": 227,
      "tokens": 30,
      "embedding": []
    },
    {
      "slug": "func (d *dbConnSet) Open(driver, dsn string) (*sql.DB, error) {",
      "content": "func (d *dbConnSet) Open(driver, dsn string) (*sql.DB, error) {\n\td.mu.Lock()\n\tdefer d.mu.Unlock()\n\n\tif dbConn, ok := d.dbConn[dsn]; ok {\n\t\tdbConn.count++\n\n\t\treturn dbConn.db, nil\n\t}\n\n\tdb, err := sql.Open(driver, dsn)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Limit maximum number of open connections. This is useful to prevent\n\t// the server from running out of connections and returning an error.\n\t// With this client-side limit in place, lnd will wait for a connection\n\t// to become available.\n\tif d.maxConnections != 0 {\n\t\tdb.SetMaxOpenConns(d.maxConnections)\n\t}\n\n\td.dbConn[dsn] = &dbConn{\n\t\tdb:    db,\n\t\tcount: 1,\n\t}\n\n\treturn db, nil\n}\n\n// Close closes the connection with the given dsn. If there are still other\n// users of the same connection, this function does nothing.",
      "length": 683,
      "tokens": 113,
      "embedding": []
    },
    {
      "slug": "func (d *dbConnSet) Close(dsn string) error {",
      "content": "func (d *dbConnSet) Close(dsn string) error {\n\td.mu.Lock()\n\tdefer d.mu.Unlock()\n\n\tdbConn, ok := d.dbConn[dsn]\n\tif !ok {\n\t\treturn fmt.Errorf(\"connection not found: %v\", dsn)\n\t}\n\n\t// Reduce user count.\n\tdbConn.count--\n\n\t// Do not close if there are other users.\n\tif dbConn.count > 0 {\n\t\treturn nil\n\t}\n\n\t// Close connection.\n\tdelete(d.dbConn, dsn)\n\n\treturn dbConn.db.Close()\n}\n",
      "length": 307,
      "tokens": 47,
      "embedding": []
    }
  ]
}