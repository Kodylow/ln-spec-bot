{
  "filepath": "../implementations/go/lnd/channeldb/migration30/test_mock.go",
  "package": "migration30",
  "sections": [
    {
      "slug": "type mockStore struct {",
      "content": "type mockStore struct {\n\tmock.Mock\n}\n\n// A compile time check to ensure mockStore implements the Store interface.\nvar _ shachain.Store = (*mockStore)(nil)\n",
      "length": 126,
      "tokens": 19,
      "embedding": []
    },
    {
      "slug": "func (m *mockStore) LookUp(height uint64) (*chainhash.Hash, error) {",
      "content": "func (m *mockStore) LookUp(height uint64) (*chainhash.Hash, error) {\n\targs := m.Called(height)\n\n\tif args.Get(0) == nil {\n\t\treturn nil, args.Error(1)\n\t}\n\n\treturn args.Get(0).(*chainhash.Hash), args.Error(1)\n}\n",
      "length": 131,
      "tokens": 16,
      "embedding": []
    },
    {
      "slug": "func (m *mockStore) AddNextEntry(preimage *chainhash.Hash) error {",
      "content": "func (m *mockStore) AddNextEntry(preimage *chainhash.Hash) error {\n\targs := m.Called(preimage)\n\n\treturn args.Error(0)\n}\n\n// Encode encodes a series of dummy values to pass the serialize/deserialize\n// process.",
      "length": 136,
      "tokens": 20,
      "embedding": []
    },
    {
      "slug": "func (m *mockStore) Encode(w io.Writer) error {",
      "content": "func (m *mockStore) Encode(w io.Writer) error {\n\terr := binary.Write(w, binary.BigEndian, int8(1))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err := binary.Write(w, binary.BigEndian, uint64(0)); err != nil {\n\t\treturn err\n\t}\n\tif _, err = w.Write(preimage2); err != nil {\n\t\treturn err\n\t}\n\treturn binary.Write(w, binary.BigEndian, uint64(0))\n}\n",
      "length": 275,
      "tokens": 43,
      "embedding": []
    }
  ]
}