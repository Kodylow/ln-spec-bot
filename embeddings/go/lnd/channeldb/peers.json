{
  "filepath": "../implementations/go/lnd/channeldb/peers.go",
  "package": "channeldb",
  "sections": [
    {
      "slug": "type FlapCount struct {",
      "content": "type FlapCount struct {\n\t// Count provides the total flap count for a peer.\n\tCount uint32\n\n\t// LastFlap is the timestamp of the last flap recorded for a peer.\n\tLastFlap time.Time\n}\n\n// WriteFlapCounts writes the flap count for a set of peers to disk, creating a\n// bucket for the peer's pubkey if necessary. Note that this function overwrites\n// the current value.",
      "length": 331,
      "tokens": 60,
      "embedding": []
    },
    {
      "slug": "func (d *DB) WriteFlapCounts(flapCounts map[route.Vertex]*FlapCount) error {",
      "content": "func (d *DB) WriteFlapCounts(flapCounts map[route.Vertex]*FlapCount) error {\n\treturn kvdb.Update(d, func(tx kvdb.RwTx) error {\n\t\t// Run through our set of flap counts and record them for\n\t\t// each peer, creating a bucket for the peer pubkey if required.\n\t\tfor peer, flapCount := range flapCounts {\n\t\t\tpeers := tx.ReadWriteBucket(peersBucket)\n\n\t\t\tpeerBucket, err := peers.CreateBucketIfNotExists(\n\t\t\t\tpeer[:],\n\t\t\t)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tvar b bytes.Buffer\n\t\t\terr = serializeTime(&b, flapCount.LastFlap)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif err = WriteElement(&b, flapCount.Count); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\terr = peerBucket.Put(flapCountKey, b.Bytes())\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\treturn nil\n\t}, func() {})\n}\n\n// ReadFlapCount attempts to read the flap count for a peer, failing if the\n// peer is not found or we do not have flap count stored.",
      "length": 790,
      "tokens": 127,
      "embedding": []
    },
    {
      "slug": "func (d *DB) ReadFlapCount(pubkey route.Vertex) (*FlapCount, error) {",
      "content": "func (d *DB) ReadFlapCount(pubkey route.Vertex) (*FlapCount, error) {\n\tvar flapCount FlapCount\n\n\tif err := kvdb.View(d, func(tx kvdb.RTx) error {\n\t\tpeers := tx.ReadBucket(peersBucket)\n\n\t\tpeerBucket := peers.NestedReadBucket(pubkey[:])\n\t\tif peerBucket == nil {\n\t\t\treturn ErrNoPeerBucket\n\t\t}\n\n\t\tflapBytes := peerBucket.Get(flapCountKey)\n\t\tif flapBytes == nil {\n\t\t\treturn fmt.Errorf(\"flap count not recorded for: %v\",\n\t\t\t\tpubkey)\n\t\t}\n\n\t\tvar (\n\t\t\terr error\n\t\t\tr   = bytes.NewReader(flapBytes)\n\t\t)\n\n\t\tflapCount.LastFlap, err = deserializeTime(r)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn ReadElements(r, &flapCount.Count)\n\t}, func() {\n\t\tflapCount = FlapCount{}\n\t}); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &flapCount, nil\n}\n",
      "length": 621,
      "tokens": 84,
      "embedding": []
    }
  ]
}