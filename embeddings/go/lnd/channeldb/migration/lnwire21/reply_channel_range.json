{
  "filepath": "../implementations/go/lnd/channeldb/migration/lnwire21/reply_channel_range.go",
  "package": "lnwire",
  "sections": [
    {
      "slug": "type ReplyChannelRange struct {",
      "content": "type ReplyChannelRange struct {\n\t// QueryChannelRange is the corresponding query to this response.\n\tQueryChannelRange\n\n\t// Complete denotes if this is the conclusion of the set of streaming\n\t// responses to the original query.\n\tComplete uint8\n\n\t// EncodingType is a signal to the receiver of the message that\n\t// indicates exactly how the set of short channel ID's that follow have\n\t// been encoded.\n\tEncodingType ShortChanIDEncoding\n\n\t// ShortChanIDs is a slice of decoded short channel ID's.\n\tShortChanIDs []ShortChannelID\n\n\t// noSort indicates whether or not to sort the short channel ids before\n\t// writing them out.\n\t//\n\t// NOTE: This should only be used for testing.\n\tnoSort bool\n}\n\n// NewReplyChannelRange creates a new empty ReplyChannelRange message.",
      "length": 705,
      "tokens": 111,
      "embedding": []
    },
    {
      "slug": "func NewReplyChannelRange() *ReplyChannelRange {",
      "content": "func NewReplyChannelRange() *ReplyChannelRange {\n\treturn &ReplyChannelRange{}\n}\n\n// A compile time check to ensure ReplyChannelRange implements the\n// lnwire.Message interface.\nvar _ Message = (*ReplyChannelRange)(nil)\n\n// Decode deserializes a serialized ReplyChannelRange message stored in the\n// passed io.Reader observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 350,
      "tokens": 48,
      "embedding": []
    },
    {
      "slug": "func (c *ReplyChannelRange) Decode(r io.Reader, pver uint32) error {",
      "content": "func (c *ReplyChannelRange) Decode(r io.Reader, pver uint32) error {\n\terr := c.QueryChannelRange.Decode(r, pver)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err := ReadElements(r, &c.Complete); err != nil {\n\t\treturn err\n\t}\n\n\tc.EncodingType, c.ShortChanIDs, err = decodeShortChanIDs(r)\n\n\treturn err\n}\n\n// Encode serializes the target ReplyChannelRange into the passed io.Writer\n// observing the protocol version specified.\n//\n// This is part of the lnwire.Message interface.",
      "length": 381,
      "tokens": 57,
      "embedding": []
    },
    {
      "slug": "func (c *ReplyChannelRange) Encode(w io.Writer, pver uint32) error {",
      "content": "func (c *ReplyChannelRange) Encode(w io.Writer, pver uint32) error {\n\tif err := c.QueryChannelRange.Encode(w, pver); err != nil {\n\t\treturn err\n\t}\n\n\tif err := WriteElements(w, c.Complete); err != nil {\n\t\treturn err\n\t}\n\n\treturn encodeShortChanIDs(w, c.EncodingType, c.ShortChanIDs, c.noSort)\n}\n\n// MsgType returns the integer uniquely identifying this message type on the\n// wire.\n//\n// This is part of the lnwire.Message interface.",
      "length": 347,
      "tokens": 53,
      "embedding": []
    },
    {
      "slug": "func (c *ReplyChannelRange) MsgType() MessageType {",
      "content": "func (c *ReplyChannelRange) MsgType() MessageType {\n\treturn MsgReplyChannelRange\n}\n\n// MaxPayloadLength returns the maximum allowed payload size for a\n// ReplyChannelRange complete message observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 224,
      "tokens": 31,
      "embedding": []
    },
    {
      "slug": "func (c *ReplyChannelRange) MaxPayloadLength(uint32) uint32 {",
      "content": "func (c *ReplyChannelRange) MaxPayloadLength(uint32) uint32 {\n\treturn MaxMessagePayload\n}\n",
      "length": 26,
      "tokens": 3,
      "embedding": []
    }
  ]
}