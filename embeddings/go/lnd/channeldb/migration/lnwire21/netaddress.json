{
  "filepath": "../implementations/go/lnd/channeldb/migration/lnwire21/netaddress.go",
  "package": "lnwire",
  "sections": [
    {
      "slug": "type NetAddress struct {",
      "content": "type NetAddress struct {\n\t// IdentityKey is the long-term static public key for a node. This node is\n\t// used throughout the network as a node's identity key. It is used to\n\t// authenticate any data sent to the network on behalf of the node, and\n\t// additionally to establish a confidential+authenticated connection with\n\t// the node.\n\tIdentityKey *btcec.PublicKey\n\n\t// Address is the IP address and port of the node. This is left\n\t// general so that multiple implementations can be used.\n\tAddress net.Addr\n\n\t// ChainNet is the Bitcoin network this node is associated with.\n\t// TODO(roasbeef): make a slice in the future for multi-chain\n\tChainNet wire.BitcoinNet\n}\n\n// A compile time assertion to ensure that NetAddress meets the net.Addr\n// interface.\nvar _ net.Addr = (*NetAddress)(nil)\n\n// String returns a human readable string describing the target NetAddress. The\n// current string format is: <pubkey>@host.\n//\n// This part of the net.Addr interface.",
      "length": 908,
      "tokens": 149,
      "embedding": []
    },
    {
      "slug": "func (n *NetAddress) String() string {",
      "content": "func (n *NetAddress) String() string {\n\t// TODO(roasbeef): use base58?\n\tpubkey := n.IdentityKey.SerializeCompressed()\n\n\treturn fmt.Sprintf(\"%x@%v\", pubkey, n.Address)\n}\n\n// Network returns the name of the network this address is bound to.\n//\n// This part of the net.Addr interface.",
      "length": 234,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "func (n *NetAddress) Network() string {",
      "content": "func (n *NetAddress) Network() string {\n\treturn n.Address.Network()\n}\n",
      "length": 28,
      "tokens": 3,
      "embedding": []
    }
  ]
}