{
  "filepath": "../implementations/go/lnd/channeldb/migration/lnwire21/funding_locked.go",
  "package": "lnwire",
  "sections": [
    {
      "slug": "type FundingLocked struct {",
      "content": "type FundingLocked struct {\n\t// ChanID is the outpoint of the channel's funding transaction. This\n\t// can be used to query for the channel in the database.\n\tChanID ChannelID\n\n\t// NextPerCommitmentPoint is the secret that can be used to revoke the\n\t// next commitment transaction for the channel.\n\tNextPerCommitmentPoint *btcec.PublicKey\n}\n\n// NewFundingLocked creates a new FundingLocked message, populating it with the\n// necessary IDs and revocation secret.",
      "length": 421,
      "tokens": 64,
      "embedding": []
    },
    {
      "slug": "func NewFundingLocked(cid ChannelID, npcp *btcec.PublicKey) *FundingLocked {",
      "content": "func NewFundingLocked(cid ChannelID, npcp *btcec.PublicKey) *FundingLocked {\n\treturn &FundingLocked{\n\t\tChanID:                 cid,\n\t\tNextPerCommitmentPoint: npcp,\n\t}\n}\n\n// A compile time check to ensure FundingLocked implements the lnwire.Message\n// interface.\nvar _ Message = (*FundingLocked)(nil)\n\n// Decode deserializes the serialized FundingLocked message stored in the\n// passed io.Reader into the target FundingLocked using the deserialization\n// rules defined by the passed protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 460,
      "tokens": 63,
      "embedding": []
    },
    {
      "slug": "func (c *FundingLocked) Decode(r io.Reader, pver uint32) error {",
      "content": "func (c *FundingLocked) Decode(r io.Reader, pver uint32) error {\n\treturn ReadElements(r,\n\t\t&c.ChanID,\n\t\t&c.NextPerCommitmentPoint)\n}\n\n// Encode serializes the target FundingLocked message into the passed io.Writer\n// implementation. Serialization will observe the rules defined by the passed\n// protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 290,
      "tokens": 39,
      "embedding": []
    },
    {
      "slug": "func (c *FundingLocked) Encode(w io.Writer, pver uint32) error {",
      "content": "func (c *FundingLocked) Encode(w io.Writer, pver uint32) error {\n\treturn WriteElements(w,\n\t\tc.ChanID,\n\t\tc.NextPerCommitmentPoint)\n}\n\n// MsgType returns the uint32 code which uniquely identifies this message as a\n// FundingLocked message on the wire.\n//\n// This is part of the lnwire.Message interface.",
      "length": 228,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "func (c *FundingLocked) MsgType() MessageType {",
      "content": "func (c *FundingLocked) MsgType() MessageType {\n\treturn MsgFundingLocked\n}\n\n// MaxPayloadLength returns the maximum allowed payload length for a\n// FundingLocked message. This is calculated by summing the max length of all\n// the fields within a FundingLocked message.\n//\n// This is part of the lnwire.Message interface.",
      "length": 265,
      "tokens": 42,
      "embedding": []
    },
    {
      "slug": "func (c *FundingLocked) MaxPayloadLength(uint32) uint32 {",
      "content": "func (c *FundingLocked) MaxPayloadLength(uint32) uint32 {\n\tvar length uint32\n\n\t// ChanID - 32 bytes\n\tlength += 32\n\n\t// NextPerCommitmentPoint - 33 bytes\n\tlength += 33\n\n\t// 65 bytes\n\treturn length\n}\n",
      "length": 129,
      "tokens": 25,
      "embedding": []
    }
  ]
}