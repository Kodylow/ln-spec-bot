{
  "filepath": "../implementations/go/lnd/channeldb/migration/lnwire21/update_fee.go",
  "package": "lnwire",
  "sections": [
    {
      "slug": "type UpdateFee struct {",
      "content": "type UpdateFee struct {\n\t// ChanID is the channel that this UpdateFee is meant for.\n\tChanID ChannelID\n\n\t// FeePerKw is the fee-per-kw on commit transactions that the sender of\n\t// this message wants to use for this channel.\n\t//\n\t// TODO(halseth): make SatPerKWeight when fee estimation is moved to\n\t// own package. Currently this will cause an import cycle.\n\tFeePerKw uint32\n}\n\n// NewUpdateFee creates a new UpdateFee message.",
      "length": 391,
      "tokens": 65,
      "embedding": []
    },
    {
      "slug": "func NewUpdateFee(chanID ChannelID, feePerKw uint32) *UpdateFee {",
      "content": "func NewUpdateFee(chanID ChannelID, feePerKw uint32) *UpdateFee {\n\treturn &UpdateFee{\n\t\tChanID:   chanID,\n\t\tFeePerKw: feePerKw,\n\t}\n}\n\n// A compile time check to ensure UpdateFee implements the lnwire.Message\n// interface.\nvar _ Message = (*UpdateFee)(nil)\n\n// Decode deserializes a serialized UpdateFee message stored in the passed\n// io.Reader observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 359,
      "tokens": 53,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFee) Decode(r io.Reader, pver uint32) error {",
      "content": "func (c *UpdateFee) Decode(r io.Reader, pver uint32) error {\n\treturn ReadElements(r,\n\t\t&c.ChanID,\n\t\t&c.FeePerKw,\n\t)\n}\n\n// Encode serializes the target UpdateFee into the passed io.Writer\n// observing the protocol version specified.\n//\n// This is part of the lnwire.Message interface.",
      "length": 213,
      "tokens": 31,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFee) Encode(w io.Writer, pver uint32) error {",
      "content": "func (c *UpdateFee) Encode(w io.Writer, pver uint32) error {\n\treturn WriteElements(w,\n\t\tc.ChanID,\n\t\tc.FeePerKw,\n\t)\n}\n\n// MsgType returns the integer uniquely identifying this message type on the\n// wire.\n//\n// This is part of the lnwire.Message interface.",
      "length": 185,
      "tokens": 29,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFee) MsgType() MessageType {",
      "content": "func (c *UpdateFee) MsgType() MessageType {\n\treturn MsgUpdateFee\n}\n\n// MaxPayloadLength returns the maximum allowed payload size for an UpdateFee\n// complete message observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 209,
      "tokens": 31,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFee) MaxPayloadLength(uint32) uint32 {",
      "content": "func (c *UpdateFee) MaxPayloadLength(uint32) uint32 {\n\t// 32 + 4\n\treturn 36\n}\n\n// TargetChanID returns the channel id of the link for which this message is\n// intended.\n//\n// NOTE: Part of peer.LinkUpdater interface.",
      "length": 155,
      "tokens": 30,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFee) TargetChanID() ChannelID {",
      "content": "func (c *UpdateFee) TargetChanID() ChannelID {\n\treturn c.ChanID\n}\n",
      "length": 17,
      "tokens": 3,
      "embedding": []
    }
  ]
}