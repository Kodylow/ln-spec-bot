{
  "filepath": "../implementations/go/lnd/channeldb/migration/lnwire21/commit_sig.go",
  "package": "lnwire",
  "sections": [
    {
      "slug": "type CommitSig struct {",
      "content": "type CommitSig struct {\n\t// ChanID uniquely identifies to which currently active channel this\n\t// CommitSig applies to.\n\tChanID ChannelID\n\n\t// CommitSig is Alice's signature for Bob's new commitment transaction.\n\t// Alice is able to send this signature without requesting any\n\t// additional data due to the piggybacking of Bob's next revocation\n\t// hash in his prior RevokeAndAck message, as well as the canonical\n\t// ordering used for all inputs/outputs within commitment transactions.\n\t// If initiating a new commitment state, this signature should ONLY\n\t// cover all of the sending party's pending log updates, and the log\n\t// updates of the remote party that have been ACK'd.\n\tCommitSig Sig\n\n\t// HtlcSigs is a signature for each relevant HTLC output within the\n\t// created commitment. The order of the signatures is expected to be\n\t// identical to the placement of the HTLC's within the BIP 69 sorted\n\t// commitment transaction. For each outgoing HTLC (from the PoV of the\n\t// sender of this message), a signature for an HTLC timeout transaction\n\t// should be signed, for each incoming HTLC the HTLC timeout\n\t// transaction should be signed.\n\tHtlcSigs []Sig\n}\n\n// NewCommitSig creates a new empty CommitSig message.",
      "length": 1171,
      "tokens": 193,
      "embedding": []
    },
    {
      "slug": "func NewCommitSig() *CommitSig {",
      "content": "func NewCommitSig() *CommitSig {\n\treturn &CommitSig{}\n}\n\n// A compile time check to ensure CommitSig implements the lnwire.Message\n// interface.\nvar _ Message = (*CommitSig)(nil)\n\n// Decode deserializes a serialized CommitSig message stored in the\n// passed io.Reader observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 318,
      "tokens": 48,
      "embedding": []
    },
    {
      "slug": "func (c *CommitSig) Decode(r io.Reader, pver uint32) error {",
      "content": "func (c *CommitSig) Decode(r io.Reader, pver uint32) error {\n\treturn ReadElements(r,\n\t\t&c.ChanID,\n\t\t&c.CommitSig,\n\t\t&c.HtlcSigs,\n\t)\n}\n\n// Encode serializes the target CommitSig into the passed io.Writer\n// observing the protocol version specified.\n//\n// This is part of the lnwire.Message interface.",
      "length": 228,
      "tokens": 32,
      "embedding": []
    },
    {
      "slug": "func (c *CommitSig) Encode(w io.Writer, pver uint32) error {",
      "content": "func (c *CommitSig) Encode(w io.Writer, pver uint32) error {\n\treturn WriteElements(w,\n\t\tc.ChanID,\n\t\tc.CommitSig,\n\t\tc.HtlcSigs,\n\t)\n}\n\n// MsgType returns the integer uniquely identifying this message type on the\n// wire.\n//\n// This is part of the lnwire.Message interface.",
      "length": 199,
      "tokens": 30,
      "embedding": []
    },
    {
      "slug": "func (c *CommitSig) MsgType() MessageType {",
      "content": "func (c *CommitSig) MsgType() MessageType {\n\treturn MsgCommitSig\n}\n\n// MaxPayloadLength returns the maximum allowed payload size for a\n// CommitSig complete message observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 208,
      "tokens": 31,
      "embedding": []
    },
    {
      "slug": "func (c *CommitSig) MaxPayloadLength(uint32) uint32 {",
      "content": "func (c *CommitSig) MaxPayloadLength(uint32) uint32 {\n\t// 32 + 64 + 2 + max_allowed_htlcs\n\treturn MaxMessagePayload\n}\n\n// TargetChanID returns the channel id of the link for which this message is\n// intended.\n//\n// NOTE: Part of peer.LinkUpdater interface.",
      "length": 195,
      "tokens": 34,
      "embedding": []
    },
    {
      "slug": "func (c *CommitSig) TargetChanID() ChannelID {",
      "content": "func (c *CommitSig) TargetChanID() ChannelID {\n\treturn c.ChanID\n}\n",
      "length": 17,
      "tokens": 3,
      "embedding": []
    }
  ]
}