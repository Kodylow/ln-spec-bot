{
  "filepath": "../implementations/go/lnd/channeldb/migration/lnwire21/update_fulfill_htlc.go",
  "package": "lnwire",
  "sections": [
    {
      "slug": "type UpdateFulfillHTLC struct {",
      "content": "type UpdateFulfillHTLC struct {\n\t// ChanID references an active channel which holds the HTLC to be\n\t// settled.\n\tChanID ChannelID\n\n\t// ID denotes the exact HTLC stage within the receiving node's\n\t// commitment transaction to be removed.\n\tID uint64\n\n\t// PaymentPreimage is the R-value preimage required to fully settle an\n\t// HTLC.\n\tPaymentPreimage [32]byte\n}\n\n// NewUpdateFulfillHTLC returns a new empty UpdateFulfillHTLC.",
      "length": 377,
      "tokens": 58,
      "embedding": []
    },
    {
      "slug": "func NewUpdateFulfillHTLC(chanID ChannelID, id uint64,",
      "content": "func NewUpdateFulfillHTLC(chanID ChannelID, id uint64,\n\tpreimage [32]byte) *UpdateFulfillHTLC {\n\n\treturn &UpdateFulfillHTLC{\n\t\tChanID:          chanID,\n\t\tID:              id,\n\t\tPaymentPreimage: preimage,\n\t}\n}\n\n// A compile time check to ensure UpdateFulfillHTLC implements the lnwire.Message\n// interface.\nvar _ Message = (*UpdateFulfillHTLC)(nil)\n\n// Decode deserializes a serialized UpdateFulfillHTLC message stored in the passed\n// io.Reader observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 467,
      "tokens": 59,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFulfillHTLC) Decode(r io.Reader, pver uint32) error {",
      "content": "func (c *UpdateFulfillHTLC) Decode(r io.Reader, pver uint32) error {\n\treturn ReadElements(r,\n\t\t&c.ChanID,\n\t\t&c.ID,\n\t\tc.PaymentPreimage[:],\n\t)\n}\n\n// Encode serializes the target UpdateFulfillHTLC into the passed io.Writer\n// observing the protocol version specified.\n//\n// This is part of the lnwire.Message interface.",
      "length": 238,
      "tokens": 32,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFulfillHTLC) Encode(w io.Writer, pver uint32) error {",
      "content": "func (c *UpdateFulfillHTLC) Encode(w io.Writer, pver uint32) error {\n\treturn WriteElements(w,\n\t\tc.ChanID,\n\t\tc.ID,\n\t\tc.PaymentPreimage[:],\n\t)\n}\n\n// MsgType returns the integer uniquely identifying this message type on the\n// wire.\n//\n// This is part of the lnwire.Message interface.",
      "length": 202,
      "tokens": 30,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFulfillHTLC) MsgType() MessageType {",
      "content": "func (c *UpdateFulfillHTLC) MsgType() MessageType {\n\treturn MsgUpdateFulfillHTLC\n}\n\n// MaxPayloadLength returns the maximum allowed payload size for an UpdateFulfillHTLC\n// complete message observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 225,
      "tokens": 31,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFulfillHTLC) MaxPayloadLength(uint32) uint32 {",
      "content": "func (c *UpdateFulfillHTLC) MaxPayloadLength(uint32) uint32 {\n\t// 32 + 8 + 32\n\treturn 72\n}\n\n// TargetChanID returns the channel id of the link for which this message is\n// intended.\n//\n// NOTE: Part of peer.LinkUpdater interface.",
      "length": 160,
      "tokens": 32,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFulfillHTLC) TargetChanID() ChannelID {",
      "content": "func (c *UpdateFulfillHTLC) TargetChanID() ChannelID {\n\treturn c.ChanID\n}\n",
      "length": 17,
      "tokens": 3,
      "embedding": []
    }
  ]
}