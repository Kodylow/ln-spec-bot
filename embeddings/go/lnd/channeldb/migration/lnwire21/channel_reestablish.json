{
  "filepath": "../implementations/go/lnd/channeldb/migration/lnwire21/channel_reestablish.go",
  "package": "lnwire",
  "sections": [
    {
      "slug": "type ChannelReestablish struct {",
      "content": "type ChannelReestablish struct {\n\t// ChanID is the channel ID of the channel state we're attempting to\n\t// synchronize with the remote party.\n\tChanID ChannelID\n\n\t// NextLocalCommitHeight is the next local commitment height of the\n\t// sending party. If the height of the sender's commitment chain from\n\t// the receiver's Pov is one less that this number, then the sender\n\t// should re-send the *exact* same proposed commitment.\n\t//\n\t// In other words, the receiver should re-send their last sent\n\t// commitment iff:\n\t//\n\t//  * NextLocalCommitHeight == remoteCommitChain.Height\n\t//\n\t// This covers the case of a lost commitment which was sent by the\n\t// sender of this message, but never received by the receiver of this\n\t// message.\n\tNextLocalCommitHeight uint64\n\n\t// RemoteCommitTailHeight is the height of the receiving party's\n\t// unrevoked commitment from the PoV of the sender of this message. If\n\t// the height of the receiver's commitment is *one more* than this\n\t// value, then their prior RevokeAndAck message should be\n\t// retransmitted.\n\t//\n\t// In other words, the receiver should re-send their last sent\n\t// RevokeAndAck message iff:\n\t//\n\t//  * localCommitChain.tail().Height == RemoteCommitTailHeight + 1\n\t//\n\t// This covers the case of a lost revocation, wherein the receiver of\n\t// the message sent a revocation for a prior state, but the sender of\n\t// the message never fully processed it.\n\tRemoteCommitTailHeight uint64\n\n\t// LastRemoteCommitSecret is the last commitment secret that the\n\t// receiving node has sent to the sending party. This will be the\n\t// secret of the last revoked commitment transaction. Including this\n\t// provides proof that the sending node at least knows of this state,\n\t// as they couldn't have produced it if it wasn't sent, as the value\n\t// can be authenticated by querying the shachain or the receiving\n\t// party.\n\tLastRemoteCommitSecret [32]byte\n\n\t// LocalUnrevokedCommitPoint is the commitment point used in the\n\t// current un-revoked commitment transaction of the sending party.\n\tLocalUnrevokedCommitPoint *btcec.PublicKey\n}\n\n// A compile time check to ensure ChannelReestablish implements the\n// lnwire.Message interface.\nvar _ Message = (*ChannelReestablish)(nil)\n\n// Encode serializes the target ChannelReestablish into the passed io.Writer\n// observing the protocol version specified.\n//\n// This is part of the lnwire.Message interface.",
      "length": 2299,
      "tokens": 361,
      "embedding": []
    },
    {
      "slug": "func (a *ChannelReestablish) Encode(w io.Writer, pver uint32) error {",
      "content": "func (a *ChannelReestablish) Encode(w io.Writer, pver uint32) error {\n\terr := WriteElements(w,\n\t\ta.ChanID,\n\t\ta.NextLocalCommitHeight,\n\t\ta.RemoteCommitTailHeight,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// If the commit point wasn't sent, then we won't write out any of the\n\t// remaining fields as they're optional.\n\tif a.LocalUnrevokedCommitPoint == nil {\n\t\treturn nil\n\t}\n\n\t// Otherwise, we'll write out the remaining elements.\n\treturn WriteElements(w, a.LastRemoteCommitSecret[:],\n\t\ta.LocalUnrevokedCommitPoint)\n}\n\n// Decode deserializes a serialized ChannelReestablish stored in the passed\n// io.Reader observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 603,
      "tokens": 83,
      "embedding": []
    },
    {
      "slug": "func (a *ChannelReestablish) Decode(r io.Reader, pver uint32) error {",
      "content": "func (a *ChannelReestablish) Decode(r io.Reader, pver uint32) error {\n\terr := ReadElements(r,\n\t\t&a.ChanID,\n\t\t&a.NextLocalCommitHeight,\n\t\t&a.RemoteCommitTailHeight,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// This message has currently defined optional fields. As a result,\n\t// we'll only proceed if there's still bytes remaining within the\n\t// reader.\n\t//\n\t// We'll manually parse out the optional fields in order to be able to\n\t// still utilize the io.Reader interface.\n\n\t// We'll first attempt to read the optional commit secret, if we're at\n\t// the EOF, then this means the field wasn't included so we can exit\n\t// early.\n\tvar buf [32]byte\n\t_, err = io.ReadFull(r, buf[:32])\n\tif err == io.EOF {\n\t\treturn nil\n\t} else if err != nil {\n\t\treturn err\n\t}\n\n\t// If the field is present, then we'll copy it over and proceed.\n\tcopy(a.LastRemoteCommitSecret[:], buf[:])\n\n\t// We'll conclude by parsing out the commitment point. We don't check\n\t// the error in this case, as it has included the commit secret, then\n\t// they MUST also include the commit point.\n\treturn ReadElement(r, &a.LocalUnrevokedCommitPoint)\n}\n\n// MsgType returns the integer uniquely identifying this message type on the\n// wire.\n//\n// This is part of the lnwire.Message interface.",
      "length": 1130,
      "tokens": 190,
      "embedding": []
    },
    {
      "slug": "func (a *ChannelReestablish) MsgType() MessageType {",
      "content": "func (a *ChannelReestablish) MsgType() MessageType {\n\treturn MsgChannelReestablish\n}\n\n// MaxPayloadLength returns the maximum allowed payload size for this message\n// observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 201,
      "tokens": 29,
      "embedding": []
    },
    {
      "slug": "func (a *ChannelReestablish) MaxPayloadLength(pver uint32) uint32 {",
      "content": "func (a *ChannelReestablish) MaxPayloadLength(pver uint32) uint32 {\n\tvar length uint32\n\n\t// ChanID - 32 bytes\n\tlength += 32\n\n\t// NextLocalCommitHeight - 8 bytes\n\tlength += 8\n\n\t// RemoteCommitTailHeight - 8 bytes\n\tlength += 8\n\n\t// LastRemoteCommitSecret - 32 bytes\n\tlength += 32\n\n\t// LocalUnrevokedCommitPoint - 33 bytes\n\tlength += 33\n\n\treturn length\n}\n",
      "length": 265,
      "tokens": 46,
      "embedding": []
    }
  ]
}