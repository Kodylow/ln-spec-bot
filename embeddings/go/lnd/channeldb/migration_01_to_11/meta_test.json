{
  "filepath": "../implementations/go/lnd/channeldb/migration_01_to_11/meta_test.go",
  "package": "migration_01_to_11",
  "sections": [
    {
      "slug": "func applyMigration(t *testing.T, beforeMigration, afterMigration func(d *DB),",
      "content": "func applyMigration(t *testing.T, beforeMigration, afterMigration func(d *DB),\n\tmigrationFunc migration, shouldFail bool) {\n\n\tcdb, err := makeTestDB(t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// Create a test node that will be our source node.\n\ttestNode, err := createTestVertex(cdb)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tgraph := cdb.ChannelGraph()\n\tif err := graph.SetSourceNode(testNode); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// beforeMigration usually used for populating the database\n\t// with test data.\n\tbeforeMigration(cdb)\n\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = errors.New(r)\n\t\t}\n\n\t\tif err == nil && shouldFail {\n\t\t\tt.Fatal(\"error wasn't received on migration stage\")\n\t\t} else if err != nil && !shouldFail {\n\t\t\tt.Fatalf(\"error was received on migration stage: %v\", err)\n\t\t}\n\n\t\t// afterMigration usually used for checking the database state and\n\t\t// throwing the error if something went wrong.\n\t\tafterMigration(cdb)\n\t}()\n\n\t// Apply migration.\n\terr = kvdb.Update(cdb, func(tx kvdb.RwTx) error {\n\t\treturn migrationFunc(tx)\n\t}, func() {})\n\tif err != nil {\n\t\tlog.Error(err)\n\t}\n}\n",
      "length": 968,
      "tokens": 153,
      "embedding": []
    }
  ]
}