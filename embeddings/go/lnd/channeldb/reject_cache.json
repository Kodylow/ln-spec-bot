{
  "filepath": "../implementations/go/lnd/channeldb/reject_cache.go",
  "package": "channeldb",
  "sections": [
    {
      "slug": "type rejectFlags uint8",
      "content": "type rejectFlags uint8\n\nconst (\n\t// rejectFlagExists is a flag indicating whether the channel exists,\n\t// i.e. the channel is open and has a recent channel update. If this\n\t// flag is not set, the channel is either a zombie or unknown.\n\trejectFlagExists rejectFlags = 1 << iota\n\n\t// rejectFlagZombie is a flag indicating whether the channel is a\n\t// zombie, i.e. the channel is open but has no recent channel updates.\n\trejectFlagZombie\n)\n\n// packRejectFlags computes the rejectFlags corresponding to the passed boolean\n// values indicating whether the edge exists or is a zombie.",
      "length": 543,
      "tokens": 92,
      "embedding": []
    },
    {
      "slug": "func packRejectFlags(exists, isZombie bool) rejectFlags {",
      "content": "func packRejectFlags(exists, isZombie bool) rejectFlags {\n\tvar flags rejectFlags\n\tif exists {\n\t\tflags |= rejectFlagExists\n\t}\n\tif isZombie {\n\t\tflags |= rejectFlagZombie\n\t}\n\n\treturn flags\n}\n\n// unpack returns the booleans packed into the rejectFlags. The first indicates\n// if the edge exists in our graph, the second indicates if the edge is a\n// zombie.",
      "length": 282,
      "tokens": 50,
      "embedding": []
    },
    {
      "slug": "func (f rejectFlags) unpack() (bool, bool) {",
      "content": "func (f rejectFlags) unpack() (bool, bool) {\n\treturn f&rejectFlagExists == rejectFlagExists,\n\t\tf&rejectFlagZombie == rejectFlagZombie\n}\n\n// rejectCacheEntry caches frequently accessed information about a channel,\n// including the timestamps of its latest edge policies and whether or not the\n// channel exists in the graph.",
      "length": 272,
      "tokens": 37,
      "embedding": []
    },
    {
      "slug": "type rejectCacheEntry struct {",
      "content": "type rejectCacheEntry struct {\n\tupd1Time int64\n\tupd2Time int64\n\tflags    rejectFlags\n}\n\n// rejectCache is an in-memory cache used to improve the performance of\n// HasChannelEdge. It caches information about the whether or channel exists, as\n// well as the most recent timestamps for each policy (if they exists).",
      "length": 274,
      "tokens": 44,
      "embedding": []
    },
    {
      "slug": "type rejectCache struct {",
      "content": "type rejectCache struct {\n\tn     int\n\tedges map[uint64]rejectCacheEntry\n}\n\n// newRejectCache creates a new rejectCache with maximum capacity of n entries.",
      "length": 124,
      "tokens": 17,
      "embedding": []
    },
    {
      "slug": "func newRejectCache(n int) *rejectCache {",
      "content": "func newRejectCache(n int) *rejectCache {\n\treturn &rejectCache{\n\t\tn:     n,\n\t\tedges: make(map[uint64]rejectCacheEntry, n),\n\t}\n}\n\n// get returns the entry from the cache for chanid, if it exists.",
      "length": 146,
      "tokens": 22,
      "embedding": []
    },
    {
      "slug": "func (c *rejectCache) get(chanid uint64) (rejectCacheEntry, bool) {",
      "content": "func (c *rejectCache) get(chanid uint64) (rejectCacheEntry, bool) {\n\tentry, ok := c.edges[chanid]\n\treturn entry, ok\n}\n\n// insert adds the entry to the reject cache. If an entry for chanid already\n// exists, it will be replaced with the new entry. If the entry doesn't exists,\n// it will be inserted to the cache, performing a random eviction if the cache\n// is at capacity.",
      "length": 298,
      "tokens": 57,
      "embedding": []
    },
    {
      "slug": "func (c *rejectCache) insert(chanid uint64, entry rejectCacheEntry) {",
      "content": "func (c *rejectCache) insert(chanid uint64, entry rejectCacheEntry) {\n\t// If entry exists, replace it.\n\tif _, ok := c.edges[chanid]; ok {\n\t\tc.edges[chanid] = entry\n\t\treturn\n\t}\n\n\t// Otherwise, evict an entry at random and insert.\n\tif len(c.edges) == c.n {\n\t\tfor id := range c.edges {\n\t\t\tdelete(c.edges, id)\n\t\t\tbreak\n\t\t}\n\t}\n\tc.edges[chanid] = entry\n}\n\n// remove deletes an entry for chanid from the cache, if it exists.",
      "length": 331,
      "tokens": 60,
      "embedding": []
    },
    {
      "slug": "func (c *rejectCache) remove(chanid uint64) {",
      "content": "func (c *rejectCache) remove(chanid uint64) {\n\tdelete(c.edges, chanid)\n}\n",
      "length": 25,
      "tokens": 3,
      "embedding": []
    }
  ]
}