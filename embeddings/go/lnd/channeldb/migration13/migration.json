{
  "filepath": "../implementations/go/lnd/channeldb/migration13/migration.go",
  "package": "migration13",
  "sections": [
    {
      "slug": "func MigrateMPP(tx kvdb.RwTx) error {",
      "content": "func MigrateMPP(tx kvdb.RwTx) error {\n\tlog.Infof(\"Migrating payments to mpp structure\")\n\n\t// Iterate over all payments and store their indexing keys. This is\n\t// needed, because no modifications are allowed inside a Bucket.ForEach\n\t// loop.\n\tpaymentsBucket := tx.ReadWriteBucket(paymentsRootBucket)\n\tif paymentsBucket == nil {\n\t\treturn nil\n\t}\n\n\tvar paymentKeys [][]byte\n\terr := paymentsBucket.ForEach(func(k, v []byte) error {\n\t\tpaymentKeys = append(paymentKeys, k)\n\t\treturn nil\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// With all keys retrieved, start the migration.\n\tfor _, k := range paymentKeys {\n\t\tbucket := paymentsBucket.NestedReadWriteBucket(k)\n\n\t\t// We only expect sub-buckets to be found in\n\t\t// this top-level bucket.\n\t\tif bucket == nil {\n\t\t\treturn fmt.Errorf(\"non bucket element in \" +\n\t\t\t\t\"payments bucket\")\n\t\t}\n\n\t\t// Fetch old format creation info.\n\t\tcreationInfo := bucket.Get(paymentCreationInfoKey)\n\t\tif creationInfo == nil {\n\t\t\treturn fmt.Errorf(\"creation info not found\")\n\t\t}\n\n\t\t// Make a copy because bbolt doesn't allow this value to be\n\t\t// changed in-place.\n\t\tnewCreationInfo := make([]byte, len(creationInfo))\n\t\tcopy(newCreationInfo, creationInfo)\n\n\t\t// Convert to nano seconds.\n\t\ttimeBytes := newCreationInfo[32+8 : 32+8+8]\n\t\ttime := byteOrder.Uint64(timeBytes)\n\t\ttimeNs := time * 1000000000\n\t\tbyteOrder.PutUint64(timeBytes, timeNs)\n\n\t\t// Write back new format creation info.\n\t\terr := bucket.Put(paymentCreationInfoKey, newCreationInfo)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// No migration needed if there is no attempt stored.\n\t\tattemptInfo := bucket.Get(paymentAttemptInfoKey)\n\t\tif attemptInfo == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Delete attempt info on the payment level.\n\t\tif err := bucket.Delete(paymentAttemptInfoKey); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Save attempt id for later use.\n\t\tattemptID := attemptInfo[:8]\n\n\t\t// Discard attempt id. It will become a bucket key in the new\n\t\t// structure.\n\t\tattemptInfo = attemptInfo[8:]\n\n\t\t// Append unknown (zero) attempt time.\n\t\tvar zero [8]byte\n\t\tattemptInfo = append(attemptInfo, zero[:]...)\n\n\t\t// Create bucket that contains all htlcs.\n\t\thtlcsBucket, err := bucket.CreateBucket(paymentHtlcsBucket)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Create an htlc for this attempt.\n\t\thtlcBucket, err := htlcsBucket.CreateBucket(attemptID)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Save migrated attempt info.\n\t\terr = htlcBucket.Put(htlcAttemptInfoKey, attemptInfo)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Migrate settle info.\n\t\tsettleInfo := bucket.Get(paymentSettleInfoKey)\n\t\tif settleInfo != nil {\n\t\t\t// Payment-level settle info can be deleted.\n\t\t\terr := bucket.Delete(paymentSettleInfoKey)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\t// Append unknown (zero) settle time.\n\t\t\tsettleInfo = append(settleInfo, zero[:]...)\n\n\t\t\t// Save settle info.\n\t\t\terr = htlcBucket.Put(htlcSettleInfoKey, settleInfo)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\t// Migration for settled htlc completed.\n\t\t\tcontinue\n\t\t}\n\n\t\t// If there is no payment-level failure reason, the payment is\n\t\t// still in flight and nothing else needs to be migrated.\n\t\t// Otherwise the payment-level failure reason can remain\n\t\t// unchanged.\n\t\tinFlight := bucket.Get(paymentFailInfoKey) == nil\n\t\tif inFlight {\n\t\t\tcontinue\n\t\t}\n\n\t\t// The htlc failed. Add htlc fail info with reason unknown. We\n\t\t// don't have access to the original failure reason anymore.\n\t\tfailInfo := []byte{\n\t\t\t// Fail time unknown.\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0,\n\n\t\t\t// Zero length wire message.\n\t\t\t0,\n\n\t\t\t// Failure reason unknown.\n\t\t\t0,\n\n\t\t\t// Failure source index zero.\n\t\t\t0, 0, 0, 0,\n\t\t}\n\n\t\t// Save fail info.\n\t\terr = htlcBucket.Put(htlcFailInfoKey, failInfo)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tlog.Infof(\"Migration of payments to mpp structure complete!\")\n\n\treturn nil\n}\n",
      "length": 3588,
      "tokens": 517,
      "embedding": []
    }
  ]
}