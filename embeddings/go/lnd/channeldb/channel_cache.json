{
  "filepath": "../implementations/go/lnd/channeldb/channel_cache.go",
  "package": "channeldb",
  "sections": [
    {
      "slug": "type channelCache struct {",
      "content": "type channelCache struct {\n\tn        int\n\tchannels map[uint64]ChannelEdge\n}\n\n// newChannelCache creates a new channelCache with maximum capacity of n\n// channels.",
      "length": 130,
      "tokens": 18,
      "embedding": []
    },
    {
      "slug": "func newChannelCache(n int) *channelCache {",
      "content": "func newChannelCache(n int) *channelCache {\n\treturn &channelCache{\n\t\tn:        n,\n\t\tchannels: make(map[uint64]ChannelEdge),\n\t}\n}\n\n// get returns the channel from the cache, if it exists.",
      "length": 136,
      "tokens": 19,
      "embedding": []
    },
    {
      "slug": "func (c *channelCache) get(chanid uint64) (ChannelEdge, bool) {",
      "content": "func (c *channelCache) get(chanid uint64) (ChannelEdge, bool) {\n\tchannel, ok := c.channels[chanid]\n\treturn channel, ok\n}\n\n// insert adds the entry to the channel cache. If an entry for chanid already\n// exists, it will be replaced with the new entry. If the entry doesn't exist,\n// it will be inserted to the cache, performing a random eviction if the cache\n// is at capacity.",
      "length": 305,
      "tokens": 57,
      "embedding": []
    },
    {
      "slug": "func (c *channelCache) insert(chanid uint64, channel ChannelEdge) {",
      "content": "func (c *channelCache) insert(chanid uint64, channel ChannelEdge) {\n\t// If entry exists, replace it.\n\tif _, ok := c.channels[chanid]; ok {\n\t\tc.channels[chanid] = channel\n\t\treturn\n\t}\n\n\t// Otherwise, evict an entry at random and insert.\n\tif len(c.channels) == c.n {\n\t\tfor id := range c.channels {\n\t\t\tdelete(c.channels, id)\n\t\t\tbreak\n\t\t}\n\t}\n\tc.channels[chanid] = channel\n}\n\n// remove deletes an edge for chanid from the cache, if it exists.",
      "length": 352,
      "tokens": 60,
      "embedding": []
    },
    {
      "slug": "func (c *channelCache) remove(chanid uint64) {",
      "content": "func (c *channelCache) remove(chanid uint64) {\n\tdelete(c.channels, chanid)\n}\n",
      "length": 28,
      "tokens": 3,
      "embedding": []
    }
  ]
}