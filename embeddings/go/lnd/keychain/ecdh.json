{
  "filepath": "../implementations/go/lnd/keychain/ecdh.go",
  "package": "keychain",
  "sections": [
    {
      "slug": "func NewPubKeyECDH(keyDesc KeyDescriptor, ecdh ECDHRing) *PubKeyECDH {",
      "content": "func NewPubKeyECDH(keyDesc KeyDescriptor, ecdh ECDHRing) *PubKeyECDH {\n\treturn &PubKeyECDH{\n\t\tkeyDesc: keyDesc,\n\t\tecdh:    ecdh,\n\t}\n}\n\n// PubKeyECDH is an implementation of the SingleKeyECDH interface. It wraps an\n// ECDH key ring so it can perform ECDH shared key generation against a single\n// abstracted away private key.",
      "length": 245,
      "tokens": 40,
      "embedding": []
    },
    {
      "slug": "type PubKeyECDH struct {",
      "content": "type PubKeyECDH struct {\n\tkeyDesc KeyDescriptor\n\tecdh    ECDHRing\n}\n\n// PubKey returns the public key of the private key that is abstracted away by\n// the interface.\n//\n// NOTE: This is part of the SingleKeyECDH interface.",
      "length": 190,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "func (p *PubKeyECDH) PubKey() *btcec.PublicKey {",
      "content": "func (p *PubKeyECDH) PubKey() *btcec.PublicKey {\n\treturn p.keyDesc.PubKey\n}\n\n// ECDH performs a scalar multiplication (ECDH-like operation) between the\n// abstracted private key and a remote public key. The output returned will be\n// the sha256 of the resulting shared point serialized in compressed format. If\n// k is our private key, and P is the public key, we perform the following\n// operation:\n//\n//\tsx := k*P\n//\ts := sha256(sx.SerializeCompressed())\n//\n// NOTE: This is part of the SingleKeyECDH interface.",
      "length": 452,
      "tokens": 77,
      "embedding": []
    },
    {
      "slug": "func (p *PubKeyECDH) ECDH(pubKey *btcec.PublicKey) ([32]byte, error) {",
      "content": "func (p *PubKeyECDH) ECDH(pubKey *btcec.PublicKey) ([32]byte, error) {\n\treturn p.ecdh.ECDH(p.keyDesc, pubKey)\n}\n\n// PrivKeyECDH is an implementation of the SingleKeyECDH in which we do have the\n// full private key. This can be used to wrap a temporary key to conform to the\n// SingleKeyECDH interface.",
      "length": 225,
      "tokens": 38,
      "embedding": []
    },
    {
      "slug": "type PrivKeyECDH struct {",
      "content": "type PrivKeyECDH struct {\n\t// PrivKey is the private key that is used for the ECDH operation.\n\tPrivKey *btcec.PrivateKey\n}\n\n// PubKey returns the public key of the private key that is abstracted away by\n// the interface.\n//\n// NOTE: This is part of the SingleKeyECDH interface.",
      "length": 244,
      "tokens": 44,
      "embedding": []
    },
    {
      "slug": "func (p *PrivKeyECDH) PubKey() *btcec.PublicKey {",
      "content": "func (p *PrivKeyECDH) PubKey() *btcec.PublicKey {\n\treturn p.PrivKey.PubKey()\n}\n\n// ECDH performs a scalar multiplication (ECDH-like operation) between the\n// abstracted private key and a remote public key. The output returned will be\n// the sha256 of the resulting shared point serialized in compressed format. If\n// k is our private key, and P is the public key, we perform the following\n// operation:\n//\n//\tsx := k*P\n//\ts := sha256(sx.SerializeCompressed())\n//\n// NOTE: This is part of the SingleKeyECDH interface.",
      "length": 454,
      "tokens": 77,
      "embedding": []
    },
    {
      "slug": "func (p *PrivKeyECDH) ECDH(pub *btcec.PublicKey) ([32]byte, error) {",
      "content": "func (p *PrivKeyECDH) ECDH(pub *btcec.PublicKey) ([32]byte, error) {\n\tvar (\n\t\tpubJacobian btcec.JacobianPoint\n\t\ts           btcec.JacobianPoint\n\t)\n\tpub.AsJacobian(&pubJacobian)\n\n\tbtcec.ScalarMultNonConst(&p.PrivKey.Key, &pubJacobian, &s)\n\ts.ToAffine()\n\tsPubKey := btcec.NewPublicKey(&s.X, &s.Y)\n\treturn sha256.Sum256(sPubKey.SerializeCompressed()), nil\n}\n\nvar _ SingleKeyECDH = (*PubKeyECDH)(nil)\nvar _ SingleKeyECDH = (*PrivKeyECDH)(nil)\n",
      "length": 356,
      "tokens": 30,
      "embedding": []
    }
  ]
}