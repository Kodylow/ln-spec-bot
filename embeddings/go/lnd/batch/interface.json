{
  "filepath": "../implementations/go/lnd/batch/interface.go",
  "package": "batch",
  "sections": [
    {
      "slug": "type Request struct {",
      "content": "type Request struct {\n\t// Reset is called before each invocation of Update and is used to clear\n\t// any possible modifications to local state as a result of previous\n\t// calls to Update that were not committed due to a concurrent batch\n\t// failure.\n\t//\n\t// NOTE: This field is optional.\n\tReset func()\n\n\t// Update is applied alongside other operations in the batch.\n\t//\n\t// NOTE: This method MUST NOT acquire any mutexes.\n\tUpdate func(tx kvdb.RwTx) error\n\n\t// OnCommit is called if the batch or a subset of the batch including\n\t// this request all succeeded without failure. The passed error should\n\t// contain the result of the transaction commit, as that can still fail\n\t// even if none of the closures returned an error.\n\t//\n\t// NOTE: This field is optional.\n\tOnCommit func(commitErr error) error\n\n\t// lazy should be true if we don't have to immediately execute this\n\t// request when it comes in. This means that it can be scheduled later,\n\t// allowing larger batches.\n\tlazy bool\n}\n\n// SchedulerOption is a type that can be used to supply options to a scheduled\n// request.",
      "length": 1025,
      "tokens": 184,
      "embedding": []
    },
    {
      "slug": "type SchedulerOption func(r *Request)",
      "content": "type SchedulerOption func(r *Request)\n\n// LazyAdd will make the request be executed lazily, added to the next batch to\n// reduce db contention.",
      "length": 103,
      "tokens": 19,
      "embedding": []
    },
    {
      "slug": "func LazyAdd() SchedulerOption {",
      "content": "func LazyAdd() SchedulerOption {\n\treturn func(r *Request) {\n\t\tr.lazy = true\n\t}\n}\n\n// Scheduler abstracts a generic batching engine that accumulates an incoming\n// set of Requests, executes them, and returns the error from the operation.",
      "length": 197,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "type Scheduler interface {",
      "content": "type Scheduler interface {\n\t// Execute schedules a Request for execution with the next available\n\t// batch. This method blocks until the the underlying closure has been\n\t// run against the database. The resulting error is returned to the\n\t// caller.\n\tExecute(req *Request) error\n}\n",
      "length": 248,
      "tokens": 41,
      "embedding": []
    }
  ]
}