{
  "filepath": "../implementations/go/lnd/chainntnfs/btcdnotify/driver.go",
  "package": "btcdnotify",
  "sections": [
    {
      "slug": "func createNewNotifier(args ...interface{}) (chainntnfs.ChainNotifier, error) {",
      "content": "func createNewNotifier(args ...interface{}) (chainntnfs.ChainNotifier, error) {\n\tif len(args) != 5 {\n\t\treturn nil, fmt.Errorf(\"incorrect number of arguments to \"+\n\t\t\t\".New(...), expected 5, instead passed %v\", len(args))\n\t}\n\n\tconfig, ok := args[0].(*rpcclient.ConnConfig)\n\tif !ok {\n\t\treturn nil, errors.New(\"first argument to btcdnotify.New \" +\n\t\t\t\"is incorrect, expected a *rpcclient.ConnConfig\")\n\t}\n\n\tchainParams, ok := args[1].(*chaincfg.Params)\n\tif !ok {\n\t\treturn nil, errors.New(\"second argument to btcdnotify.New \" +\n\t\t\t\"is incorrect, expected a *chaincfg.Params\")\n\t}\n\n\tspendHintCache, ok := args[2].(chainntnfs.SpendHintCache)\n\tif !ok {\n\t\treturn nil, errors.New(\"third argument to btcdnotify.New \" +\n\t\t\t\"is incorrect, expected a chainntnfs.SpendHintCache\")\n\t}\n\n\tconfirmHintCache, ok := args[3].(chainntnfs.ConfirmHintCache)\n\tif !ok {\n\t\treturn nil, errors.New(\"fourth argument to btcdnotify.New \" +\n\t\t\t\"is incorrect, expected a chainntnfs.ConfirmHintCache\")\n\t}\n\n\tblockCache, ok := args[4].(*blockcache.BlockCache)\n\tif !ok {\n\t\treturn nil, errors.New(\"fifth argument to btcdnotify.New \" +\n\t\t\t\"is incorrect, expected a *blockcache.BlockCache\")\n\t}\n\n\treturn New(\n\t\tconfig, chainParams, spendHintCache, confirmHintCache, blockCache,\n\t)\n}\n\n// init registers a driver for the BtcdNotifier concrete implementation of the\n// chainntnfs.ChainNotifier interface.",
      "length": 1235,
      "tokens": 150,
      "embedding": []
    },
    {
      "slug": "func init() {",
      "content": "func init() {\n\t// Register the driver.\n\tnotifier := &chainntnfs.NotifierDriver{\n\t\tNotifierType: notifierType,\n\t\tNew:          createNewNotifier,\n\t}\n\n\tif err := chainntnfs.RegisterNotifier(notifier); err != nil {\n\t\tpanic(fmt.Sprintf(\"failed to register notifier driver '%s': %v\",\n\t\t\tnotifierType, err))\n\t}\n}\n",
      "length": 282,
      "tokens": 31,
      "embedding": []
    }
  ]
}