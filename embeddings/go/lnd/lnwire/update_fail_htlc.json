{
  "filepath": "../implementations/go/lnd/lnwire/update_fail_htlc.go",
  "package": "lnwire",
  "sections": [
    {
      "slug": "type OpaqueReason []byte",
      "content": "type OpaqueReason []byte\n\n// UpdateFailHTLC is sent by Alice to Bob in order to remove a previously added\n// HTLC. Upon receipt of an UpdateFailHTLC the HTLC should be removed from the\n// next commitment transaction, with the UpdateFailHTLC propagated backwards in\n// the route to fully undo the HTLC.",
      "length": 272,
      "tokens": 47,
      "embedding": []
    },
    {
      "slug": "type UpdateFailHTLC struct {",
      "content": "type UpdateFailHTLC struct {\n\t// ChanID is the particular active channel that this\n\t// UpdateFailHTLC is bound to.\n\tChanID ChannelID\n\n\t// ID references which HTLC on the remote node's commitment transaction\n\t// has timed out.\n\tID uint64\n\n\t// Reason is an onion-encrypted blob that details why the HTLC was\n\t// failed. This blob is only fully decryptable by the initiator of the\n\t// HTLC message.\n\tReason OpaqueReason\n\n\t// ExtraData is the set of data that was appended to this message to\n\t// fill out the full maximum transport message size. These fields can\n\t// be used to specify optional data such as custom TLV fields.\n\tExtraData ExtraOpaqueData\n}\n\n// A compile time check to ensure UpdateFailHTLC implements the lnwire.Message\n// interface.\nvar _ Message = (*UpdateFailHTLC)(nil)\n\n// Decode deserializes a serialized UpdateFailHTLC message stored in the passed\n// io.Reader observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 917,
      "tokens": 149,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFailHTLC) Decode(r io.Reader, pver uint32) error {",
      "content": "func (c *UpdateFailHTLC) Decode(r io.Reader, pver uint32) error {\n\treturn ReadElements(r,\n\t\t&c.ChanID,\n\t\t&c.ID,\n\t\t&c.Reason,\n\t\t&c.ExtraData,\n\t)\n}\n\n// Encode serializes the target UpdateFailHTLC into the passed io.Writer observing\n// the protocol version specified.\n//\n// This is part of the lnwire.Message interface.",
      "length": 239,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFailHTLC) Encode(w *bytes.Buffer, pver uint32) error {",
      "content": "func (c *UpdateFailHTLC) Encode(w *bytes.Buffer, pver uint32) error {\n\tif err := WriteChannelID(w, c.ChanID); err != nil {\n\t\treturn err\n\t}\n\n\tif err := WriteUint64(w, c.ID); err != nil {\n\t\treturn err\n\t}\n\n\tif err := WriteOpaqueReason(w, c.Reason); err != nil {\n\t\treturn err\n\t}\n\n\treturn WriteBytes(w, c.ExtraData)\n}\n\n// MsgType returns the integer uniquely identifying this message type on the\n// wire.\n//\n// This is part of the lnwire.Message interface.",
      "length": 363,
      "tokens": 63,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFailHTLC) MsgType() MessageType {",
      "content": "func (c *UpdateFailHTLC) MsgType() MessageType {\n\treturn MsgUpdateFailHTLC\n}\n\n// TargetChanID returns the channel id of the link for which this message is\n// intended.\n//\n// NOTE: Part of peer.LinkUpdater interface.",
      "length": 160,
      "tokens": 26,
      "embedding": []
    },
    {
      "slug": "func (c *UpdateFailHTLC) TargetChanID() ChannelID {",
      "content": "func (c *UpdateFailHTLC) TargetChanID() ChannelID {\n\treturn c.ChanID\n}\n",
      "length": 17,
      "tokens": 3,
      "embedding": []
    }
  ]
}