{
  "filepath": "../implementations/go/lnd/lnwire/revoke_and_ack.go",
  "package": "lnwire",
  "sections": [
    {
      "slug": "type RevokeAndAck struct {",
      "content": "type RevokeAndAck struct {\n\t// ChanID uniquely identifies to which currently active channel this\n\t// RevokeAndAck applies to.\n\tChanID ChannelID\n\n\t// Revocation is the preimage to the revocation hash of the now prior\n\t// commitment transaction.\n\tRevocation [32]byte\n\n\t// NextRevocationKey is the next commitment point which should be used\n\t// for the next commitment transaction the remote peer creates for us.\n\t// This, in conjunction with revocation base point will be used to\n\t// create the proper revocation key used within the commitment\n\t// transaction.\n\tNextRevocationKey *btcec.PublicKey\n\n\t// ExtraData is the set of data that was appended to this message to\n\t// fill out the full maximum transport message size. These fields can\n\t// be used to specify optional data such as custom TLV fields.\n\tExtraData ExtraOpaqueData\n}\n\n// NewRevokeAndAck creates a new RevokeAndAck message.",
      "length": 837,
      "tokens": 131,
      "embedding": []
    },
    {
      "slug": "func NewRevokeAndAck() *RevokeAndAck {",
      "content": "func NewRevokeAndAck() *RevokeAndAck {\n\treturn &RevokeAndAck{\n\t\tExtraData: make([]byte, 0),\n\t}\n}\n\n// A compile time check to ensure RevokeAndAck implements the lnwire.Message\n// interface.\nvar _ Message = (*RevokeAndAck)(nil)\n\n// Decode deserializes a serialized RevokeAndAck message stored in the\n// passed io.Reader observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 360,
      "tokens": 52,
      "embedding": []
    },
    {
      "slug": "func (c *RevokeAndAck) Decode(r io.Reader, pver uint32) error {",
      "content": "func (c *RevokeAndAck) Decode(r io.Reader, pver uint32) error {\n\treturn ReadElements(r,\n\t\t&c.ChanID,\n\t\tc.Revocation[:],\n\t\t&c.NextRevocationKey,\n\t\t&c.ExtraData,\n\t)\n}\n\n// Encode serializes the target RevokeAndAck into the passed io.Writer\n// observing the protocol version specified.\n//\n// This is part of the lnwire.Message interface.",
      "length": 258,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "func (c *RevokeAndAck) Encode(w *bytes.Buffer, pver uint32) error {",
      "content": "func (c *RevokeAndAck) Encode(w *bytes.Buffer, pver uint32) error {\n\tif err := WriteChannelID(w, c.ChanID); err != nil {\n\t\treturn err\n\t}\n\n\tif err := WriteBytes(w, c.Revocation[:]); err != nil {\n\t\treturn err\n\t}\n\n\tif err := WritePublicKey(w, c.NextRevocationKey); err != nil {\n\t\treturn err\n\t}\n\n\treturn WriteBytes(w, c.ExtraData)\n}\n\n// MsgType returns the integer uniquely identifying this message type on the\n// wire.\n//\n// This is part of the lnwire.Message interface.",
      "length": 381,
      "tokens": 63,
      "embedding": []
    },
    {
      "slug": "func (c *RevokeAndAck) MsgType() MessageType {",
      "content": "func (c *RevokeAndAck) MsgType() MessageType {\n\treturn MsgRevokeAndAck\n}\n\n// TargetChanID returns the channel id of the link for which this message is\n// intended.\n//\n// NOTE: Part of peer.LinkUpdater interface.",
      "length": 158,
      "tokens": 26,
      "embedding": []
    },
    {
      "slug": "func (c *RevokeAndAck) TargetChanID() ChannelID {",
      "content": "func (c *RevokeAndAck) TargetChanID() ChannelID {\n\treturn c.ChanID\n}\n",
      "length": 17,
      "tokens": 3,
      "embedding": []
    }
  ]
}