{
  "filepath": "../implementations/go/lnd/lnwire/reply_channel_range.go",
  "package": "lnwire",
  "sections": [
    {
      "slug": "type ReplyChannelRange struct {",
      "content": "type ReplyChannelRange struct {\n\t// ChainHash denotes the target chain that we're trying to synchronize\n\t// channel graph state for.\n\tChainHash chainhash.Hash\n\n\t// FirstBlockHeight is the first block in the query range. The\n\t// responder should send all new short channel IDs from this block\n\t// until this block plus the specified number of blocks.\n\tFirstBlockHeight uint32\n\n\t// NumBlocks is the number of blocks beyond the first block that short\n\t// channel ID's should be sent for.\n\tNumBlocks uint32\n\n\t// Complete denotes if this is the conclusion of the set of streaming\n\t// responses to the original query.\n\tComplete uint8\n\n\t// EncodingType is a signal to the receiver of the message that\n\t// indicates exactly how the set of short channel ID's that follow have\n\t// been encoded.\n\tEncodingType ShortChanIDEncoding\n\n\t// ShortChanIDs is a slice of decoded short channel ID's.\n\tShortChanIDs []ShortChannelID\n\n\t// ExtraData is the set of data that was appended to this message to\n\t// fill out the full maximum transport message size. These fields can\n\t// be used to specify optional data such as custom TLV fields.\n\tExtraData ExtraOpaqueData\n\n\t// noSort indicates whether or not to sort the short channel ids before\n\t// writing them out.\n\t//\n\t// NOTE: This should only be used for testing.\n\tnoSort bool\n}\n\n// NewReplyChannelRange creates a new empty ReplyChannelRange message.",
      "length": 1308,
      "tokens": 216,
      "embedding": []
    },
    {
      "slug": "func NewReplyChannelRange() *ReplyChannelRange {",
      "content": "func NewReplyChannelRange() *ReplyChannelRange {\n\treturn &ReplyChannelRange{}\n}\n\n// A compile time check to ensure ReplyChannelRange implements the\n// lnwire.Message interface.\nvar _ Message = (*ReplyChannelRange)(nil)\n\n// Decode deserializes a serialized ReplyChannelRange message stored in the\n// passed io.Reader observing the specified protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 350,
      "tokens": 48,
      "embedding": []
    },
    {
      "slug": "func (c *ReplyChannelRange) Decode(r io.Reader, pver uint32) error {",
      "content": "func (c *ReplyChannelRange) Decode(r io.Reader, pver uint32) error {\n\terr := ReadElements(r,\n\t\tc.ChainHash[:],\n\t\t&c.FirstBlockHeight,\n\t\t&c.NumBlocks,\n\t\t&c.Complete,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tc.EncodingType, c.ShortChanIDs, err = decodeShortChanIDs(r)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.ExtraData.Decode(r)\n}\n\n// Encode serializes the target ReplyChannelRange into the passed io.Writer\n// observing the protocol version specified.\n//\n// This is part of the lnwire.Message interface.",
      "length": 412,
      "tokens": 57,
      "embedding": []
    },
    {
      "slug": "func (c *ReplyChannelRange) Encode(w *bytes.Buffer, pver uint32) error {",
      "content": "func (c *ReplyChannelRange) Encode(w *bytes.Buffer, pver uint32) error {\n\tif err := WriteBytes(w, c.ChainHash[:]); err != nil {\n\t\treturn err\n\t}\n\n\tif err := WriteUint32(w, c.FirstBlockHeight); err != nil {\n\t\treturn err\n\t}\n\n\tif err := WriteUint32(w, c.NumBlocks); err != nil {\n\t\treturn err\n\t}\n\n\tif err := WriteUint8(w, c.Complete); err != nil {\n\t\treturn err\n\t}\n\n\terr := encodeShortChanIDs(w, c.EncodingType, c.ShortChanIDs, c.noSort)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn WriteBytes(w, c.ExtraData)\n}\n\n// MsgType returns the integer uniquely identifying this message type on the\n// wire.\n//\n// This is part of the lnwire.Message interface.",
      "length": 541,
      "tokens": 89,
      "embedding": []
    },
    {
      "slug": "func (c *ReplyChannelRange) MsgType() MessageType {",
      "content": "func (c *ReplyChannelRange) MsgType() MessageType {\n\treturn MsgReplyChannelRange\n}\n\n// LastBlockHeight returns the last block height covered by the range of a\n// QueryChannelRange message.",
      "length": 132,
      "tokens": 19,
      "embedding": []
    },
    {
      "slug": "func (c *ReplyChannelRange) LastBlockHeight() uint32 {",
      "content": "func (c *ReplyChannelRange) LastBlockHeight() uint32 {\n\t// Handle overflows by casting to uint64.\n\tlastBlockHeight := uint64(c.FirstBlockHeight) + uint64(c.NumBlocks) - 1\n\tif lastBlockHeight > math.MaxUint32 {\n\t\treturn math.MaxUint32\n\t}\n\treturn uint32(lastBlockHeight)\n}\n",
      "length": 209,
      "tokens": 25,
      "embedding": []
    }
  ]
}