{
  "filepath": "../implementations/go/lnd/lnwire/funding_created.go",
  "package": "lnwire",
  "sections": [
    {
      "slug": "type FundingCreated struct {",
      "content": "type FundingCreated struct {\n\t// PendingChannelID serves to uniquely identify the future channel\n\t// created by the initiated single funder workflow.\n\tPendingChannelID [32]byte\n\n\t// FundingPoint is the outpoint of the funding transaction created by\n\t// Alice. With this, Bob is able to generate both his version and\n\t// Alice's version of the commitment transaction.\n\tFundingPoint wire.OutPoint\n\n\t// CommitSig is Alice's signature from Bob's version of the commitment\n\t// transaction.\n\tCommitSig Sig\n\n\t// ExtraData is the set of data that was appended to this message to\n\t// fill out the full maximum transport message size. These fields can\n\t// be used to specify optional data such as custom TLV fields.\n\tExtraData ExtraOpaqueData\n}\n\n// A compile time check to ensure FundingCreated implements the lnwire.Message\n// interface.\nvar _ Message = (*FundingCreated)(nil)\n\n// Encode serializes the target FundingCreated into the passed io.Writer\n// implementation. Serialization will observe the rules defined by the passed\n// protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 1036,
      "tokens": 159,
      "embedding": []
    },
    {
      "slug": "func (f *FundingCreated) Encode(w *bytes.Buffer, pver uint32) error {",
      "content": "func (f *FundingCreated) Encode(w *bytes.Buffer, pver uint32) error {\n\tif err := WriteBytes(w, f.PendingChannelID[:]); err != nil {\n\t\treturn err\n\t}\n\n\tif err := WriteOutPoint(w, f.FundingPoint); err != nil {\n\t\treturn err\n\t}\n\n\tif err := WriteSig(w, f.CommitSig); err != nil {\n\t\treturn err\n\t}\n\n\treturn WriteBytes(w, f.ExtraData)\n}\n\n// Decode deserializes the serialized FundingCreated stored in the passed\n// io.Reader into the target FundingCreated using the deserialization rules\n// defined by the passed protocol version.\n//\n// This is part of the lnwire.Message interface.",
      "length": 484,
      "tokens": 76,
      "embedding": []
    },
    {
      "slug": "func (f *FundingCreated) Decode(r io.Reader, pver uint32) error {",
      "content": "func (f *FundingCreated) Decode(r io.Reader, pver uint32) error {\n\treturn ReadElements(\n\t\tr, f.PendingChannelID[:], &f.FundingPoint, &f.CommitSig,\n\t\t&f.ExtraData,\n\t)\n}\n\n// MsgType returns the uint32 code which uniquely identifies this message as a\n// FundingCreated on the wire.\n//\n// This is part of the lnwire.Message interface.",
      "length": 255,
      "tokens": 36,
      "embedding": []
    },
    {
      "slug": "func (f *FundingCreated) MsgType() MessageType {",
      "content": "func (f *FundingCreated) MsgType() MessageType {\n\treturn MsgFundingCreated\n}\n",
      "length": 26,
      "tokens": 3,
      "embedding": []
    }
  ]
}