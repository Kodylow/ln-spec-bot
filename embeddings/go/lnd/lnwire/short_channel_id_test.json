{
  "filepath": "../implementations/go/lnd/lnwire/short_channel_id_test.go",
  "package": "lnwire",
  "sections": [
    {
      "slug": "func TestShortChannelIDEncoding(t *testing.T) {",
      "content": "func TestShortChannelIDEncoding(t *testing.T) {\n\tt.Parallel()\n\n\tvar testCases = []ShortChannelID{\n\t\t{\n\t\t\tBlockHeight: (1 << 24) - 1,\n\t\t\tTxIndex:     (1 << 24) - 1,\n\t\t\tTxPosition:  (1 << 16) - 1,\n\t\t},\n\t\t{\n\t\t\tBlockHeight: 2304934,\n\t\t\tTxIndex:     2345,\n\t\t\tTxPosition:  5,\n\t\t},\n\t\t{\n\t\t\tBlockHeight: 9304934,\n\t\t\tTxIndex:     2345,\n\t\t\tTxPosition:  5233,\n\t\t},\n\t}\n\n\tfor _, testCase := range testCases {\n\t\tchanInt := testCase.ToUint64()\n\n\t\tnewChanID := NewShortChanIDFromInt(chanInt)\n\n\t\tif !reflect.DeepEqual(testCase, newChanID) {\n\t\t\tt.Fatalf(\"chan ID's don't match: expected %v got %v\",\n\t\t\t\tspew.Sdump(testCase), spew.Sdump(newChanID))\n\t\t}\n\t}\n}\n\n// TestScidTypeEncodeDecode tests that we're able to properly encode and decode\n// ShortChannelID within TLV streams.",
      "length": 675,
      "tokens": 88,
      "embedding": []
    },
    {
      "slug": "func TestScidTypeEncodeDecode(t *testing.T) {",
      "content": "func TestScidTypeEncodeDecode(t *testing.T) {\n\tt.Parallel()\n\n\taliasScid := ShortChannelID{\n\t\tBlockHeight: (1 << 24) - 1,\n\t\tTxIndex:     (1 << 24) - 1,\n\t\tTxPosition:  (1 << 16) - 1,\n\t}\n\n\tvar extraData ExtraOpaqueData\n\trequire.NoError(t, extraData.PackRecords(&aliasScid))\n\n\tvar aliasScid2 ShortChannelID\n\ttlvs, err := extraData.ExtractRecords(&aliasScid2)\n\trequire.NoError(t, err)\n\n\trequire.Contains(t, tlvs, AliasScidRecordType)\n\trequire.Equal(t, aliasScid, aliasScid2)\n}\n",
      "length": 408,
      "tokens": 44,
      "embedding": []
    }
  ]
}