{
  "filepath": "../implementations/go/lnd/sweep/store_mock.go",
  "package": "sweep",
  "sections": [
    {
      "slug": "type MockSweeperStore struct {",
      "content": "type MockSweeperStore struct {\n\tlastTx  *wire.MsgTx\n\tourTxes map[chainhash.Hash]struct{}\n}\n\n// NewMockSweeperStore returns a new instance.",
      "length": 103,
      "tokens": 11,
      "embedding": []
    },
    {
      "slug": "func NewMockSweeperStore() *MockSweeperStore {",
      "content": "func NewMockSweeperStore() *MockSweeperStore {\n\treturn &MockSweeperStore{\n\t\tourTxes: make(map[chainhash.Hash]struct{}),\n\t}\n}\n\n// IsOurTx determines whether a tx is published by us, based on its\n// hash.",
      "length": 149,
      "tokens": 21,
      "embedding": []
    },
    {
      "slug": "func (s *MockSweeperStore) IsOurTx(hash chainhash.Hash) (bool, error) {",
      "content": "func (s *MockSweeperStore) IsOurTx(hash chainhash.Hash) (bool, error) {\n\t_, ok := s.ourTxes[hash]\n\treturn ok, nil\n}\n\n// NotifyPublishTx signals that we are about to publish a tx.",
      "length": 102,
      "tokens": 19,
      "embedding": []
    },
    {
      "slug": "func (s *MockSweeperStore) NotifyPublishTx(tx *wire.MsgTx) error {",
      "content": "func (s *MockSweeperStore) NotifyPublishTx(tx *wire.MsgTx) error {\n\ttxHash := tx.TxHash()\n\ts.ourTxes[txHash] = struct{}{}\n\ts.lastTx = tx\n\n\treturn nil\n}\n\n// GetLastPublishedTx returns the last tx that we called NotifyPublishTx\n// for.",
      "length": 158,
      "tokens": 24,
      "embedding": []
    },
    {
      "slug": "func (s *MockSweeperStore) GetLastPublishedTx() (*wire.MsgTx, error) {",
      "content": "func (s *MockSweeperStore) GetLastPublishedTx() (*wire.MsgTx, error) {\n\treturn s.lastTx, nil\n}\n\n// ListSweeps lists all the sweeps we have successfully published.",
      "length": 88,
      "tokens": 14,
      "embedding": []
    },
    {
      "slug": "func (s *MockSweeperStore) ListSweeps() ([]chainhash.Hash, error) {",
      "content": "func (s *MockSweeperStore) ListSweeps() ([]chainhash.Hash, error) {\n\tvar txns []chainhash.Hash\n\tfor tx := range s.ourTxes {\n\t\ttxns = append(txns, tx)\n\t}\n\n\treturn txns, nil\n}\n\n// Compile-time constraint to ensure MockSweeperStore implements SweeperStore.\nvar _ SweeperStore = (*MockSweeperStore)(nil)\n",
      "length": 222,
      "tokens": 31,
      "embedding": []
    }
  ]
}