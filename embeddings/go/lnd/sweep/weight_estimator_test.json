{
  "filepath": "../implementations/go/lnd/sweep/weight_estimator_test.go",
  "package": "sweep",
  "sections": [
    {
      "slug": "func TestWeightEstimator(t *testing.T) {",
      "content": "func TestWeightEstimator(t *testing.T) {\n\ttestFeeRate := chainfee.SatPerKWeight(20000)\n\n\tw := newWeightEstimator(testFeeRate)\n\n\t// Add an input without unconfirmed parent tx.\n\tinput1 := input.MakeBaseInput(\n\t\t&wire.OutPoint{}, input.CommitmentAnchor,\n\t\t&input.SignDescriptor{}, 0, nil,\n\t)\n\n\trequire.NoError(t, w.add(&input1))\n\n\t// The expectations is that this input is added.\n\tconst expectedWeight1 = 322\n\trequire.Equal(t, expectedWeight1, w.weight())\n\trequire.Equal(t, testFeeRate.FeeForWeight(expectedWeight1), w.fee())\n\n\t// Define a parent transaction that pays a fee of 30000 sat/kw.\n\tparentTxHighFee := &input.TxInfo{\n\t\tWeight: 100,\n\t\tFee:    3000,\n\t}\n\n\t// Add an output of the parent tx above.\n\tinput2 := input.MakeBaseInput(\n\t\t&wire.OutPoint{}, input.CommitmentAnchor,\n\t\t&input.SignDescriptor{}, 0,\n\t\tparentTxHighFee,\n\t)\n\n\trequire.NoError(t, w.add(&input2))\n\n\t// Pay for parent isn't possible because the parent pays a higher fee\n\t// rate than the child. We expect no additional fee on the child.\n\tconst expectedWeight2 = expectedWeight1 + 280\n\trequire.Equal(t, expectedWeight2, w.weight())\n\trequire.Equal(t, testFeeRate.FeeForWeight(expectedWeight2), w.fee())\n\n\t// Define a parent transaction that pays a fee of 10000 sat/kw.\n\tparentTxLowFee := &input.TxInfo{\n\t\tWeight: 100,\n\t\tFee:    1000,\n\t}\n\n\t// Add an output of the low-fee parent tx above.\n\tinput3 := input.MakeBaseInput(\n\t\t&wire.OutPoint{}, input.CommitmentAnchor,\n\t\t&input.SignDescriptor{}, 0,\n\t\tparentTxLowFee,\n\t)\n\trequire.NoError(t, w.add(&input3))\n\n\t// Expect the weight to increase because of the third input.\n\tconst expectedWeight3 = expectedWeight2 + 280\n\trequire.Equal(t, expectedWeight3, w.weight())\n\n\t// Expect the fee to cover the child and the parent transaction at 20\n\t// sat/kw after subtraction of the fee that was already paid by the\n\t// parent.\n\texpectedFee := testFeeRate.FeeForWeight(\n\t\texpectedWeight3+parentTxLowFee.Weight,\n\t) - parentTxLowFee.Fee\n\n\trequire.Equal(t, expectedFee, w.fee())\n}\n\n// TestWeightEstimatorAddOutput tests that adding the raw P2WKH output to the\n// estimator yield the same result as an estimated add.",
      "length": 2003,
      "tokens": 244,
      "embedding": []
    },
    {
      "slug": "func TestWeightEstimatorAddOutput(t *testing.T) {",
      "content": "func TestWeightEstimatorAddOutput(t *testing.T) {\n\ttestFeeRate := chainfee.SatPerKWeight(20000)\n\n\tp2wkhAddr, err := btcutil.NewAddressWitnessPubKeyHash(\n\t\tmake([]byte, 20), &chaincfg.MainNetParams,\n\t)\n\trequire.NoError(t, err)\n\n\tp2wkhScript, err := txscript.PayToAddrScript(p2wkhAddr)\n\trequire.NoError(t, err)\n\n\t// Create two estimators, add the raw P2WKH out to one.\n\ttxOut := &wire.TxOut{\n\t\tPkScript: p2wkhScript,\n\t\tValue:    10000,\n\t}\n\n\tw1 := newWeightEstimator(testFeeRate)\n\tw1.addOutput(txOut)\n\n\tw2 := newWeightEstimator(testFeeRate)\n\tw2.addP2WKHOutput()\n\n\t// Estimate hhould be the same.\n\trequire.Equal(t, w1.weight(), w2.weight())\n}\n",
      "length": 564,
      "tokens": 56,
      "embedding": []
    }
  ]
}