{
  "filepath": "../implementations/go/lnd/sweep/weight_estimator.go",
  "package": "sweep",
  "sections": [
    {
      "slug": "type weightEstimator struct {",
      "content": "type weightEstimator struct {\n\testimator     input.TxWeightEstimator\n\tfeeRate       chainfee.SatPerKWeight\n\tparents       map[chainhash.Hash]struct{}\n\tparentsFee    btcutil.Amount\n\tparentsWeight int64\n}\n\n// newWeightEstimator instantiates a new sweeper weight estimator.",
      "length": 233,
      "tokens": 19,
      "embedding": []
    },
    {
      "slug": "func newWeightEstimator(feeRate chainfee.SatPerKWeight) *weightEstimator {",
      "content": "func newWeightEstimator(feeRate chainfee.SatPerKWeight) *weightEstimator {\n\treturn &weightEstimator{\n\t\tfeeRate: feeRate,\n\t\tparents: make(map[chainhash.Hash]struct{}),\n\t}\n}\n\n// add adds the weight of the given input to the weight estimate.",
      "length": 157,
      "tokens": 21,
      "embedding": []
    },
    {
      "slug": "func (w *weightEstimator) add(inp input.Input) error {",
      "content": "func (w *weightEstimator) add(inp input.Input) error {\n\t// If there is a parent tx, add the parent's fee and weight.\n\tw.tryAddParent(inp)\n\n\twt := inp.WitnessType()\n\n\treturn wt.AddWeightEstimation(&w.estimator)\n}\n\n// tryAddParent examines the input and updates parent tx totals if required for\n// cpfp.",
      "length": 237,
      "tokens": 35,
      "embedding": []
    },
    {
      "slug": "func (w *weightEstimator) tryAddParent(inp input.Input) {",
      "content": "func (w *weightEstimator) tryAddParent(inp input.Input) {\n\t// Get unconfirmed parent info from the input.\n\tunconfParent := inp.UnconfParent()\n\n\t// If there is no parent, there is nothing to add.\n\tif unconfParent == nil {\n\t\treturn\n\t}\n\n\t// If we've already accounted for the parent tx, don't do it\n\t// again. This can happens when two outputs of the parent tx are\n\t// included in the same sweep tx.\n\tparentHash := inp.OutPoint().Hash\n\tif _, ok := w.parents[parentHash]; ok {\n\t\treturn\n\t}\n\n\t// Calculate parent fee rate.\n\tparentFeeRate := chainfee.SatPerKWeight(unconfParent.Fee) * 1000 /\n\t\tchainfee.SatPerKWeight(unconfParent.Weight)\n\n\t// Ignore parents that pay at least the fee rate of this transaction.\n\t// Parent pays for child is not happening.\n\tif parentFeeRate >= w.feeRate {\n\t\treturn\n\t}\n\n\t// Include parent.\n\tw.parents[parentHash] = struct{}{}\n\tw.parentsFee += unconfParent.Fee\n\tw.parentsWeight += unconfParent.Weight\n}\n\n// addP2WKHOutput updates the weight estimate to account for an additional\n// native P2WKH output.",
      "length": 933,
      "tokens": 141,
      "embedding": []
    },
    {
      "slug": "func (w *weightEstimator) addP2WKHOutput() {",
      "content": "func (w *weightEstimator) addP2WKHOutput() {\n\tw.estimator.AddP2WKHOutput()\n}\n\n// addP2TROutput updates the weight estimate to account for an additional native\n// SegWit v1 P2TR output.",
      "length": 135,
      "tokens": 19,
      "embedding": []
    },
    {
      "slug": "func (w *weightEstimator) addP2TROutput() {",
      "content": "func (w *weightEstimator) addP2TROutput() {\n\tw.estimator.AddP2TROutput()\n}\n\n// addP2WSHOutput updates the weight estimate to account for an additional\n// segwit v0 P2WSH output.",
      "length": 129,
      "tokens": 18,
      "embedding": []
    },
    {
      "slug": "func (w *weightEstimator) addP2WSHOutput() {",
      "content": "func (w *weightEstimator) addP2WSHOutput() {\n\tw.estimator.AddP2WSHOutput()\n}\n\n// addOutput updates the weight estimate to account for the known\n// output given.",
      "length": 111,
      "tokens": 16,
      "embedding": []
    },
    {
      "slug": "func (w *weightEstimator) addOutput(txOut *wire.TxOut) {",
      "content": "func (w *weightEstimator) addOutput(txOut *wire.TxOut) {\n\tw.estimator.AddTxOutput(txOut)\n}\n\n// weight gets the estimated weight of the transaction.",
      "length": 87,
      "tokens": 11,
      "embedding": []
    },
    {
      "slug": "func (w *weightEstimator) weight() int {",
      "content": "func (w *weightEstimator) weight() int {\n\treturn w.estimator.Weight()\n}\n\n// fee returns the tx fee to use for the aggregated inputs and outputs, taking\n// into account unconfirmed parent transactions (cpfp).",
      "length": 162,
      "tokens": 25,
      "embedding": []
    },
    {
      "slug": "func (w *weightEstimator) fee() btcutil.Amount {",
      "content": "func (w *weightEstimator) fee() btcutil.Amount {\n\t// Calculate fee and weight for just this tx.\n\tchildWeight := int64(w.estimator.Weight())\n\n\t// Add combined weight of unconfirmed parent txes.\n\ttotalWeight := childWeight + w.parentsWeight\n\n\t// Subtract fee already paid by parents.\n\tfee := w.feeRate.FeeForWeight(totalWeight) - w.parentsFee\n\n\t// Clamp the fee to what would be required if no parent txes were paid\n\t// for. This is to make sure no rounding errors can get us into trouble.\n\tchildFee := w.feeRate.FeeForWeight(childWeight)\n\tif childFee > fee {\n\t\tfee = childFee\n\t}\n\n\treturn fee\n}\n",
      "length": 526,
      "tokens": 82,
      "embedding": []
    }
  ]
}