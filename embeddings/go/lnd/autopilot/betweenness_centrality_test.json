{
  "filepath": "../implementations/go/lnd/autopilot/betweenness_centrality_test.go",
  "package": "autopilot",
  "sections": [
    {
      "slug": "func TestBetweennessCentralityMetricConstruction(t *testing.T) {",
      "content": "func TestBetweennessCentralityMetricConstruction(t *testing.T) {\n\tfailing := []int{-1, 0}\n\tok := []int{1, 10}\n\n\tfor _, workers := range failing {\n\t\tm, err := NewBetweennessCentralityMetric(workers)\n\t\trequire.Error(\n\t\t\tt, err, \"construction must fail with <= 0 workers\",\n\t\t)\n\t\trequire.Nil(t, m)\n\t}\n\n\tfor _, workers := range ok {\n\t\tm, err := NewBetweennessCentralityMetric(workers)\n\t\trequire.NoError(\n\t\t\tt, err, \"construction must succeed with >= 1 workers\",\n\t\t)\n\t\trequire.NotNil(t, m)\n\t}\n}\n\n// Tests that empty graph results in empty centrality result.",
      "length": 466,
      "tokens": 69,
      "embedding": []
    },
    {
      "slug": "func TestBetweennessCentralityEmptyGraph(t *testing.T) {",
      "content": "func TestBetweennessCentralityEmptyGraph(t *testing.T) {\n\tcentralityMetric, err := NewBetweennessCentralityMetric(1)\n\trequire.NoError(\n\t\tt, err,\n\t\t\"construction must succeed with positive number of workers\",\n\t)\n\n\tfor _, chanGraph := range chanGraphs {\n\t\tchanGraph := chanGraph\n\t\tgraph, err := chanGraph.genFunc(t)\n\t\trequire.NoError(t, err, \"unable to create graph\")\n\n\t\tsuccess := t.Run(chanGraph.name, func(t1 *testing.T) {\n\t\t\terr = centralityMetric.Refresh(graph)\n\t\t\trequire.NoError(t1, err)\n\n\t\t\tcentrality := centralityMetric.GetMetric(false)\n\t\t\trequire.Equal(t1, 0, len(centrality))\n\n\t\t\tcentrality = centralityMetric.GetMetric(true)\n\t\t\trequire.Equal(t1, 0, len(centrality))\n\t\t})\n\t\tif !success {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\n// Test betweenness centrality calculating using an example graph.",
      "length": 699,
      "tokens": 76,
      "embedding": []
    },
    {
      "slug": "func TestBetweennessCentralityWithNonEmptyGraph(t *testing.T) {",
      "content": "func TestBetweennessCentralityWithNonEmptyGraph(t *testing.T) {\n\tworkers := []int{1, 3, 9, 100}\n\n\ttests := []struct {\n\t\tnormalize  bool\n\t\tcentrality []float64\n\t}{\n\t\t{\n\t\t\tnormalize:  true,\n\t\t\tcentrality: normalizedTestGraphCentrality,\n\t\t},\n\t\t{\n\t\t\tnormalize:  false,\n\t\t\tcentrality: testGraphCentrality,\n\t\t},\n\t}\n\n\tfor _, numWorkers := range workers {\n\t\tfor _, chanGraph := range chanGraphs {\n\t\t\tchanGraph := chanGraph\n\t\t\tnumWorkers := numWorkers\n\t\t\tgraph, err := chanGraph.genFunc(t)\n\t\t\trequire.NoError(t, err, \"unable to create graph\")\n\n\t\t\ttestName := fmt.Sprintf(\n\t\t\t\t\"%v %d workers\", chanGraph.name, numWorkers,\n\t\t\t)\n\n\t\t\tsuccess := t.Run(testName, func(t1 *testing.T) {\n\t\t\t\tmetric, err := NewBetweennessCentralityMetric(\n\t\t\t\t\tnumWorkers,\n\t\t\t\t)\n\t\t\t\trequire.NoError(\n\t\t\t\t\tt1, err,\n\t\t\t\t\t\"construction must succeed with \"+\n\t\t\t\t\t\t\"positive number of workers\",\n\t\t\t\t)\n\n\t\t\t\tgraphNodes := buildTestGraph(\n\t\t\t\t\tt1, graph, centralityTestGraph,\n\t\t\t\t)\n\n\t\t\t\terr = metric.Refresh(graph)\n\t\t\t\trequire.NoError(t1, err)\n\n\t\t\t\tfor _, expected := range tests {\n\t\t\t\t\texpected := expected\n\t\t\t\t\tcentrality := metric.GetMetric(\n\t\t\t\t\t\texpected.normalize,\n\t\t\t\t\t)\n\n\t\t\t\t\trequire.Equal(\n\t\t\t\t\t\tt1, centralityTestGraph.nodes,\n\t\t\t\t\t\tlen(centrality),\n\t\t\t\t\t)\n\n\t\t\t\t\tfor i, c := range expected.centrality {\n\t\t\t\t\t\tnodeID := NewNodeID(\n\t\t\t\t\t\t\tgraphNodes[i],\n\t\t\t\t\t\t)\n\t\t\t\t\t\tresult, ok := centrality[nodeID]\n\t\t\t\t\t\trequire.True(t1, ok)\n\t\t\t\t\t\trequire.Equal(t1, c, result)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tif !success {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "length": 1352,
      "tokens": 156,
      "embedding": []
    }
  ]
}