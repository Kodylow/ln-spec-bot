{
  "filepath": "../implementations/go/lnd/autopilot/simple_graph_test.go",
  "package": "autopilot",
  "sections": [
    {
      "slug": "func NewTestSimpleGraph(graph testGraphDesc) SimpleGraph {",
      "content": "func NewTestSimpleGraph(graph testGraphDesc) SimpleGraph {\n\t// We convert the test graph description into an adjacency list.\n\tadjList := make([][]int, graph.nodes)\n\tfor node, neighbors := range graph.edges {\n\t\tfor _, neighbor := range neighbors {\n\t\t\tadjList[node] = append(adjList[node], neighbor)\n\t\t\tadjList[neighbor] = append(adjList[neighbor], node)\n\t\t}\n\t}\n\n\treturn SimpleGraph{Adj: adjList}\n}\n",
      "length": 327,
      "tokens": 43,
      "embedding": []
    },
    {
      "slug": "func TestShortestPathLengths(t *testing.T) {",
      "content": "func TestShortestPathLengths(t *testing.T) {\n\tsimpleGraph := NewTestSimpleGraph(centralityTestGraph)\n\n\t// Test the shortest path lengths from node 0 to all other nodes.\n\tshortestPathLengths := simpleGraph.shortestPathLengths(0)\n\trequire.Equal(t, shortestPathLengths, testShortestPathLengths)\n}\n",
      "length": 243,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func TestEccentricities(t *testing.T) {",
      "content": "func TestEccentricities(t *testing.T) {\n\tsimpleGraph := NewTestSimpleGraph(centralityTestGraph)\n\n\t// Test the node eccentricities for all nodes.\n\tnodes := make([]int, len(simpleGraph.Adj))\n\tfor a := range nodes {\n\t\tnodes[a] = a\n\t}\n\tnodeEccentricities := simpleGraph.nodeEccentricities(nodes)\n\trequire.Equal(t, nodeEccentricities, testNodeEccentricities)\n}\n",
      "length": 306,
      "tokens": 32,
      "embedding": []
    },
    {
      "slug": "func TestDiameterExact(t *testing.T) {",
      "content": "func TestDiameterExact(t *testing.T) {\n\tsimpleGraph := NewTestSimpleGraph(centralityTestGraph)\n\n\t// Test the diameter in a brute-force manner.\n\tdiameter := simpleGraph.Diameter()\n\trequire.Equal(t, uint32(5), diameter)\n}\n",
      "length": 175,
      "tokens": 18,
      "embedding": []
    },
    {
      "slug": "func TestDiameterCutoff(t *testing.T) {",
      "content": "func TestDiameterCutoff(t *testing.T) {\n\tsimpleGraph := NewTestSimpleGraph(centralityTestGraph)\n\n\t// Test the diameter by cutting out the inside of the graph.\n\tdiameter := simpleGraph.DiameterRadialCutoff()\n\trequire.Equal(t, uint32(5), diameter)\n}\n",
      "length": 202,
      "tokens": 22,
      "embedding": []
    },
    {
      "slug": "func BenchmarkShortestPathOpt(b *testing.B) {",
      "content": "func BenchmarkShortestPathOpt(b *testing.B) {\n\t// TODO: a method that generates a huge graph is needed\n\tsimpleGraph := NewTestSimpleGraph(centralityTestGraph)\n\n\tfor n := 0; n < b.N; n++ {\n\t\t_ = simpleGraph.shortestPathLengths(0)\n\t}\n}\n",
      "length": 181,
      "tokens": 28,
      "embedding": []
    }
  ]
}