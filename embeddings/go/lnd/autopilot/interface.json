{
  "filepath": "../implementations/go/lnd/autopilot/interface.go",
  "package": "autopilot",
  "sections": [
    {
      "slug": "type Node interface {",
      "content": "type Node interface {\n\t// PubKey is the identity public key of the node. This will be used to\n\t// attempt to target a node for channel opening by the main autopilot\n\t// agent. The key will be returned in serialized compressed format.\n\tPubKey() [33]byte\n\n\t// Addrs returns a slice of publicly reachable public TCP addresses\n\t// that the peer is known to be listening on.\n\tAddrs() []net.Addr\n\n\t// ForEachChannel is a higher-order function that will be used to\n\t// iterate through all edges emanating from/to the target node. For\n\t// each active channel, this function should be called with the\n\t// populated ChannelEdge that describes the active channel.\n\tForEachChannel(func(ChannelEdge) error) error\n}\n\n// LocalChannel is a simple struct which contains relevant details of a\n// particular channel the local node has. The fields in this struct may be used\n// as signals for various AttachmentHeuristic implementations.",
      "length": 877,
      "tokens": 143,
      "embedding": []
    },
    {
      "slug": "type LocalChannel struct {",
      "content": "type LocalChannel struct {\n\t// ChanID is the short channel ID for this channel as defined within\n\t// BOLT-0007.\n\tChanID lnwire.ShortChannelID\n\n\t// Balance is the local balance of the channel expressed in satoshis.\n\tBalance btcutil.Amount\n\n\t// Node is the peer that this channel has been established with.\n\tNode NodeID\n\n\t// TODO(roasbeef): also add other traits?\n\t//  * fee, timelock, etc\n}\n\n// ChannelEdge is a struct that holds details concerning a channel, but also\n// contains a reference to the Node that this channel connects to as a directed\n// edge within the graph. The existence of this reference to the connected node\n// will allow callers to traverse the graph in an object-oriented manner.",
      "length": 657,
      "tokens": 111,
      "embedding": []
    },
    {
      "slug": "type ChannelEdge struct {",
      "content": "type ChannelEdge struct {\n\t// ChanID is the short channel ID for this channel as defined within\n\t// BOLT-0007.\n\tChanID lnwire.ShortChannelID\n\n\t// Capacity is the capacity of the channel expressed in satoshis.\n\tCapacity btcutil.Amount\n\n\t// Peer is the peer that this channel creates an edge to in the channel\n\t// graph.\n\tPeer Node\n}\n\n// ChannelGraph in an interface that represents a traversable channel graph.\n// The autopilot agent will use this interface as its source of graph traits in\n// order to make decisions concerning which channels should be opened, and to\n// whom.\n//\n// TODO(roasbeef): abstract??",
      "length": 566,
      "tokens": 95,
      "embedding": []
    },
    {
      "slug": "type ChannelGraph interface {",
      "content": "type ChannelGraph interface {\n\t// ForEachNode is a higher-order function that should be called once\n\t// for each connected node within the channel graph. If the passed\n\t// callback returns an error, then execution should be terminated.\n\tForEachNode(func(Node) error) error\n}\n\n// NodeScore is a tuple mapping a NodeID to a score indicating the preference\n// of opening a channel with it.",
      "length": 349,
      "tokens": 58,
      "embedding": []
    },
    {
      "slug": "type NodeScore struct {",
      "content": "type NodeScore struct {\n\t// NodeID is the serialized compressed pubkey of the node that is being\n\t// scored.\n\tNodeID NodeID\n\n\t// Score is the score given by the heuristic for opening a channel of\n\t// the given size to this node.\n\tScore float64\n}\n\n// AttachmentDirective describes a channel attachment proscribed by an\n// AttachmentHeuristic. It details to which node a channel should be created\n// to, and also the parameters which should be used in the channel creation.",
      "length": 436,
      "tokens": 76,
      "embedding": []
    },
    {
      "slug": "type AttachmentDirective struct {",
      "content": "type AttachmentDirective struct {\n\t// NodeID is the serialized compressed pubkey of the target node for\n\t// this attachment directive. It can be identified by its public key,\n\t// and therefore can be used along with a ChannelOpener implementation\n\t// to execute the directive.\n\tNodeID NodeID\n\n\t// ChanAmt is the size of the channel that should be opened, expressed\n\t// in satoshis.\n\tChanAmt btcutil.Amount\n\n\t// Addrs is a list of addresses that the target peer may be reachable\n\t// at.\n\tAddrs []net.Addr\n}\n\n// AttachmentHeuristic is one of the primary interfaces within this package.\n// Implementations of this interface will be used to implement a control system\n// which automatically regulates channels of a particular agent, attempting to\n// optimize channels opened/closed based on various heuristics. The purpose of\n// the interface is to allow an auto-pilot agent to decide if it needs more\n// channels, and if so, which exact channels should be opened.",
      "length": 906,
      "tokens": 151,
      "embedding": []
    },
    {
      "slug": "type AttachmentHeuristic interface {",
      "content": "type AttachmentHeuristic interface {\n\t// Name returns the name of this heuristic.\n\tName() string\n\n\t// NodeScores is a method that given the current channel graph and\n\t// current set of local channels, scores the given nodes according to\n\t// the preference of opening a channel of the given size with them. The\n\t// returned channel candidates maps the NodeID to a NodeScore for the\n\t// node.\n\t//\n\t// The returned scores will be in the range [0, 1.0], where 0 indicates\n\t// no improvement in connectivity if a channel is opened to this node,\n\t// while 1.0 is the maximum possible improvement in connectivity. The\n\t// implementation of this interface must return scores in this range to\n\t// properly allow the autopilot agent to make a reasonable choice based\n\t// on the score from multiple heuristics.\n\t//\n\t// NOTE: A NodeID not found in the returned map is implicitly given a\n\t// score of 0.\n\tNodeScores(g ChannelGraph, chans []LocalChannel,\n\t\tchanSize btcutil.Amount, nodes map[NodeID]struct{}) (\n\t\tmap[NodeID]*NodeScore, error)\n}\n\n// NodeMetric is a common interface for all graph metrics that are not\n// directly used as autopilot node scores but may be used in compositional\n// heuristics or statistical information exposed to users.",
      "length": 1174,
      "tokens": 197,
      "embedding": []
    },
    {
      "slug": "type NodeMetric interface {",
      "content": "type NodeMetric interface {\n\t// Name returns the unique name of this metric.\n\tName() string\n\n\t// Refresh refreshes the metric values based on the current graph.\n\tRefresh(graph ChannelGraph) error\n\n\t// GetMetric returns the latest value of this metric. Values in the\n\t// map are per node and can be in arbitrary domain. If normalize is\n\t// set to true, then the returned values are normalized to either\n\t// [0, 1] or [-1, 1] depending on the metric.\n\tGetMetric(normalize bool) map[NodeID]float64\n}\n\n// ScoreSettable is an interface that indicates that the scores returned by the\n// heuristic can be mutated by an external caller. The ExternalScoreAttachment\n// currently implements this interface, and so should any heuristic that is\n// using the ExternalScoreAttachment as a sub-heuristic, or keeps their own\n// internal list of mutable scores, to allow access to setting the internal\n// scores.",
      "length": 849,
      "tokens": 139,
      "embedding": []
    },
    {
      "slug": "type ScoreSettable interface {",
      "content": "type ScoreSettable interface {\n\t// SetNodeScores is used to set the internal map from NodeIDs to\n\t// scores. The passed scores must be in the range [0, 1.0]. The first\n\t// parameter is the name of the targeted heuristic, to allow\n\t// recursively target specific sub-heuristics. The returned boolean\n\t// indicates whether the targeted heuristic was found.\n\tSetNodeScores(string, map[NodeID]float64) (bool, error)\n}\n\nvar (\n\t// availableHeuristics holds all heuristics possible to combine for use\n\t// with the autopilot agent.\n\tavailableHeuristics = []AttachmentHeuristic{\n\t\tNewPrefAttachment(),\n\t\tNewExternalScoreAttachment(),\n\t\tNewTopCentrality(),\n\t}\n\n\t// AvailableHeuristics is a map that holds the name of available\n\t// heuristics to the actual heuristic for easy lookup. It will be\n\t// filled during init().\n\tAvailableHeuristics = make(map[string]AttachmentHeuristic)\n)\n",
      "length": 819,
      "tokens": 113,
      "embedding": []
    },
    {
      "slug": "func init() {",
      "content": "func init() {\n\t// Fill the map from heuristic names to available heuristics for easy\n\t// lookup.\n\tfor _, h := range availableHeuristics {\n\t\tAvailableHeuristics[h.Name()] = h\n\t}\n}\n\n// ChannelController is a simple interface that allows an auto-pilot agent to\n// open a channel within the graph to a target peer, close targeted channels,\n// or add/remove funds from existing channels via a splice in/out mechanisms.",
      "length": 390,
      "tokens": 64,
      "embedding": []
    },
    {
      "slug": "type ChannelController interface {",
      "content": "type ChannelController interface {\n\t// OpenChannel opens a channel to a target peer, using at most amt\n\t// funds. This means that the resulting channel capacity might be\n\t// slightly less to account for fees. This function should un-block\n\t// immediately after the funding transaction that marks the channel\n\t// open has been broadcast.\n\tOpenChannel(target *btcec.PublicKey, amt btcutil.Amount) error\n\n\t// CloseChannel attempts to close out the target channel.\n\t//\n\t// TODO(roasbeef): add force option?\n\tCloseChannel(chanPoint *wire.OutPoint) error\n}\n",
      "length": 504,
      "tokens": 74,
      "embedding": []
    }
  ]
}