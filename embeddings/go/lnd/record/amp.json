{
  "filepath": "../implementations/go/lnd/record/amp.go",
  "package": "record",
  "sections": [
    {
      "slug": "type AMP struct {",
      "content": "type AMP struct {\n\trootShare  [32]byte\n\tsetID      [32]byte\n\tchildIndex uint32\n}\n\n// NewAMP generate a new AMP record with the given root_share, set_id, and\n// child_index.",
      "length": 148,
      "tokens": 22,
      "embedding": []
    },
    {
      "slug": "func NewAMP(rootShare, setID [32]byte, childIndex uint32) *AMP {",
      "content": "func NewAMP(rootShare, setID [32]byte, childIndex uint32) *AMP {\n\treturn &AMP{\n\t\trootShare:  rootShare,\n\t\tsetID:      setID,\n\t\tchildIndex: childIndex,\n\t}\n}\n\n// RootShare returns the root share contained in the AMP record.",
      "length": 149,
      "tokens": 21,
      "embedding": []
    },
    {
      "slug": "func (a *AMP) RootShare() [32]byte {",
      "content": "func (a *AMP) RootShare() [32]byte {\n\treturn a.rootShare\n}\n\n// SetID returns the set id contained in the AMP record.",
      "length": 76,
      "tokens": 14,
      "embedding": []
    },
    {
      "slug": "func (a *AMP) SetID() [32]byte {",
      "content": "func (a *AMP) SetID() [32]byte {\n\treturn a.setID\n}\n\n// ChildIndex returns the child index contained in the AMP record.",
      "length": 82,
      "tokens": 14,
      "embedding": []
    },
    {
      "slug": "func (a *AMP) ChildIndex() uint32 {",
      "content": "func (a *AMP) ChildIndex() uint32 {\n\treturn a.childIndex\n}\n\n// AMPEncoder writes the AMP record to the provided io.Writer.",
      "length": 83,
      "tokens": 13,
      "embedding": []
    },
    {
      "slug": "func AMPEncoder(w io.Writer, val interface{}, buf *[8]byte) error {",
      "content": "func AMPEncoder(w io.Writer, val interface{}, buf *[8]byte) error {\n\tif v, ok := val.(*AMP); ok {\n\t\tif err := tlv.EBytes32(w, &v.rootShare, buf); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err := tlv.EBytes32(w, &v.setID, buf); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn tlv.ETUint32T(w, v.childIndex, buf)\n\t}\n\treturn tlv.NewTypeForEncodingErr(val, \"AMP\")\n}\n\nconst (\n\t// minAMPLength is the minimum length of a serialized AMP TLV record,\n\t// which occurs when the truncated encoding of child_index takes 0\n\t// bytes, leaving only the root_share and set_id.\n\tminAMPLength = 64\n\n\t// maxAMPLength is the maximum length of a serialized AMP TLV record,\n\t// which occurs when the truncated encoding of a child_index takes 2\n\t// bytes.\n\tmaxAMPLength = 68\n)\n\n// AMPDecoder reads the AMP record from the provided io.Reader.",
      "length": 712,
      "tokens": 118,
      "embedding": []
    },
    {
      "slug": "func AMPDecoder(r io.Reader, val interface{}, buf *[8]byte, l uint64) error {",
      "content": "func AMPDecoder(r io.Reader, val interface{}, buf *[8]byte, l uint64) error {\n\tif v, ok := val.(*AMP); ok && minAMPLength <= l && l <= maxAMPLength {\n\t\tif err := tlv.DBytes32(r, &v.rootShare, buf, 32); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err := tlv.DBytes32(r, &v.setID, buf, 32); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn tlv.DTUint32(r, &v.childIndex, buf, l-minAMPLength)\n\t}\n\treturn tlv.NewTypeForDecodingErr(val, \"AMP\", l, maxAMPLength)\n}\n\n// Record returns a tlv.Record that can be used to encode or decode this record.",
      "length": 432,
      "tokens": 70,
      "embedding": []
    },
    {
      "slug": "func (a *AMP) Record() tlv.Record {",
      "content": "func (a *AMP) Record() tlv.Record {\n\treturn tlv.MakeDynamicRecord(\n\t\tAMPOnionType, a, a.PayloadSize, AMPEncoder, AMPDecoder,\n\t)\n}\n\n// PayloadSize returns the size this record takes up in encoded form.",
      "length": 159,
      "tokens": 21,
      "embedding": []
    },
    {
      "slug": "func (a *AMP) PayloadSize() uint64 {",
      "content": "func (a *AMP) PayloadSize() uint64 {\n\treturn 32 + 32 + tlv.SizeTUint32(a.childIndex)\n}\n\n// String returns a human-readable description of the amp payload fields.",
      "length": 121,
      "tokens": 18,
      "embedding": []
    },
    {
      "slug": "func (a *AMP) String() string {",
      "content": "func (a *AMP) String() string {\n\tif a == nil {\n\t\treturn \"<nil>\"\n\t}\n\n\treturn fmt.Sprintf(\"root_share=%x set_id=%x child_index=%d\",\n\t\ta.rootShare, a.setID, a.childIndex)\n}\n",
      "length": 131,
      "tokens": 16,
      "embedding": []
    }
  ]
}