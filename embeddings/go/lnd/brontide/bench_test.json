{
  "filepath": "../implementations/go/lnd/brontide/bench_test.go",
  "package": "brontide",
  "sections": [
    {
      "slug": "func BenchmarkReadHeaderAndBody(t *testing.B) {",
      "content": "func BenchmarkReadHeaderAndBody(t *testing.B) {\n\t// Create a test connection, grabbing either side of the connection\n\t// into local variables. If the initial crypto handshake fails, then\n\t// we'll get a non-nil error here.\n\tlocalConn, remoteConn, err := establishTestConnection(t)\n\trequire.NoError(t, err, \"unable to establish test connection: %v\", err)\n\n\trand.Seed(time.Now().Unix())\n\n\tnoiseRemoteConn := remoteConn.(*Conn)\n\tnoiseLocalConn := localConn.(*Conn)\n\n\t// Now that we have a local and remote side (to set up the initial\n\t// handshake state, we'll have the remote side write out something\n\t// similar to a large message in the protocol.\n\tconst pktSize = 60_000\n\tmsg := bytes.Repeat([]byte(\"a\"), pktSize)\n\terr = noiseRemoteConn.WriteMessage(msg)\n\trequire.NoError(t, err, \"unable to write encrypted message: %v\", err)\n\n\tcipherHeader := noiseRemoteConn.noise.nextHeaderSend\n\tcipherMsg := noiseRemoteConn.noise.nextBodySend\n\n\tvar (\n\t\tbenchErr error\n\t\tmsgBuf   [math.MaxUint16]byte\n\t)\n\n\tt.ReportAllocs()\n\tt.ResetTimer()\n\n\tnonceValue := noiseLocalConn.noise.recvCipher.nonce\n\tfor i := 0; i < t.N; i++ {\n\t\tpktLen, benchErr := noiseLocalConn.noise.ReadHeader(\n\t\t\tbytes.NewReader(cipherHeader),\n\t\t)\n\t\trequire.NoError(\n\t\t\tt, benchErr, \"#%v: failed decryption: %v\", i, benchErr,\n\t\t)\n\t\t_, benchErr = noiseLocalConn.noise.ReadBody(\n\t\t\tbytes.NewReader(cipherMsg), msgBuf[:pktLen],\n\t\t)\n\t\trequire.NoError(\n\t\t\tt, benchErr, \"#%v: failed decryption: %v\", i, benchErr,\n\t\t)\n\n\t\t// We reset the internal nonce each time as otherwise, we'd\n\t\t// continue to increment it which would cause a decryption\n\t\t// failure.\n\t\tnoiseLocalConn.noise.recvCipher.nonce = nonceValue\n\t}\n\trequire.NoError(t, benchErr)\n}\n",
      "length": 1589,
      "tokens": 195,
      "embedding": []
    }
  ]
}