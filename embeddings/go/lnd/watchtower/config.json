{
  "filepath": "../implementations/go/lnd/watchtower/config.go",
  "package": "watchtower",
  "sections": [
    {
      "slug": "type Config struct {",
      "content": "type Config struct {\n\t// ChainHash identifies the chain that the watchtower will be monitoring\n\t// for breaches and that will be advertised in the server's Init message\n\t// to inbound clients.\n\tChainHash chainhash.Hash\n\n\t// BlockFetcher supports the ability to fetch blocks from the network by\n\t// hash.\n\tBlockFetcher lookout.BlockFetcher\n\n\t// DB provides access to persistent storage of sessions and state\n\t// updates uploaded by watchtower clients, and the ability to query for\n\t// breach hints when receiving new blocks.\n\tDB DB\n\n\t// EpochRegistrar supports the ability to register for events\n\t// corresponding to newly created blocks.\n\tEpochRegistrar lookout.EpochRegistrar\n\n\t// Net specifies the network type that the watchtower will use to listen\n\t// for client connections. Either a clear net or Tor are supported.\n\tNet tor.Net\n\n\t// NewAddress is used to generate reward addresses, where a cut of\n\t// successfully sent funds can be received.\n\tNewAddress func() (btcutil.Address, error)\n\n\t// NodeKeyECDH is the ECDH capable wrapper of the key to be used in\n\t// accepting new brontide connections.\n\tNodeKeyECDH keychain.SingleKeyECDH\n\n\t// PublishTx provides the ability to send a signed transaction to the\n\t// network.\n\t//\n\t// TODO(conner): replace with lnwallet.WalletController interface to\n\t// have stronger guarantees wrt. returned error types.\n\tPublishTx func(*wire.MsgTx, string) error\n\n\t// ListenAddrs specifies the listening addresses of the tower.\n\tListenAddrs []net.Addr\n\n\t// ExternalIPs specifies the addresses to which clients may connect to\n\t// the tower.\n\tExternalIPs []net.Addr\n\n\t// ReadTimeout specifies how long a client may go without sending a\n\t// message.\n\tReadTimeout time.Duration\n\n\t// WriteTimeout specifies how long a client may go without reading a\n\t// message from the other end, if the connection has stopped buffering\n\t// the server's replies.\n\tWriteTimeout time.Duration\n\n\t// TorController allows the watchtower to optionally setup an onion hidden\n\t// service.\n\tTorController *tor.Controller\n\n\t// WatchtowerKeyPath allows the watchtower to specify where the private key\n\t// for a watchtower hidden service should be stored.\n\tWatchtowerKeyPath string\n\n\t// EncryptKey will encrypt the Tor private key on disk.\n\tEncryptKey bool\n\n\t// KeyRing is the KeyRing to use when encrypting the Tor private key.\n\tKeyRing keychain.KeyRing\n\n\t// Type specifies the hidden service type (V2 or V3) that the watchtower\n\t// will create.\n\tType tor.OnionType\n}\n",
      "length": 2378,
      "tokens": 356,
      "embedding": []
    }
  ]
}