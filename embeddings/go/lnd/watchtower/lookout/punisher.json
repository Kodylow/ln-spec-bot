{
  "filepath": "../implementations/go/lnd/watchtower/lookout/punisher.go",
  "package": "lookout",
  "sections": [
    {
      "slug": "type PunisherConfig struct {",
      "content": "type PunisherConfig struct {\n\t// PublishTx provides the ability to send a signed transaction to the\n\t// network.\n\tPublishTx func(*wire.MsgTx, string) error\n\n\t// TODO(conner) add DB tracking and spend ntfn registration to see if\n\t// ours confirmed or not\n}\n\n// BreachPunisher handles the responsibility of constructing and broadcasting\n// justice transactions. Justice transactions are constructed from previously\n// accepted state updates uploaded by the watchtower's clients.",
      "length": 437,
      "tokens": 63,
      "embedding": []
    },
    {
      "slug": "type BreachPunisher struct {",
      "content": "type BreachPunisher struct {\n\tcfg *PunisherConfig\n}\n\n// NewBreachPunisher constructs a new BreachPunisher given a PunisherConfig.",
      "length": 97,
      "tokens": 12,
      "embedding": []
    },
    {
      "slug": "func NewBreachPunisher(cfg *PunisherConfig) *BreachPunisher {",
      "content": "func NewBreachPunisher(cfg *PunisherConfig) *BreachPunisher {\n\treturn &BreachPunisher{\n\t\tcfg: cfg,\n\t}\n}\n\n// Punish constructs a justice transaction given a JusticeDescriptor and\n// publishes is it to the network.",
      "length": 144,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (p *BreachPunisher) Punish(desc *JusticeDescriptor, quit <-chan struct{}) error {",
      "content": "func (p *BreachPunisher) Punish(desc *JusticeDescriptor, quit <-chan struct{}) error {\n\tjusticeTxn, err := desc.CreateJusticeTxn()\n\tif err != nil {\n\t\tlog.Errorf(\"Unable to create justice txn for \"+\n\t\t\t\"client=%s with breach-txid=%s: %v\",\n\t\t\tdesc.SessionInfo.ID, desc.BreachedCommitTx.TxHash(), err)\n\t\treturn err\n\t}\n\n\tlog.Infof(\"Publishing justice transaction for client=%s with txid=%s\",\n\t\tdesc.SessionInfo.ID, justiceTxn.TxHash())\n\n\tlabel := labels.MakeLabel(labels.LabelTypeJusticeTransaction, nil)\n\terr = p.cfg.PublishTx(justiceTxn, label)\n\tif err != nil {\n\t\tlog.Errorf(\"Unable to publish justice txn for client=%s\"+\n\t\t\t\"with breach-txid=%s: %v\",\n\t\t\tdesc.SessionInfo.ID, desc.BreachedCommitTx.TxHash(), err)\n\t\treturn err\n\t}\n\n\t// TODO(conner): register for spend and remove from db after\n\t// confirmation\n\n\treturn nil\n}\n",
      "length": 710,
      "tokens": 79,
      "embedding": []
    }
  ]
}