{
  "filepath": "../implementations/go/lnd/lnrpc/peersrpc/peers_grpc.pb.go",
  "package": "peersrpc",
  "sections": [
    {
      "slug": "type PeersClient interface {",
      "content": "type PeersClient interface {\n\t// lncli: peers updatenodeannouncement\n\t// UpdateNodeAnnouncement allows the caller to update the node parameters\n\t// and broadcasts a new version of the node announcement to its peers.\n\tUpdateNodeAnnouncement(ctx context.Context, in *NodeAnnouncementUpdateRequest, opts ...grpc.CallOption) (*NodeAnnouncementUpdateResponse, error)\n}\n",
      "length": 330,
      "tokens": 36,
      "embedding": []
    },
    {
      "slug": "type peersClient struct {",
      "content": "type peersClient struct {\n\tcc grpc.ClientConnInterface\n}\n",
      "length": 29,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func NewPeersClient(cc grpc.ClientConnInterface) PeersClient {",
      "content": "func NewPeersClient(cc grpc.ClientConnInterface) PeersClient {\n\treturn &peersClient{cc}\n}\n",
      "length": 25,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func (c *peersClient) UpdateNodeAnnouncement(ctx context.Context, in *NodeAnnouncementUpdateRequest, opts ...grpc.CallOption) (*NodeAnnouncementUpdateResponse, error) {",
      "content": "func (c *peersClient) UpdateNodeAnnouncement(ctx context.Context, in *NodeAnnouncementUpdateRequest, opts ...grpc.CallOption) (*NodeAnnouncementUpdateResponse, error) {\n\tout := new(NodeAnnouncementUpdateResponse)\n\terr := c.cc.Invoke(ctx, \"/peersrpc.Peers/UpdateNodeAnnouncement\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// PeersServer is the server API for Peers service.\n// All implementations must embed UnimplementedPeersServer\n// for forward compatibility",
      "length": 316,
      "tokens": 42,
      "embedding": []
    },
    {
      "slug": "type PeersServer interface {",
      "content": "type PeersServer interface {\n\t// lncli: peers updatenodeannouncement\n\t// UpdateNodeAnnouncement allows the caller to update the node parameters\n\t// and broadcasts a new version of the node announcement to its peers.\n\tUpdateNodeAnnouncement(context.Context, *NodeAnnouncementUpdateRequest) (*NodeAnnouncementUpdateResponse, error)\n\tmustEmbedUnimplementedPeersServer()\n}\n\n// UnimplementedPeersServer must be embedded to have forward compatible implementations.",
      "length": 422,
      "tokens": 43,
      "embedding": []
    },
    {
      "slug": "type UnimplementedPeersServer struct {",
      "content": "type UnimplementedPeersServer struct {\n}\n",
      "length": 1,
      "tokens": 1,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedPeersServer) UpdateNodeAnnouncement(context.Context, *NodeAnnouncementUpdateRequest) (*NodeAnnouncementUpdateResponse, error) {",
      "content": "func (UnimplementedPeersServer) UpdateNodeAnnouncement(context.Context, *NodeAnnouncementUpdateRequest) (*NodeAnnouncementUpdateResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method UpdateNodeAnnouncement not implemented\")\n}",
      "length": 97,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedPeersServer) mustEmbedUnimplementedPeersServer() {}",
      "content": "func (UnimplementedPeersServer) mustEmbedUnimplementedPeersServer() {}\n\n// UnsafePeersServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to PeersServer will\n// result in compilation errors.",
      "length": 203,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "type UnsafePeersServer interface {",
      "content": "type UnsafePeersServer interface {\n\tmustEmbedUnimplementedPeersServer()\n}\n",
      "length": 37,
      "tokens": 2,
      "embedding": []
    },
    {
      "slug": "func RegisterPeersServer(s grpc.ServiceRegistrar, srv PeersServer) {",
      "content": "func RegisterPeersServer(s grpc.ServiceRegistrar, srv PeersServer) {\n\ts.RegisterService(&Peers_ServiceDesc, srv)\n}\n",
      "length": 44,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func _Peers_UpdateNodeAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _Peers_UpdateNodeAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(NodeAnnouncementUpdateRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(PeersServer).UpdateNodeAnnouncement(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/peersrpc.Peers/UpdateNodeAnnouncement\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(PeersServer).UpdateNodeAnnouncement(ctx, req.(*NodeAnnouncementUpdateRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// Peers_ServiceDesc is the grpc.ServiceDesc for Peers service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar Peers_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"peersrpc.Peers\",\n\tHandlerType: (*PeersServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"UpdateNodeAnnouncement\",\n\t\t\tHandler:    _Peers_UpdateNodeAnnouncement_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"peersrpc/peers.proto\",\n}\n",
      "length": 984,
      "tokens": 102,
      "embedding": []
    }
  ]
}