{
  "filepath": "../implementations/go/lnd/lnrpc/walletunlocker_grpc.pb.go",
  "package": "lnrpc",
  "sections": [
    {
      "slug": "type WalletUnlockerClient interface {",
      "content": "type WalletUnlockerClient interface {\n\t// GenSeed is the first method that should be used to instantiate a new lnd\n\t// instance. This method allows a caller to generate a new aezeed cipher seed\n\t// given an optional passphrase. If provided, the passphrase will be necessary\n\t// to decrypt the cipherseed to expose the internal wallet seed.\n\t//\n\t// Once the cipherseed is obtained and verified by the user, the InitWallet\n\t// method should be used to commit the newly generated seed, and create the\n\t// wallet.\n\tGenSeed(ctx context.Context, in *GenSeedRequest, opts ...grpc.CallOption) (*GenSeedResponse, error)\n\t// InitWallet is used when lnd is starting up for the first time to fully\n\t// initialize the daemon and its internal wallet. At the very least a wallet\n\t// password must be provided. This will be used to encrypt sensitive material\n\t// on disk.\n\t//\n\t// In the case of a recovery scenario, the user can also specify their aezeed\n\t// mnemonic and passphrase. If set, then the daemon will use this prior state\n\t// to initialize its internal wallet.\n\t//\n\t// Alternatively, this can be used along with the GenSeed RPC to obtain a\n\t// seed, then present it to the user. Once it has been verified by the user,\n\t// the seed can be fed into this RPC in order to commit the new wallet.\n\tInitWallet(ctx context.Context, in *InitWalletRequest, opts ...grpc.CallOption) (*InitWalletResponse, error)\n\t// lncli: `unlock`\n\t// UnlockWallet is used at startup of lnd to provide a password to unlock\n\t// the wallet database.\n\tUnlockWallet(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*UnlockWalletResponse, error)\n\t// lncli: `changepassword`\n\t// ChangePassword changes the password of the encrypted wallet. This will\n\t// automatically unlock the wallet database if successful.\n\tChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)\n}\n",
      "length": 1851,
      "tokens": 286,
      "embedding": []
    },
    {
      "slug": "type walletUnlockerClient struct {",
      "content": "type walletUnlockerClient struct {\n\tcc grpc.ClientConnInterface\n}\n",
      "length": 29,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func NewWalletUnlockerClient(cc grpc.ClientConnInterface) WalletUnlockerClient {",
      "content": "func NewWalletUnlockerClient(cc grpc.ClientConnInterface) WalletUnlockerClient {\n\treturn &walletUnlockerClient{cc}\n}\n",
      "length": 34,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func (c *walletUnlockerClient) GenSeed(ctx context.Context, in *GenSeedRequest, opts ...grpc.CallOption) (*GenSeedResponse, error) {",
      "content": "func (c *walletUnlockerClient) GenSeed(ctx context.Context, in *GenSeedRequest, opts ...grpc.CallOption) (*GenSeedResponse, error) {\n\tout := new(GenSeedResponse)\n\terr := c.cc.Invoke(ctx, \"/lnrpc.WalletUnlocker/GenSeed\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n",
      "length": 155,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (c *walletUnlockerClient) InitWallet(ctx context.Context, in *InitWalletRequest, opts ...grpc.CallOption) (*InitWalletResponse, error) {",
      "content": "func (c *walletUnlockerClient) InitWallet(ctx context.Context, in *InitWalletRequest, opts ...grpc.CallOption) (*InitWalletResponse, error) {\n\tout := new(InitWalletResponse)\n\terr := c.cc.Invoke(ctx, \"/lnrpc.WalletUnlocker/InitWallet\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n",
      "length": 161,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (c *walletUnlockerClient) UnlockWallet(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*UnlockWalletResponse, error) {",
      "content": "func (c *walletUnlockerClient) UnlockWallet(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*UnlockWalletResponse, error) {\n\tout := new(UnlockWalletResponse)\n\terr := c.cc.Invoke(ctx, \"/lnrpc.WalletUnlocker/UnlockWallet\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n",
      "length": 165,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (c *walletUnlockerClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {",
      "content": "func (c *walletUnlockerClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {\n\tout := new(ChangePasswordResponse)\n\terr := c.cc.Invoke(ctx, \"/lnrpc.WalletUnlocker/ChangePassword\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// WalletUnlockerServer is the server API for WalletUnlocker service.\n// All implementations must embed UnimplementedWalletUnlockerServer\n// for forward compatibility",
      "length": 333,
      "tokens": 42,
      "embedding": []
    },
    {
      "slug": "type WalletUnlockerServer interface {",
      "content": "type WalletUnlockerServer interface {\n\t// GenSeed is the first method that should be used to instantiate a new lnd\n\t// instance. This method allows a caller to generate a new aezeed cipher seed\n\t// given an optional passphrase. If provided, the passphrase will be necessary\n\t// to decrypt the cipherseed to expose the internal wallet seed.\n\t//\n\t// Once the cipherseed is obtained and verified by the user, the InitWallet\n\t// method should be used to commit the newly generated seed, and create the\n\t// wallet.\n\tGenSeed(context.Context, *GenSeedRequest) (*GenSeedResponse, error)\n\t// InitWallet is used when lnd is starting up for the first time to fully\n\t// initialize the daemon and its internal wallet. At the very least a wallet\n\t// password must be provided. This will be used to encrypt sensitive material\n\t// on disk.\n\t//\n\t// In the case of a recovery scenario, the user can also specify their aezeed\n\t// mnemonic and passphrase. If set, then the daemon will use this prior state\n\t// to initialize its internal wallet.\n\t//\n\t// Alternatively, this can be used along with the GenSeed RPC to obtain a\n\t// seed, then present it to the user. Once it has been verified by the user,\n\t// the seed can be fed into this RPC in order to commit the new wallet.\n\tInitWallet(context.Context, *InitWalletRequest) (*InitWalletResponse, error)\n\t// lncli: `unlock`\n\t// UnlockWallet is used at startup of lnd to provide a password to unlock\n\t// the wallet database.\n\tUnlockWallet(context.Context, *UnlockWalletRequest) (*UnlockWalletResponse, error)\n\t// lncli: `changepassword`\n\t// ChangePassword changes the password of the encrypted wallet. This will\n\t// automatically unlock the wallet database if successful.\n\tChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)\n\tmustEmbedUnimplementedWalletUnlockerServer()\n}\n\n// UnimplementedWalletUnlockerServer must be embedded to have forward compatible implementations.",
      "length": 1865,
      "tokens": 281,
      "embedding": []
    },
    {
      "slug": "type UnimplementedWalletUnlockerServer struct {",
      "content": "type UnimplementedWalletUnlockerServer struct {\n}\n",
      "length": 1,
      "tokens": 1,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedWalletUnlockerServer) GenSeed(context.Context, *GenSeedRequest) (*GenSeedResponse, error) {",
      "content": "func (UnimplementedWalletUnlockerServer) GenSeed(context.Context, *GenSeedRequest) (*GenSeedResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GenSeed not implemented\")\n}",
      "length": 82,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedWalletUnlockerServer) InitWallet(context.Context, *InitWalletRequest) (*InitWalletResponse, error) {",
      "content": "func (UnimplementedWalletUnlockerServer) InitWallet(context.Context, *InitWalletRequest) (*InitWalletResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method InitWallet not implemented\")\n}",
      "length": 85,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedWalletUnlockerServer) UnlockWallet(context.Context, *UnlockWalletRequest) (*UnlockWalletResponse, error) {",
      "content": "func (UnimplementedWalletUnlockerServer) UnlockWallet(context.Context, *UnlockWalletRequest) (*UnlockWalletResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method UnlockWallet not implemented\")\n}",
      "length": 87,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedWalletUnlockerServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {",
      "content": "func (UnimplementedWalletUnlockerServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method ChangePassword not implemented\")\n}",
      "length": 89,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedWalletUnlockerServer) mustEmbedUnimplementedWalletUnlockerServer() {}",
      "content": "func (UnimplementedWalletUnlockerServer) mustEmbedUnimplementedWalletUnlockerServer() {}\n\n// UnsafeWalletUnlockerServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to WalletUnlockerServer will\n// result in compilation errors.",
      "length": 221,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "type UnsafeWalletUnlockerServer interface {",
      "content": "type UnsafeWalletUnlockerServer interface {\n\tmustEmbedUnimplementedWalletUnlockerServer()\n}\n",
      "length": 46,
      "tokens": 2,
      "embedding": []
    },
    {
      "slug": "func RegisterWalletUnlockerServer(s grpc.ServiceRegistrar, srv WalletUnlockerServer) {",
      "content": "func RegisterWalletUnlockerServer(s grpc.ServiceRegistrar, srv WalletUnlockerServer) {\n\ts.RegisterService(&WalletUnlocker_ServiceDesc, srv)\n}\n",
      "length": 53,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func _WalletUnlocker_GenSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _WalletUnlocker_GenSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GenSeedRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(WalletUnlockerServer).GenSeed(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/lnrpc.WalletUnlocker/GenSeed\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(WalletUnlockerServer).GenSeed(ctx, req.(*GenSeedRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n",
      "length": 446,
      "tokens": 51,
      "embedding": []
    },
    {
      "slug": "func _WalletUnlocker_InitWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _WalletUnlocker_InitWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(InitWalletRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(WalletUnlockerServer).InitWallet(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/lnrpc.WalletUnlocker/InitWallet\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(WalletUnlockerServer).InitWallet(ctx, req.(*InitWalletRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n",
      "length": 461,
      "tokens": 51,
      "embedding": []
    },
    {
      "slug": "func _WalletUnlocker_UnlockWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _WalletUnlocker_UnlockWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UnlockWalletRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(WalletUnlockerServer).UnlockWallet(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/lnrpc.WalletUnlocker/UnlockWallet\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(WalletUnlockerServer).UnlockWallet(ctx, req.(*UnlockWalletRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n",
      "length": 471,
      "tokens": 51,
      "embedding": []
    },
    {
      "slug": "func _WalletUnlocker_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _WalletUnlocker_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(ChangePasswordRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(WalletUnlockerServer).ChangePassword(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/lnrpc.WalletUnlocker/ChangePassword\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(WalletUnlockerServer).ChangePassword(ctx, req.(*ChangePasswordRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// WalletUnlocker_ServiceDesc is the grpc.ServiceDesc for WalletUnlocker service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar WalletUnlocker_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"lnrpc.WalletUnlocker\",\n\tHandlerType: (*WalletUnlockerServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GenSeed\",\n\t\t\tHandler:    _WalletUnlocker_GenSeed_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"InitWallet\",\n\t\t\tHandler:    _WalletUnlocker_InitWallet_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"UnlockWallet\",\n\t\t\tHandler:    _WalletUnlocker_UnlockWallet_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"ChangePassword\",\n\t\t\tHandler:    _WalletUnlocker_ChangePassword_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"walletunlocker.proto\",\n}\n",
      "length": 1256,
      "tokens": 120,
      "embedding": []
    }
  ]
}