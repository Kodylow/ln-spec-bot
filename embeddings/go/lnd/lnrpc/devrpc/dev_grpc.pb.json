{
  "filepath": "../implementations/go/lnd/lnrpc/devrpc/dev_grpc.pb.go",
  "package": "devrpc",
  "sections": [
    {
      "slug": "type DevClient interface {",
      "content": "type DevClient interface {\n\t// ImportGraph imports a ChannelGraph into the graph database. Should only be\n\t// used for development.\n\tImportGraph(ctx context.Context, in *lnrpc.ChannelGraph, opts ...grpc.CallOption) (*ImportGraphResponse, error)\n}\n",
      "length": 216,
      "tokens": 25,
      "embedding": []
    },
    {
      "slug": "type devClient struct {",
      "content": "type devClient struct {\n\tcc grpc.ClientConnInterface\n}\n",
      "length": 29,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func NewDevClient(cc grpc.ClientConnInterface) DevClient {",
      "content": "func NewDevClient(cc grpc.ClientConnInterface) DevClient {\n\treturn &devClient{cc}\n}\n",
      "length": 23,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func (c *devClient) ImportGraph(ctx context.Context, in *lnrpc.ChannelGraph, opts ...grpc.CallOption) (*ImportGraphResponse, error) {",
      "content": "func (c *devClient) ImportGraph(ctx context.Context, in *lnrpc.ChannelGraph, opts ...grpc.CallOption) (*ImportGraphResponse, error) {\n\tout := new(ImportGraphResponse)\n\terr := c.cc.Invoke(ctx, \"/devrpc.Dev/ImportGraph\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// DevServer is the server API for Dev service.\n// All implementations must embed UnimplementedDevServer\n// for forward compatibility",
      "length": 284,
      "tokens": 42,
      "embedding": []
    },
    {
      "slug": "type DevServer interface {",
      "content": "type DevServer interface {\n\t// ImportGraph imports a ChannelGraph into the graph database. Should only be\n\t// used for development.\n\tImportGraph(context.Context, *lnrpc.ChannelGraph) (*ImportGraphResponse, error)\n\tmustEmbedUnimplementedDevServer()\n}\n\n// UnimplementedDevServer must be embedded to have forward compatible implementations.",
      "length": 304,
      "tokens": 32,
      "embedding": []
    },
    {
      "slug": "type UnimplementedDevServer struct {",
      "content": "type UnimplementedDevServer struct {\n}\n",
      "length": 1,
      "tokens": 1,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedDevServer) ImportGraph(context.Context, *lnrpc.ChannelGraph) (*ImportGraphResponse, error) {",
      "content": "func (UnimplementedDevServer) ImportGraph(context.Context, *lnrpc.ChannelGraph) (*ImportGraphResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method ImportGraph not implemented\")\n}",
      "length": 86,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedDevServer) mustEmbedUnimplementedDevServer() {}",
      "content": "func (UnimplementedDevServer) mustEmbedUnimplementedDevServer() {}\n\n// UnsafeDevServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to DevServer will\n// result in compilation errors.",
      "length": 199,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "type UnsafeDevServer interface {",
      "content": "type UnsafeDevServer interface {\n\tmustEmbedUnimplementedDevServer()\n}\n",
      "length": 35,
      "tokens": 2,
      "embedding": []
    },
    {
      "slug": "func RegisterDevServer(s grpc.ServiceRegistrar, srv DevServer) {",
      "content": "func RegisterDevServer(s grpc.ServiceRegistrar, srv DevServer) {\n\ts.RegisterService(&Dev_ServiceDesc, srv)\n}\n",
      "length": 42,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func _Dev_ImportGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _Dev_ImportGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(lnrpc.ChannelGraph)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(DevServer).ImportGraph(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/devrpc.Dev/ImportGraph\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(DevServer).ImportGraph(ctx, req.(*lnrpc.ChannelGraph))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// Dev_ServiceDesc is the grpc.ServiceDesc for Dev service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar Dev_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"devrpc.Dev\",\n\tHandlerType: (*DevServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"ImportGraph\",\n\t\t\tHandler:    _Dev_ImportGraph_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"devrpc/dev.proto\",\n}\n",
      "length": 881,
      "tokens": 102,
      "embedding": []
    }
  ]
}