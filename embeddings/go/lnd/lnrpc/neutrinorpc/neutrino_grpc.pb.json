{
  "filepath": "../implementations/go/lnd/lnrpc/neutrinorpc/neutrino_grpc.pb.go",
  "package": "neutrinorpc",
  "sections": [
    {
      "slug": "type NeutrinoKitClient interface {",
      "content": "type NeutrinoKitClient interface {\n\t// Status returns the status of the light client neutrino instance,\n\t// along with height and hash of the best block, and a list of connected\n\t// peers.\n\tStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)\n\t// AddPeer adds a new peer that has already been connected to the server.\n\tAddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*AddPeerResponse, error)\n\t// DisconnectPeer disconnects a peer by target address. Both outbound and\n\t// inbound nodes will be searched for the target node. An error message will\n\t// be returned if the peer was not found.\n\tDisconnectPeer(ctx context.Context, in *DisconnectPeerRequest, opts ...grpc.CallOption) (*DisconnectPeerResponse, error)\n\t// IsBanned returns true if the peer is banned, otherwise false.\n\tIsBanned(ctx context.Context, in *IsBannedRequest, opts ...grpc.CallOption) (*IsBannedResponse, error)\n\t// GetBlockHeader returns a block header with a particular block hash.\n\tGetBlockHeader(ctx context.Context, in *GetBlockHeaderRequest, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error)\n\t// GetBlock returns a block with a particular block hash.\n\tGetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)\n\t// GetCFilter returns a compact filter from a block.\n\tGetCFilter(ctx context.Context, in *GetCFilterRequest, opts ...grpc.CallOption) (*GetCFilterResponse, error)\n\t// GetBlockHash returns the header hash of a block at a given height.\n\tGetBlockHash(ctx context.Context, in *GetBlockHashRequest, opts ...grpc.CallOption) (*GetBlockHashResponse, error)\n}\n",
      "length": 1605,
      "tokens": 195,
      "embedding": []
    },
    {
      "slug": "type neutrinoKitClient struct {",
      "content": "type neutrinoKitClient struct {\n\tcc grpc.ClientConnInterface\n}\n",
      "length": 29,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func NewNeutrinoKitClient(cc grpc.ClientConnInterface) NeutrinoKitClient {",
      "content": "func NewNeutrinoKitClient(cc grpc.ClientConnInterface) NeutrinoKitClient {\n\treturn &neutrinoKitClient{cc}\n}\n",
      "length": 31,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func (c *neutrinoKitClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {",
      "content": "func (c *neutrinoKitClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {\n\tout := new(StatusResponse)\n\terr := c.cc.Invoke(ctx, \"/neutrinorpc.NeutrinoKit/Status\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n",
      "length": 156,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (c *neutrinoKitClient) AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*AddPeerResponse, error) {",
      "content": "func (c *neutrinoKitClient) AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*AddPeerResponse, error) {\n\tout := new(AddPeerResponse)\n\terr := c.cc.Invoke(ctx, \"/neutrinorpc.NeutrinoKit/AddPeer\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n",
      "length": 158,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (c *neutrinoKitClient) DisconnectPeer(ctx context.Context, in *DisconnectPeerRequest, opts ...grpc.CallOption) (*DisconnectPeerResponse, error) {",
      "content": "func (c *neutrinoKitClient) DisconnectPeer(ctx context.Context, in *DisconnectPeerRequest, opts ...grpc.CallOption) (*DisconnectPeerResponse, error) {\n\tout := new(DisconnectPeerResponse)\n\terr := c.cc.Invoke(ctx, \"/neutrinorpc.NeutrinoKit/DisconnectPeer\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n",
      "length": 172,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (c *neutrinoKitClient) IsBanned(ctx context.Context, in *IsBannedRequest, opts ...grpc.CallOption) (*IsBannedResponse, error) {",
      "content": "func (c *neutrinoKitClient) IsBanned(ctx context.Context, in *IsBannedRequest, opts ...grpc.CallOption) (*IsBannedResponse, error) {\n\tout := new(IsBannedResponse)\n\terr := c.cc.Invoke(ctx, \"/neutrinorpc.NeutrinoKit/IsBanned\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n",
      "length": 160,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (c *neutrinoKitClient) GetBlockHeader(ctx context.Context, in *GetBlockHeaderRequest, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error) {",
      "content": "func (c *neutrinoKitClient) GetBlockHeader(ctx context.Context, in *GetBlockHeaderRequest, opts ...grpc.CallOption) (*GetBlockHeaderResponse, error) {\n\tout := new(GetBlockHeaderResponse)\n\terr := c.cc.Invoke(ctx, \"/neutrinorpc.NeutrinoKit/GetBlockHeader\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n",
      "length": 172,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (c *neutrinoKitClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {",
      "content": "func (c *neutrinoKitClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {\n\tout := new(GetBlockResponse)\n\terr := c.cc.Invoke(ctx, \"/neutrinorpc.NeutrinoKit/GetBlock\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n",
      "length": 160,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (c *neutrinoKitClient) GetCFilter(ctx context.Context, in *GetCFilterRequest, opts ...grpc.CallOption) (*GetCFilterResponse, error) {",
      "content": "func (c *neutrinoKitClient) GetCFilter(ctx context.Context, in *GetCFilterRequest, opts ...grpc.CallOption) (*GetCFilterResponse, error) {\n\tout := new(GetCFilterResponse)\n\terr := c.cc.Invoke(ctx, \"/neutrinorpc.NeutrinoKit/GetCFilter\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n",
      "length": 164,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (c *neutrinoKitClient) GetBlockHash(ctx context.Context, in *GetBlockHashRequest, opts ...grpc.CallOption) (*GetBlockHashResponse, error) {",
      "content": "func (c *neutrinoKitClient) GetBlockHash(ctx context.Context, in *GetBlockHashRequest, opts ...grpc.CallOption) (*GetBlockHashResponse, error) {\n\tout := new(GetBlockHashResponse)\n\terr := c.cc.Invoke(ctx, \"/neutrinorpc.NeutrinoKit/GetBlockHash\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// NeutrinoKitServer is the server API for NeutrinoKit service.\n// All implementations must embed UnimplementedNeutrinoKitServer\n// for forward compatibility",
      "length": 323,
      "tokens": 42,
      "embedding": []
    },
    {
      "slug": "type NeutrinoKitServer interface {",
      "content": "type NeutrinoKitServer interface {\n\t// Status returns the status of the light client neutrino instance,\n\t// along with height and hash of the best block, and a list of connected\n\t// peers.\n\tStatus(context.Context, *StatusRequest) (*StatusResponse, error)\n\t// AddPeer adds a new peer that has already been connected to the server.\n\tAddPeer(context.Context, *AddPeerRequest) (*AddPeerResponse, error)\n\t// DisconnectPeer disconnects a peer by target address. Both outbound and\n\t// inbound nodes will be searched for the target node. An error message will\n\t// be returned if the peer was not found.\n\tDisconnectPeer(context.Context, *DisconnectPeerRequest) (*DisconnectPeerResponse, error)\n\t// IsBanned returns true if the peer is banned, otherwise false.\n\tIsBanned(context.Context, *IsBannedRequest) (*IsBannedResponse, error)\n\t// GetBlockHeader returns a block header with a particular block hash.\n\tGetBlockHeader(context.Context, *GetBlockHeaderRequest) (*GetBlockHeaderResponse, error)\n\t// GetBlock returns a block with a particular block hash.\n\tGetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)\n\t// GetCFilter returns a compact filter from a block.\n\tGetCFilter(context.Context, *GetCFilterRequest) (*GetCFilterResponse, error)\n\t// GetBlockHash returns the header hash of a block at a given height.\n\tGetBlockHash(context.Context, *GetBlockHashRequest) (*GetBlockHashResponse, error)\n\tmustEmbedUnimplementedNeutrinoKitServer()\n}\n\n// UnimplementedNeutrinoKitServer must be embedded to have forward compatible implementations.",
      "length": 1485,
      "tokens": 174,
      "embedding": []
    },
    {
      "slug": "type UnimplementedNeutrinoKitServer struct {",
      "content": "type UnimplementedNeutrinoKitServer struct {\n}\n",
      "length": 1,
      "tokens": 1,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedNeutrinoKitServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {",
      "content": "func (UnimplementedNeutrinoKitServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method Status not implemented\")\n}",
      "length": 81,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedNeutrinoKitServer) AddPeer(context.Context, *AddPeerRequest) (*AddPeerResponse, error) {",
      "content": "func (UnimplementedNeutrinoKitServer) AddPeer(context.Context, *AddPeerRequest) (*AddPeerResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method AddPeer not implemented\")\n}",
      "length": 82,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedNeutrinoKitServer) DisconnectPeer(context.Context, *DisconnectPeerRequest) (*DisconnectPeerResponse, error) {",
      "content": "func (UnimplementedNeutrinoKitServer) DisconnectPeer(context.Context, *DisconnectPeerRequest) (*DisconnectPeerResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method DisconnectPeer not implemented\")\n}",
      "length": 89,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedNeutrinoKitServer) IsBanned(context.Context, *IsBannedRequest) (*IsBannedResponse, error) {",
      "content": "func (UnimplementedNeutrinoKitServer) IsBanned(context.Context, *IsBannedRequest) (*IsBannedResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method IsBanned not implemented\")\n}",
      "length": 83,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedNeutrinoKitServer) GetBlockHeader(context.Context, *GetBlockHeaderRequest) (*GetBlockHeaderResponse, error) {",
      "content": "func (UnimplementedNeutrinoKitServer) GetBlockHeader(context.Context, *GetBlockHeaderRequest) (*GetBlockHeaderResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetBlockHeader not implemented\")\n}",
      "length": 89,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedNeutrinoKitServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {",
      "content": "func (UnimplementedNeutrinoKitServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetBlock not implemented\")\n}",
      "length": 83,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedNeutrinoKitServer) GetCFilter(context.Context, *GetCFilterRequest) (*GetCFilterResponse, error) {",
      "content": "func (UnimplementedNeutrinoKitServer) GetCFilter(context.Context, *GetCFilterRequest) (*GetCFilterResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetCFilter not implemented\")\n}",
      "length": 85,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedNeutrinoKitServer) GetBlockHash(context.Context, *GetBlockHashRequest) (*GetBlockHashResponse, error) {",
      "content": "func (UnimplementedNeutrinoKitServer) GetBlockHash(context.Context, *GetBlockHashRequest) (*GetBlockHashResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetBlockHash not implemented\")\n}",
      "length": 87,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedNeutrinoKitServer) mustEmbedUnimplementedNeutrinoKitServer() {}",
      "content": "func (UnimplementedNeutrinoKitServer) mustEmbedUnimplementedNeutrinoKitServer() {}\n\n// UnsafeNeutrinoKitServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to NeutrinoKitServer will\n// result in compilation errors.",
      "length": 215,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "type UnsafeNeutrinoKitServer interface {",
      "content": "type UnsafeNeutrinoKitServer interface {\n\tmustEmbedUnimplementedNeutrinoKitServer()\n}\n",
      "length": 43,
      "tokens": 2,
      "embedding": []
    },
    {
      "slug": "func RegisterNeutrinoKitServer(s grpc.ServiceRegistrar, srv NeutrinoKitServer) {",
      "content": "func RegisterNeutrinoKitServer(s grpc.ServiceRegistrar, srv NeutrinoKitServer) {\n\ts.RegisterService(&NeutrinoKit_ServiceDesc, srv)\n}\n",
      "length": 50,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func _NeutrinoKit_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _NeutrinoKit_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(StatusRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(NeutrinoKitServer).Status(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/neutrinorpc.NeutrinoKit/Status\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(NeutrinoKitServer).Status(ctx, req.(*StatusRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n",
      "length": 438,
      "tokens": 51,
      "embedding": []
    },
    {
      "slug": "func _NeutrinoKit_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _NeutrinoKit_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(AddPeerRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(NeutrinoKitServer).AddPeer(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/neutrinorpc.NeutrinoKit/AddPeer\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(NeutrinoKitServer).AddPeer(ctx, req.(*AddPeerRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n",
      "length": 443,
      "tokens": 51,
      "embedding": []
    },
    {
      "slug": "func _NeutrinoKit_DisconnectPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _NeutrinoKit_DisconnectPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(DisconnectPeerRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(NeutrinoKitServer).DisconnectPeer(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/neutrinorpc.NeutrinoKit/DisconnectPeer\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(NeutrinoKitServer).DisconnectPeer(ctx, req.(*DisconnectPeerRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n",
      "length": 478,
      "tokens": 51,
      "embedding": []
    },
    {
      "slug": "func _NeutrinoKit_IsBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _NeutrinoKit_IsBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(IsBannedRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(NeutrinoKitServer).IsBanned(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/neutrinorpc.NeutrinoKit/IsBanned\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(NeutrinoKitServer).IsBanned(ctx, req.(*IsBannedRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n",
      "length": 448,
      "tokens": 51,
      "embedding": []
    },
    {
      "slug": "func _NeutrinoKit_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _NeutrinoKit_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetBlockHeaderRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(NeutrinoKitServer).GetBlockHeader(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/neutrinorpc.NeutrinoKit/GetBlockHeader\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(NeutrinoKitServer).GetBlockHeader(ctx, req.(*GetBlockHeaderRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n",
      "length": 478,
      "tokens": 51,
      "embedding": []
    },
    {
      "slug": "func _NeutrinoKit_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _NeutrinoKit_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetBlockRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(NeutrinoKitServer).GetBlock(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/neutrinorpc.NeutrinoKit/GetBlock\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(NeutrinoKitServer).GetBlock(ctx, req.(*GetBlockRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n",
      "length": 448,
      "tokens": 51,
      "embedding": []
    },
    {
      "slug": "func _NeutrinoKit_GetCFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _NeutrinoKit_GetCFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetCFilterRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(NeutrinoKitServer).GetCFilter(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/neutrinorpc.NeutrinoKit/GetCFilter\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(NeutrinoKitServer).GetCFilter(ctx, req.(*GetCFilterRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n",
      "length": 458,
      "tokens": 51,
      "embedding": []
    },
    {
      "slug": "func _NeutrinoKit_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _NeutrinoKit_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetBlockHashRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(NeutrinoKitServer).GetBlockHash(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/neutrinorpc.NeutrinoKit/GetBlockHash\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(NeutrinoKitServer).GetBlockHash(ctx, req.(*GetBlockHashRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// NeutrinoKit_ServiceDesc is the grpc.ServiceDesc for NeutrinoKit service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar NeutrinoKit_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"neutrinorpc.NeutrinoKit\",\n\tHandlerType: (*NeutrinoKitServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"Status\",\n\t\t\tHandler:    _NeutrinoKit_Status_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"AddPeer\",\n\t\t\tHandler:    _NeutrinoKit_AddPeer_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"DisconnectPeer\",\n\t\t\tHandler:    _NeutrinoKit_DisconnectPeer_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"IsBanned\",\n\t\t\tHandler:    _NeutrinoKit_IsBanned_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetBlockHeader\",\n\t\t\tHandler:    _NeutrinoKit_GetBlockHeader_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetBlock\",\n\t\t\tHandler:    _NeutrinoKit_GetBlock_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetCFilter\",\n\t\t\tHandler:    _NeutrinoKit_GetCFilter_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetBlockHash\",\n\t\t\tHandler:    _NeutrinoKit_GetBlockHash_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"neutrinorpc/neutrino.proto\",\n}\n",
      "length": 1548,
      "tokens": 144,
      "embedding": []
    }
  ]
}