{
  "filepath": "../implementations/go/lnd/lnrpc/sub_server.go",
  "package": "lnrpc",
  "sections": [
    {
      "slug": "type MacaroonPerms map[string][]bakery.Op",
      "content": "type MacaroonPerms map[string][]bakery.Op\n\n// SubServer is a child server of the main lnrpc gRPC server. Sub-servers allow\n// lnd to expose discrete services that can be used with or independent of the\n// main RPC server. The main rpcserver will create, start, stop, and manage\n// each sub-server in a generalized manner.",
      "length": 275,
      "tokens": 49,
      "embedding": []
    },
    {
      "slug": "type SubServer interface {",
      "content": "type SubServer interface {\n\t// Start starts the sub-server and all goroutines it needs to operate.\n\tStart() error\n\n\t// Stop signals that the sub-server should wrap up any lingering\n\t// requests, and being a graceful shutdown.\n\tStop() error\n\n\t// Name returns a unique string representation of the sub-server. This\n\t// can be used to identify the sub-server and also de-duplicate them.\n\tName() string\n}\n\n// GrpcHandler is the interface that should be registered with the root gRPC\n// server, and is the interface that implements the subserver's defined RPC.\n// Before the actual sub server has been created, this will be an empty shell\n// allowing us to start the gRPC server before we have all the dependencies\n// needed to create the subserver itself.",
      "length": 708,
      "tokens": 121,
      "embedding": []
    },
    {
      "slug": "type GrpcHandler interface {",
      "content": "type GrpcHandler interface {\n\t// RegisterWithRootServer will be called by the root gRPC server to\n\t// direct a sub RPC server to register itself with the main gRPC root\n\t// server. Until this is called, each sub-server won't be able to have\n\t// requests routed towards it.\n\tRegisterWithRootServer(*grpc.Server) error\n\n\t// RegisterWithRestServer will be called by the root REST mux to direct\n\t// a sub RPC server to register itself with the main REST mux server.\n\t// Until this is called, each sub-server won't be able to have requests\n\t// routed towards it.\n\tRegisterWithRestServer(context.Context, *runtime.ServeMux, string,\n\t\t[]grpc.DialOption) error\n\n\t// CreateSubServer populates the subserver's dependencies using the\n\t// passed SubServerConfigDispatcher. This method should fully\n\t// initialize the sub-server instance, making it ready for action. It\n\t// returns the macaroon permissions that the sub-server wishes to pass\n\t// on to the root server for all methods routed towards it.\n\tCreateSubServer(subCfgs SubServerConfigDispatcher) (SubServer,\n\t\tMacaroonPerms, error)\n}\n\n// SubServerConfigDispatcher is an interface that all sub-servers will use to\n// dynamically locate their configuration files. This abstraction will allow\n// the primary RPC sever to initialize all sub-servers in a generic manner\n// without knowing of each individual sub server.",
      "length": 1306,
      "tokens": 190,
      "embedding": []
    },
    {
      "slug": "type SubServerConfigDispatcher interface {",
      "content": "type SubServerConfigDispatcher interface {\n\t// FetchConfig attempts to locate an existing configuration file mapped\n\t// to the target sub-server. If we're unable to find a config file\n\t// matching the subServerName name, then false will be returned for the\n\t// second parameter.\n\tFetchConfig(subServerName string) (interface{}, bool)\n}\n\n// SubServerDriver is a template struct that allows the root server to create a\n// sub-server gRPC handler with minimal knowledge.",
      "length": 416,
      "tokens": 64,
      "embedding": []
    },
    {
      "slug": "type SubServerDriver struct {",
      "content": "type SubServerDriver struct {\n\t// SubServerName is the full name of a sub-sever.\n\t//\n\t// NOTE: This MUST be unique.\n\tSubServerName string\n\n\t// NewGrpcHandler creates a a new sub-server gRPC interface that can be\n\t// registered with the root gRPC server. It is not expected that the\n\t// SubServer is ready for operation before its CreateSubServer and\n\t// Start methods have been called.\n\tNewGrpcHandler func() GrpcHandler\n}\n\nvar (\n\t// subServers is a package level global variable that houses all the\n\t// registered sub-servers.\n\tsubServers = make(map[string]*SubServerDriver)\n\n\t// registerMtx is a mutex that protects access to the above subServer\n\t// map.\n\tregisterMtx sync.Mutex\n)\n\n// RegisteredSubServers returns all registered sub-servers.\n//\n// NOTE: This function is safe for concurrent access.",
      "length": 746,
      "tokens": 116,
      "embedding": []
    },
    {
      "slug": "func RegisteredSubServers() []*SubServerDriver {",
      "content": "func RegisteredSubServers() []*SubServerDriver {\n\tregisterMtx.Lock()\n\tdefer registerMtx.Unlock()\n\n\tdrivers := make([]*SubServerDriver, 0, len(subServers))\n\tfor _, driver := range subServers {\n\t\tdrivers = append(drivers, driver)\n\t}\n\n\treturn drivers\n}\n\n// RegisterSubServer should be called by a sub-server within its package's\n// init() method to register its existence with the main sub-server map. Each\n// sub-server, if active, is meant to register via this method in their init()\n// method. This allows callers to easily initialize and register all\n// sub-servers without knowing any details beyond that the fact that they\n// satisfy the necessary interfaces.\n//\n// NOTE: This function is safe for concurrent access.",
      "length": 652,
      "tokens": 99,
      "embedding": []
    },
    {
      "slug": "func RegisterSubServer(driver *SubServerDriver) error {",
      "content": "func RegisterSubServer(driver *SubServerDriver) error {\n\tregisterMtx.Lock()\n\tdefer registerMtx.Unlock()\n\n\tif _, ok := subServers[driver.SubServerName]; ok {\n\t\treturn fmt.Errorf(\"subserver already registered\")\n\t}\n\n\tsubServers[driver.SubServerName] = driver\n\n\treturn nil\n}\n\n// SupportedServers returns slice of the names of all registered sub-servers.\n//\n// NOTE: This function is safe for concurrent access.",
      "length": 336,
      "tokens": 42,
      "embedding": []
    },
    {
      "slug": "func SupportedServers() []string {",
      "content": "func SupportedServers() []string {\n\tregisterMtx.Lock()\n\tdefer registerMtx.Unlock()\n\n\tsupportedSubServers := make([]string, 0, len(subServers))\n\tfor driverName := range subServers {\n\t\tsupportedSubServers = append(supportedSubServers, driverName)\n\t}\n\n\treturn supportedSubServers\n}\n",
      "length": 234,
      "tokens": 22,
      "embedding": []
    }
  ]
}