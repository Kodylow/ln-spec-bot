{
  "filepath": "../implementations/go/lnd/lnrpc/state.pb.json.go",
  "package": "lnrpc",
  "sections": [
    {
      "slug": "func RegisterStateJSONCallbacks(registry map[string]func(ctx context.Context,",
      "content": "func RegisterStateJSONCallbacks(registry map[string]func(ctx context.Context,\n\tconn *grpc.ClientConn, reqJSON string, callback func(string, error))) {\n\n\tmarshaler := &gateway.JSONPb{\n\t\tMarshalOptions: protojson.MarshalOptions{\n\t\t\tUseProtoNames:   true,\n\t\t\tEmitUnpopulated: true,\n\t\t},\n\t}\n\n\tregistry[\"lnrpc.State.SubscribeState\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &SubscribeStateRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewStateClient(conn)\n\t\tstream, err := client.SubscribeState(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-stream.Context().Done():\n\t\t\t\t\tcallback(\"\", stream.Context().Err())\n\t\t\t\t\treturn\n\t\t\t\tdefault:\n\t\t\t\t}\n\n\t\t\t\tresp, err := stream.Recv()\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\trespBytes, err := marshaler.Marshal(resp)\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tcallback(string(respBytes), nil)\n\t\t\t}\n\t\t}()\n\t}\n\n\tregistry[\"lnrpc.State.GetState\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &GetStateRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewStateClient(conn)\n\t\tresp, err := client.GetState(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\trespBytes, err := marshaler.Marshal(resp)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\t\tcallback(string(respBytes), nil)\n\t}\n}\n",
      "length": 1483,
      "tokens": 171,
      "embedding": []
    }
  ]
}