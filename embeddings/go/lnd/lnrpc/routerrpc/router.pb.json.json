{
  "filepath": "../implementations/go/lnd/lnrpc/routerrpc/router.pb.json.go",
  "package": "routerrpc",
  "sections": [
    {
      "slug": "func RegisterRouterJSONCallbacks(registry map[string]func(ctx context.Context,",
      "content": "func RegisterRouterJSONCallbacks(registry map[string]func(ctx context.Context,\n\tconn *grpc.ClientConn, reqJSON string, callback func(string, error))) {\n\n\tmarshaler := &gateway.JSONPb{\n\t\tMarshalOptions: protojson.MarshalOptions{\n\t\t\tUseProtoNames:   true,\n\t\t\tEmitUnpopulated: true,\n\t\t},\n\t}\n\n\tregistry[\"routerrpc.Router.SendPaymentV2\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &SendPaymentRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tstream, err := client.SendPaymentV2(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-stream.Context().Done():\n\t\t\t\t\tcallback(\"\", stream.Context().Err())\n\t\t\t\t\treturn\n\t\t\t\tdefault:\n\t\t\t\t}\n\n\t\t\t\tresp, err := stream.Recv()\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\trespBytes, err := marshaler.Marshal(resp)\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tcallback(string(respBytes), nil)\n\t\t\t}\n\t\t}()\n\t}\n\n\tregistry[\"routerrpc.Router.TrackPaymentV2\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &TrackPaymentRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tstream, err := client.TrackPaymentV2(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-stream.Context().Done():\n\t\t\t\t\tcallback(\"\", stream.Context().Err())\n\t\t\t\t\treturn\n\t\t\t\tdefault:\n\t\t\t\t}\n\n\t\t\t\tresp, err := stream.Recv()\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\trespBytes, err := marshaler.Marshal(resp)\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tcallback(string(respBytes), nil)\n\t\t\t}\n\t\t}()\n\t}\n\n\tregistry[\"routerrpc.Router.TrackPayments\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &TrackPaymentsRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tstream, err := client.TrackPayments(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-stream.Context().Done():\n\t\t\t\t\tcallback(\"\", stream.Context().Err())\n\t\t\t\t\treturn\n\t\t\t\tdefault:\n\t\t\t\t}\n\n\t\t\t\tresp, err := stream.Recv()\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\trespBytes, err := marshaler.Marshal(resp)\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tcallback(string(respBytes), nil)\n\t\t\t}\n\t\t}()\n\t}\n\n\tregistry[\"routerrpc.Router.EstimateRouteFee\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &RouteFeeRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tresp, err := client.EstimateRouteFee(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\trespBytes, err := marshaler.Marshal(resp)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\t\tcallback(string(respBytes), nil)\n\t}\n\n\tregistry[\"routerrpc.Router.SendToRoute\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &SendToRouteRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tresp, err := client.SendToRoute(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\trespBytes, err := marshaler.Marshal(resp)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\t\tcallback(string(respBytes), nil)\n\t}\n\n\tregistry[\"routerrpc.Router.SendToRouteV2\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &SendToRouteRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tresp, err := client.SendToRouteV2(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\trespBytes, err := marshaler.Marshal(resp)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\t\tcallback(string(respBytes), nil)\n\t}\n\n\tregistry[\"routerrpc.Router.ResetMissionControl\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &ResetMissionControlRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tresp, err := client.ResetMissionControl(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\trespBytes, err := marshaler.Marshal(resp)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\t\tcallback(string(respBytes), nil)\n\t}\n\n\tregistry[\"routerrpc.Router.QueryMissionControl\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &QueryMissionControlRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tresp, err := client.QueryMissionControl(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\trespBytes, err := marshaler.Marshal(resp)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\t\tcallback(string(respBytes), nil)\n\t}\n\n\tregistry[\"routerrpc.Router.XImportMissionControl\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &XImportMissionControlRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tresp, err := client.XImportMissionControl(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\trespBytes, err := marshaler.Marshal(resp)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\t\tcallback(string(respBytes), nil)\n\t}\n\n\tregistry[\"routerrpc.Router.GetMissionControlConfig\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &GetMissionControlConfigRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tresp, err := client.GetMissionControlConfig(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\trespBytes, err := marshaler.Marshal(resp)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\t\tcallback(string(respBytes), nil)\n\t}\n\n\tregistry[\"routerrpc.Router.SetMissionControlConfig\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &SetMissionControlConfigRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tresp, err := client.SetMissionControlConfig(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\trespBytes, err := marshaler.Marshal(resp)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\t\tcallback(string(respBytes), nil)\n\t}\n\n\tregistry[\"routerrpc.Router.QueryProbability\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &QueryProbabilityRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tresp, err := client.QueryProbability(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\trespBytes, err := marshaler.Marshal(resp)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\t\tcallback(string(respBytes), nil)\n\t}\n\n\tregistry[\"routerrpc.Router.BuildRoute\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &BuildRouteRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tresp, err := client.BuildRoute(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\trespBytes, err := marshaler.Marshal(resp)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\t\tcallback(string(respBytes), nil)\n\t}\n\n\tregistry[\"routerrpc.Router.SubscribeHtlcEvents\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &SubscribeHtlcEventsRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tstream, err := client.SubscribeHtlcEvents(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-stream.Context().Done():\n\t\t\t\t\tcallback(\"\", stream.Context().Err())\n\t\t\t\t\treturn\n\t\t\t\tdefault:\n\t\t\t\t}\n\n\t\t\t\tresp, err := stream.Recv()\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\trespBytes, err := marshaler.Marshal(resp)\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tcallback(string(respBytes), nil)\n\t\t\t}\n\t\t}()\n\t}\n\n\tregistry[\"routerrpc.Router.SendPayment\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &SendPaymentRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tstream, err := client.SendPayment(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-stream.Context().Done():\n\t\t\t\t\tcallback(\"\", stream.Context().Err())\n\t\t\t\t\treturn\n\t\t\t\tdefault:\n\t\t\t\t}\n\n\t\t\t\tresp, err := stream.Recv()\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\trespBytes, err := marshaler.Marshal(resp)\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tcallback(string(respBytes), nil)\n\t\t\t}\n\t\t}()\n\t}\n\n\tregistry[\"routerrpc.Router.TrackPayment\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &TrackPaymentRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tstream, err := client.TrackPayment(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-stream.Context().Done():\n\t\t\t\t\tcallback(\"\", stream.Context().Err())\n\t\t\t\t\treturn\n\t\t\t\tdefault:\n\t\t\t\t}\n\n\t\t\t\tresp, err := stream.Recv()\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\trespBytes, err := marshaler.Marshal(resp)\n\t\t\t\tif err != nil {\n\t\t\t\t\tcallback(\"\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tcallback(string(respBytes), nil)\n\t\t\t}\n\t\t}()\n\t}\n\n\tregistry[\"routerrpc.Router.UpdateChanStatus\"] = func(ctx context.Context,\n\t\tconn *grpc.ClientConn, reqJSON string, callback func(string, error)) {\n\n\t\treq := &UpdateChanStatusRequest{}\n\t\terr := marshaler.Unmarshal([]byte(reqJSON), req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\tclient := NewRouterClient(conn)\n\t\tresp, err := client.UpdateChanStatus(ctx, req)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\n\t\trespBytes, err := marshaler.Marshal(resp)\n\t\tif err != nil {\n\t\t\tcallback(\"\", err)\n\t\t\treturn\n\t\t}\n\t\tcallback(string(respBytes), nil)\n\t}\n}\n",
      "length": 10807,
      "tokens": 1231,
      "embedding": []
    }
  ]
}