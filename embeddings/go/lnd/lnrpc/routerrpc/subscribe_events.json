{
  "filepath": "../implementations/go/lnd/lnrpc/routerrpc/subscribe_events.go",
  "package": "routerrpc",
  "sections": [
    {
      "slug": "func rpcHtlcEvent(htlcEvent interface{}) (*HtlcEvent, error) {",
      "content": "func rpcHtlcEvent(htlcEvent interface{}) (*HtlcEvent, error) {\n\tvar (\n\t\tkey       htlcswitch.HtlcKey\n\t\ttimestamp time.Time\n\t\teventType *htlcswitch.HtlcEventType\n\t\tevent     isHtlcEvent_Event\n\t)\n\n\tswitch e := htlcEvent.(type) {\n\tcase *htlcswitch.ForwardingEvent:\n\t\tevent = &HtlcEvent_ForwardEvent{\n\t\t\tForwardEvent: &ForwardEvent{\n\t\t\t\tInfo: rpcInfo(e.HtlcInfo),\n\t\t\t},\n\t\t}\n\n\t\tkey = e.HtlcKey\n\t\teventType = &e.HtlcEventType\n\t\ttimestamp = e.Timestamp\n\n\tcase *htlcswitch.ForwardingFailEvent:\n\t\tevent = &HtlcEvent_ForwardFailEvent{\n\t\t\tForwardFailEvent: &ForwardFailEvent{},\n\t\t}\n\n\t\tkey = e.HtlcKey\n\t\teventType = &e.HtlcEventType\n\t\ttimestamp = e.Timestamp\n\n\tcase *htlcswitch.LinkFailEvent:\n\t\tfailureCode, failReason, err := rpcFailReason(\n\t\t\te.LinkError,\n\t\t)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tevent = &HtlcEvent_LinkFailEvent{\n\t\t\tLinkFailEvent: &LinkFailEvent{\n\t\t\t\tInfo:          rpcInfo(e.HtlcInfo),\n\t\t\t\tWireFailure:   failureCode,\n\t\t\t\tFailureDetail: failReason,\n\t\t\t\tFailureString: e.LinkError.Error(),\n\t\t\t},\n\t\t}\n\n\t\tkey = e.HtlcKey\n\t\teventType = &e.HtlcEventType\n\t\ttimestamp = e.Timestamp\n\n\tcase *htlcswitch.SettleEvent:\n\t\tevent = &HtlcEvent_SettleEvent{\n\t\t\tSettleEvent: &SettleEvent{\n\t\t\t\tPreimage: e.Preimage[:],\n\t\t\t},\n\t\t}\n\n\t\tkey = e.HtlcKey\n\t\teventType = &e.HtlcEventType\n\t\ttimestamp = e.Timestamp\n\n\tcase *htlcswitch.FinalHtlcEvent:\n\t\tevent = &HtlcEvent_FinalHtlcEvent{\n\t\t\tFinalHtlcEvent: &FinalHtlcEvent{\n\t\t\t\tSettled:  e.Settled,\n\t\t\t\tOffchain: e.Offchain,\n\t\t\t},\n\t\t}\n\n\t\tkey = htlcswitch.HtlcKey{\n\t\t\tIncomingCircuit: e.CircuitKey,\n\t\t}\n\t\ttimestamp = e.Timestamp\n\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unknown event type: %T\", e)\n\t}\n\n\trpcEvent := &HtlcEvent{\n\t\tIncomingChannelId: key.IncomingCircuit.ChanID.ToUint64(),\n\t\tOutgoingChannelId: key.OutgoingCircuit.ChanID.ToUint64(),\n\t\tIncomingHtlcId:    key.IncomingCircuit.HtlcID,\n\t\tOutgoingHtlcId:    key.OutgoingCircuit.HtlcID,\n\t\tTimestampNs:       uint64(timestamp.UnixNano()),\n\t\tEvent:             event,\n\t}\n\n\t// Convert the htlc event type to a rpc event.\n\tif eventType != nil {\n\t\tswitch *eventType {\n\t\tcase htlcswitch.HtlcEventTypeSend:\n\t\t\trpcEvent.EventType = HtlcEvent_SEND\n\n\t\tcase htlcswitch.HtlcEventTypeReceive:\n\t\t\trpcEvent.EventType = HtlcEvent_RECEIVE\n\n\t\tcase htlcswitch.HtlcEventTypeForward:\n\t\t\trpcEvent.EventType = HtlcEvent_FORWARD\n\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"unknown event type: %v\",\n\t\t\t\teventType)\n\t\t}\n\t}\n\n\treturn rpcEvent, nil\n}\n\n// rpcInfo returns a rpc struct containing the htlc information from the\n// switch's htlc info struct.",
      "length": 2337,
      "tokens": 226,
      "embedding": []
    },
    {
      "slug": "func rpcInfo(info htlcswitch.HtlcInfo) *HtlcInfo {",
      "content": "func rpcInfo(info htlcswitch.HtlcInfo) *HtlcInfo {\n\treturn &HtlcInfo{\n\t\tIncomingTimelock: info.IncomingTimeLock,\n\t\tOutgoingTimelock: info.OutgoingTimeLock,\n\t\tIncomingAmtMsat:  uint64(info.IncomingAmt),\n\t\tOutgoingAmtMsat:  uint64(info.OutgoingAmt),\n\t}\n}\n\n// rpcFailReason maps a lnwire failure message and failure detail to a rpc\n// failure code and detail.",
      "length": 296,
      "tokens": 30,
      "embedding": []
    },
    {
      "slug": "func rpcFailReason(linkErr *htlcswitch.LinkError) (lnrpc.Failure_FailureCode,",
      "content": "func rpcFailReason(linkErr *htlcswitch.LinkError) (lnrpc.Failure_FailureCode,\n\tFailureDetail, error) {\n\n\twireErr, err := marshallError(linkErr)\n\tif err != nil {\n\t\treturn 0, 0, err\n\t}\n\twireCode := wireErr.GetCode()\n\n\t// If the link has no failure detail, return with failure detail none.\n\tif linkErr.FailureDetail == nil {\n\t\treturn wireCode, FailureDetail_NO_DETAIL, nil\n\t}\n\n\tswitch failureDetail := linkErr.FailureDetail.(type) {\n\tcase invoices.FailResolutionResult:\n\t\tfd, err := rpcFailureResolution(failureDetail)\n\t\treturn wireCode, fd, err\n\n\tcase htlcswitch.OutgoingFailure:\n\t\tfd, err := rpcOutgoingFailure(failureDetail)\n\t\treturn wireCode, fd, err\n\n\tdefault:\n\t\treturn 0, 0, fmt.Errorf(\"unknown failure \"+\n\t\t\t\"detail type: %T\", linkErr.FailureDetail)\n\t}\n}\n\n// rpcFailureResolution maps an invoice failure resolution to a rpc failure\n// detail. Invoice failures have no zero resolution results (every failure\n// is accompanied with a result), so we error if we fail to match the result\n// type.",
      "length": 887,
      "tokens": 121,
      "embedding": []
    },
    {
      "slug": "func rpcFailureResolution(invoiceFailure invoices.FailResolutionResult) (",
      "content": "func rpcFailureResolution(invoiceFailure invoices.FailResolutionResult) (\n\tFailureDetail, error) {\n\n\tswitch invoiceFailure {\n\tcase invoices.ResultReplayToCanceled:\n\t\treturn FailureDetail_INVOICE_CANCELED, nil\n\n\tcase invoices.ResultInvoiceAlreadyCanceled:\n\t\treturn FailureDetail_INVOICE_CANCELED, nil\n\n\tcase invoices.ResultAmountTooLow:\n\t\treturn FailureDetail_INVOICE_UNDERPAID, nil\n\n\tcase invoices.ResultExpiryTooSoon:\n\t\treturn FailureDetail_INVOICE_EXPIRY_TOO_SOON, nil\n\n\tcase invoices.ResultCanceled:\n\t\treturn FailureDetail_INVOICE_CANCELED, nil\n\n\tcase invoices.ResultInvoiceNotOpen:\n\t\treturn FailureDetail_INVOICE_NOT_OPEN, nil\n\n\tcase invoices.ResultMppTimeout:\n\t\treturn FailureDetail_MPP_INVOICE_TIMEOUT, nil\n\n\tcase invoices.ResultAddressMismatch:\n\t\treturn FailureDetail_ADDRESS_MISMATCH, nil\n\n\tcase invoices.ResultHtlcSetTotalMismatch:\n\t\treturn FailureDetail_SET_TOTAL_MISMATCH, nil\n\n\tcase invoices.ResultHtlcSetTotalTooLow:\n\t\treturn FailureDetail_SET_TOTAL_TOO_LOW, nil\n\n\tcase invoices.ResultHtlcSetOverpayment:\n\t\treturn FailureDetail_SET_OVERPAID, nil\n\n\tcase invoices.ResultInvoiceNotFound:\n\t\treturn FailureDetail_UNKNOWN_INVOICE, nil\n\n\tcase invoices.ResultKeySendError:\n\t\treturn FailureDetail_INVALID_KEYSEND, nil\n\n\tcase invoices.ResultMppInProgress:\n\t\treturn FailureDetail_MPP_IN_PROGRESS, nil\n\n\tdefault:\n\t\treturn 0, fmt.Errorf(\"unknown fail resolution: %v\",\n\t\t\tinvoiceFailure.FailureString())\n\t}\n}\n\n// rpcOutgoingFailure maps an outgoing failure to a rpc FailureDetail. If the\n// failure detail is FailureDetailNone, which indicates that the failure was\n// a wire message which required no further failure detail, we return a no\n// detail failure detail to indicate that there was no additional information.",
      "length": 1589,
      "tokens": 135,
      "embedding": []
    },
    {
      "slug": "func rpcOutgoingFailure(failureDetail htlcswitch.OutgoingFailure) (",
      "content": "func rpcOutgoingFailure(failureDetail htlcswitch.OutgoingFailure) (\n\tFailureDetail, error) {\n\n\tswitch failureDetail {\n\tcase htlcswitch.OutgoingFailureNone:\n\t\treturn FailureDetail_NO_DETAIL, nil\n\n\tcase htlcswitch.OutgoingFailureDecodeError:\n\t\treturn FailureDetail_ONION_DECODE, nil\n\n\tcase htlcswitch.OutgoingFailureLinkNotEligible:\n\t\treturn FailureDetail_LINK_NOT_ELIGIBLE, nil\n\n\tcase htlcswitch.OutgoingFailureOnChainTimeout:\n\t\treturn FailureDetail_ON_CHAIN_TIMEOUT, nil\n\n\tcase htlcswitch.OutgoingFailureHTLCExceedsMax:\n\t\treturn FailureDetail_HTLC_EXCEEDS_MAX, nil\n\n\tcase htlcswitch.OutgoingFailureInsufficientBalance:\n\t\treturn FailureDetail_INSUFFICIENT_BALANCE, nil\n\n\tcase htlcswitch.OutgoingFailureCircularRoute:\n\t\treturn FailureDetail_CIRCULAR_ROUTE, nil\n\n\tcase htlcswitch.OutgoingFailureIncompleteForward:\n\t\treturn FailureDetail_INCOMPLETE_FORWARD, nil\n\n\tcase htlcswitch.OutgoingFailureDownstreamHtlcAdd:\n\t\treturn FailureDetail_HTLC_ADD_FAILED, nil\n\n\tcase htlcswitch.OutgoingFailureForwardsDisabled:\n\t\treturn FailureDetail_FORWARDS_DISABLED, nil\n\n\tdefault:\n\t\treturn 0, fmt.Errorf(\"unknown outgoing failure \"+\n\t\t\t\"detail: %v\", failureDetail.FailureString())\n\t}\n}\n",
      "length": 1061,
      "tokens": 68,
      "embedding": []
    }
  ]
}