{
  "filepath": "../implementations/go/lnd/lnrpc/chainrpc/chainkit_grpc.pb.go",
  "package": "chainrpc",
  "sections": [
    {
      "slug": "type ChainKitClient interface {",
      "content": "type ChainKitClient interface {\n\t// lncli: `chain getblock`\n\t// GetBlock returns a block given the corresponding block hash.\n\tGetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)\n\t// lncli: `chain getbestblock`\n\t// GetBestBlock returns the block hash and current height from the valid\n\t// most-work chain.\n\tGetBestBlock(ctx context.Context, in *GetBestBlockRequest, opts ...grpc.CallOption) (*GetBestBlockResponse, error)\n\t// lncli: `chain getblockhash`\n\t// GetBlockHash returns the hash of the block in the best blockchain\n\t// at the given height.\n\tGetBlockHash(ctx context.Context, in *GetBlockHashRequest, opts ...grpc.CallOption) (*GetBlockHashResponse, error)\n}\n",
      "length": 673,
      "tokens": 79,
      "embedding": []
    },
    {
      "slug": "type chainKitClient struct {",
      "content": "type chainKitClient struct {\n\tcc grpc.ClientConnInterface\n}\n",
      "length": 29,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func NewChainKitClient(cc grpc.ClientConnInterface) ChainKitClient {",
      "content": "func NewChainKitClient(cc grpc.ClientConnInterface) ChainKitClient {\n\treturn &chainKitClient{cc}\n}\n",
      "length": 28,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func (c *chainKitClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {",
      "content": "func (c *chainKitClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {\n\tout := new(GetBlockResponse)\n\terr := c.cc.Invoke(ctx, \"/chainrpc.ChainKit/GetBlock\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n",
      "length": 154,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (c *chainKitClient) GetBestBlock(ctx context.Context, in *GetBestBlockRequest, opts ...grpc.CallOption) (*GetBestBlockResponse, error) {",
      "content": "func (c *chainKitClient) GetBestBlock(ctx context.Context, in *GetBestBlockRequest, opts ...grpc.CallOption) (*GetBestBlockResponse, error) {\n\tout := new(GetBestBlockResponse)\n\terr := c.cc.Invoke(ctx, \"/chainrpc.ChainKit/GetBestBlock\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n",
      "length": 162,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (c *chainKitClient) GetBlockHash(ctx context.Context, in *GetBlockHashRequest, opts ...grpc.CallOption) (*GetBlockHashResponse, error) {",
      "content": "func (c *chainKitClient) GetBlockHash(ctx context.Context, in *GetBlockHashRequest, opts ...grpc.CallOption) (*GetBlockHashResponse, error) {\n\tout := new(GetBlockHashResponse)\n\terr := c.cc.Invoke(ctx, \"/chainrpc.ChainKit/GetBlockHash\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// ChainKitServer is the server API for ChainKit service.\n// All implementations must embed UnimplementedChainKitServer\n// for forward compatibility",
      "length": 308,
      "tokens": 42,
      "embedding": []
    },
    {
      "slug": "type ChainKitServer interface {",
      "content": "type ChainKitServer interface {\n\t// lncli: `chain getblock`\n\t// GetBlock returns a block given the corresponding block hash.\n\tGetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)\n\t// lncli: `chain getbestblock`\n\t// GetBestBlock returns the block hash and current height from the valid\n\t// most-work chain.\n\tGetBestBlock(context.Context, *GetBestBlockRequest) (*GetBestBlockResponse, error)\n\t// lncli: `chain getblockhash`\n\t// GetBlockHash returns the hash of the block in the best blockchain\n\t// at the given height.\n\tGetBlockHash(context.Context, *GetBlockHashRequest) (*GetBlockHashResponse, error)\n\tmustEmbedUnimplementedChainKitServer()\n}\n\n// UnimplementedChainKitServer must be embedded to have forward compatible implementations.",
      "length": 707,
      "tokens": 78,
      "embedding": []
    },
    {
      "slug": "type UnimplementedChainKitServer struct {",
      "content": "type UnimplementedChainKitServer struct {\n}\n",
      "length": 1,
      "tokens": 1,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedChainKitServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {",
      "content": "func (UnimplementedChainKitServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetBlock not implemented\")\n}",
      "length": 83,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedChainKitServer) GetBestBlock(context.Context, *GetBestBlockRequest) (*GetBestBlockResponse, error) {",
      "content": "func (UnimplementedChainKitServer) GetBestBlock(context.Context, *GetBestBlockRequest) (*GetBestBlockResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetBestBlock not implemented\")\n}",
      "length": 87,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedChainKitServer) GetBlockHash(context.Context, *GetBlockHashRequest) (*GetBlockHashResponse, error) {",
      "content": "func (UnimplementedChainKitServer) GetBlockHash(context.Context, *GetBlockHashRequest) (*GetBlockHashResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetBlockHash not implemented\")\n}",
      "length": 87,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedChainKitServer) mustEmbedUnimplementedChainKitServer() {}",
      "content": "func (UnimplementedChainKitServer) mustEmbedUnimplementedChainKitServer() {}\n\n// UnsafeChainKitServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to ChainKitServer will\n// result in compilation errors.",
      "length": 209,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "type UnsafeChainKitServer interface {",
      "content": "type UnsafeChainKitServer interface {\n\tmustEmbedUnimplementedChainKitServer()\n}\n",
      "length": 40,
      "tokens": 2,
      "embedding": []
    },
    {
      "slug": "func RegisterChainKitServer(s grpc.ServiceRegistrar, srv ChainKitServer) {",
      "content": "func RegisterChainKitServer(s grpc.ServiceRegistrar, srv ChainKitServer) {\n\ts.RegisterService(&ChainKit_ServiceDesc, srv)\n}\n",
      "length": 47,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func _ChainKit_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _ChainKit_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetBlockRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(ChainKitServer).GetBlock(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/chainrpc.ChainKit/GetBlock\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(ChainKitServer).GetBlock(ctx, req.(*GetBlockRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n",
      "length": 436,
      "tokens": 51,
      "embedding": []
    },
    {
      "slug": "func _ChainKit_GetBestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _ChainKit_GetBestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetBestBlockRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(ChainKitServer).GetBestBlock(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/chainrpc.ChainKit/GetBestBlock\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(ChainKitServer).GetBestBlock(ctx, req.(*GetBestBlockRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n",
      "length": 456,
      "tokens": 51,
      "embedding": []
    },
    {
      "slug": "func _ChainKit_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _ChainKit_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetBlockHashRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(ChainKitServer).GetBlockHash(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/chainrpc.ChainKit/GetBlockHash\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(ChainKitServer).GetBlockHash(ctx, req.(*GetBlockHashRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// ChainKit_ServiceDesc is the grpc.ServiceDesc for ChainKit service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar ChainKit_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"chainrpc.ChainKit\",\n\tHandlerType: (*ChainKitServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GetBlock\",\n\t\t\tHandler:    _ChainKit_GetBlock_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetBestBlock\",\n\t\t\tHandler:    _ChainKit_GetBestBlock_Handler,\n\t\t},\n\t\t{\n\t\t\tMethodName: \"GetBlockHash\",\n\t\t\tHandler:    _ChainKit_GetBlockHash_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"chainrpc/chainkit.proto\",\n}\n",
      "length": 1102,
      "tokens": 114,
      "embedding": []
    }
  ]
}