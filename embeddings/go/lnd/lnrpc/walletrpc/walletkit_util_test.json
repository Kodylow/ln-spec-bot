{
  "filepath": "../implementations/go/lnd/lnrpc/walletrpc/walletkit_util_test.go",
  "package": "walletrpc",
  "sections": [
    {
      "slug": "func TestParseDerivationPath(t *testing.T) {",
      "content": "func TestParseDerivationPath(t *testing.T) {\n\ttestCases := []struct {\n\t\tname           string\n\t\tpath           string\n\t\texpectedErr    string\n\t\texpectedResult []uint32\n\t}{{\n\t\tname:        \"empty path\",\n\t\tpath:        \"\",\n\t\texpectedErr: \"path cannot be empty\",\n\t}, {\n\t\tname:        \"just whitespace\",\n\t\tpath:        \" \\n\\t\\r\",\n\t\texpectedErr: \"path cannot be empty\",\n\t}, {\n\t\tname:        \"incorrect prefix\",\n\t\tpath:        \"0/0\",\n\t\texpectedErr: \"path must start with m/\",\n\t}, {\n\t\tname:        \"invalid number\",\n\t\tpath:        \"m/a'/0'\",\n\t\texpectedErr: \"could not parse part \\\"a\\\": strconv.ParseInt\",\n\t}, {\n\t\tname:        \"double slash\",\n\t\tpath:        \"m/0'//\",\n\t\texpectedErr: \"could not parse part \\\"\\\": strconv.ParseInt\",\n\t}, {\n\t\tname:        \"number too large\",\n\t\tpath:        \"m/99999999999999\",\n\t\texpectedErr: \"could not parse part \\\"99999999999999\\\": strconv\",\n\t}, {\n\t\tname:           \"empty path\",\n\t\tpath:           \"m/\",\n\t\texpectedResult: []uint32{},\n\t}, {\n\t\tname:           \"mixed path\",\n\t\tpath:           \"m/0'/1'/2'/3/4/5/6'/7'\",\n\t\texpectedResult: []uint32{0, 1, 2, 3, 4, 5, 6, 7},\n\t}, {\n\t\tname:           \"short path\",\n\t\tpath:           \"m/0'\",\n\t\texpectedResult: []uint32{0},\n\t}, {\n\t\tname:           \"plain path\",\n\t\tpath:           \"m/0/1/2\",\n\t\texpectedResult: []uint32{0, 1, 2},\n\t}}\n\n\tfor _, tc := range testCases {\n\t\ttc := tc\n\n\t\tt.Run(tc.name, func(tt *testing.T) {\n\t\t\tresult, err := parseDerivationPath(tc.path)\n\n\t\t\tif tc.expectedErr != \"\" {\n\t\t\t\trequire.Error(tt, err)\n\t\t\t\trequire.Contains(\n\t\t\t\t\ttt, err.Error(), tc.expectedErr,\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\trequire.NoError(tt, err)\n\t\t\t\trequire.Equal(tt, tc.expectedResult, result)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "length": 1543,
      "tokens": 180,
      "embedding": []
    }
  ]
}