{
  "filepath": "../implementations/go/lnd/lnrpc/walletrpc/config_active.go",
  "package": "walletrpc",
  "sections": [
    {
      "slug": "//go:build walletrpc",
      "content": "//go:build walletrpc\n// +build walletrpc\n\npackage walletrpc\n\nimport (\n\t\"github.com/btcsuite/btcd/chaincfg\"\n\t\"github.com/lightningnetwork/lnd/keychain\"\n\t\"github.com/lightningnetwork/lnd/lnwallet\"\n\t\"github.com/lightningnetwork/lnd/lnwallet/chainfee\"\n\t\"github.com/lightningnetwork/lnd/macaroons\"\n\t\"github.com/lightningnetwork/lnd/sweep\"\n)\n\nconst (\n\t// SubServerName is the name of the sub rpc server. We'll use this name\n\t// to register ourselves, and we also require that the main\n\t// SubServerConfigDispatcher instance recognize as the name of our.\n\tSubServerName = \"WalletKitRPC\"\n)\n\n// Config is the primary configuration struct for the WalletKit RPC server. It\n// contains all the items required for the signer rpc server to carry out its\n// duties. The fields with struct tags are meant to be parsed as normal\n// configuration options, while if able to be populated, the latter fields MUST\n// also be specified.",
      "length": 868,
      "tokens": 113,
      "embedding": []
    },
    {
      "slug": "type Config struct {",
      "content": "type Config struct {\n\t// WalletKitMacPath is the path for the signer macaroon. If unspecified\n\t// then we assume that the macaroon will be found under the network\n\t// directory, named DefaultWalletKitMacFilename.\n\tWalletKitMacPath string `long:\"walletkitmacaroonpath\" description:\"Path to the wallet kit macaroon\"`\n\n\t// NetworkDir is the main network directory wherein the signer rpc\n\t// server will find the macaroon named DefaultWalletKitMacFilename.\n\tNetworkDir string\n\n\t// MacService is the main macaroon service that we'll use to handle\n\t// authentication for the signer rpc server.\n\tMacService *macaroons.Service\n\n\t// FeeEstimator is an instance of the primary fee estimator instance\n\t// the WalletKit will use to respond to fee estimation requests.\n\tFeeEstimator chainfee.Estimator\n\n\t// Wallet is the primary wallet that the WalletKit will use to proxy\n\t// any relevant requests to.\n\tWallet lnwallet.WalletController\n\n\t// CoinSelectionLocker allows the caller to perform an operation, which\n\t// is synchronized with all coin selection attempts. This can be used\n\t// when an operation requires that all coin selection operations cease\n\t// forward progress. Think of this as an exclusive lock on coin\n\t// selection operations.\n\tCoinSelectionLocker sweep.CoinSelectionLocker\n\n\t// KeyRing is an interface that the WalletKit will use to derive any\n\t// keys due to incoming client requests.\n\tKeyRing keychain.KeyRing\n\n\t// Sweeper is the central batching engine of lnd. It is responsible for\n\t// sweeping inputs in batches back into the wallet.\n\tSweeper *sweep.UtxoSweeper\n\n\t// Chain is an interface that the WalletKit will use to determine state\n\t// about the backing chain of the wallet.\n\tChain lnwallet.BlockChainIO\n\n\t// ChainParams are the parameters of the wallet's backing chain.\n\tChainParams *chaincfg.Params\n\n\t// CurrentNumAnchorChans returns the current number of non-private\n\t// anchor channels the wallet should be ready to fee bump if needed.\n\tCurrentNumAnchorChans func() (int, error)\n}\n",
      "length": 1932,
      "tokens": 280,
      "embedding": []
    }
  ]
}