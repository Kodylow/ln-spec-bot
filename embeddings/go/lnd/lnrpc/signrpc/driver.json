{
  "filepath": "../implementations/go/lnd/lnrpc/signrpc/driver.go",
  "package": "signrpc",
  "sections": [
    {
      "slug": "//go:build signrpc",
      "content": "//go:build signrpc\n// +build signrpc\n\npackage signrpc\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lightningnetwork/lnd/lnrpc\"\n)\n\n// createNewSubServer is a helper method that will create the new signer sub\n// server given the main config dispatcher method. If we're unable to find the\n// config that is meant for us in the config dispatcher, then we'll exit with\n// an error.",
      "length": 330,
      "tokens": 55,
      "embedding": []
    },
    {
      "slug": "func createNewSubServer(configRegistry lnrpc.SubServerConfigDispatcher) (",
      "content": "func createNewSubServer(configRegistry lnrpc.SubServerConfigDispatcher) (\n\t*Server, lnrpc.MacaroonPerms, error) {\n\n\t// We'll attempt to look up the config that we expect, according to our\n\t// subServerName name. If we can't find this, then we'll exit with an\n\t// error, as we're unable to properly initialize ourselves without this\n\t// config.\n\tsignServerConf, ok := configRegistry.FetchConfig(subServerName)\n\tif !ok {\n\t\treturn nil, nil, fmt.Errorf(\"unable to find config for \"+\n\t\t\t\"subserver type %s\", subServerName)\n\t}\n\n\t// Now that we've found an object mapping to our service name, we'll\n\t// ensure that it's the type we need.\n\tconfig, ok := signServerConf.(*Config)\n\tif !ok {\n\t\treturn nil, nil, fmt.Errorf(\"wrong type of config for \"+\n\t\t\t\"subserver %s, expected %T got %T\", subServerName,\n\t\t\t&Config{}, signServerConf)\n\t}\n\n\t// Before we try to make the new signer service instance, we'll perform\n\t// some sanity checks on the arguments to ensure that they're usable.\n\n\tswitch {\n\t// If the macaroon service is set (we should use macaroons), then\n\t// ensure that we know where to look for them, or create them if not\n\t// found.\n\tcase config.MacService != nil && config.NetworkDir == \"\":\n\t\treturn nil, nil, fmt.Errorf(\"NetworkDir must be set to create \" +\n\t\t\t\"Signrpc\")\n\tcase config.Signer == nil:\n\t\treturn nil, nil, fmt.Errorf(\"Signer must be set to create \" +\n\t\t\t\"Signrpc\")\n\t}\n\n\treturn New(config)\n}\n",
      "length": 1292,
      "tokens": 208,
      "embedding": []
    },
    {
      "slug": "func init() {",
      "content": "func init() {\n\tsubServer := &lnrpc.SubServerDriver{\n\t\tSubServerName: subServerName,\n\t\tNewGrpcHandler: func() lnrpc.GrpcHandler {\n\t\t\treturn &ServerShell{}\n\t\t},\n\t}\n\n\t// If the build tag is active, then we'll register ourselves as a\n\t// sub-RPC server within the global lnrpc package namespace.\n\tif err := lnrpc.RegisterSubServer(subServer); err != nil {\n\t\tpanic(fmt.Sprintf(\"failed to register sub server driver '%s': %v\",\n\t\t\tsubServerName, err))\n\t}\n}\n",
      "length": 422,
      "tokens": 55,
      "embedding": []
    }
  ]
}