{
  "filepath": "../implementations/go/lnd/lnrpc/watchtowerrpc/watchtower_grpc.pb.go",
  "package": "watchtowerrpc",
  "sections": [
    {
      "slug": "type WatchtowerClient interface {",
      "content": "type WatchtowerClient interface {\n\t// lncli: tower info\n\t// GetInfo returns general information concerning the companion watchtower\n\t// including its public key and URIs where the server is currently\n\t// listening for clients.\n\tGetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)\n}\n",
      "length": 290,
      "tokens": 38,
      "embedding": []
    },
    {
      "slug": "type watchtowerClient struct {",
      "content": "type watchtowerClient struct {\n\tcc grpc.ClientConnInterface\n}\n",
      "length": 29,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func NewWatchtowerClient(cc grpc.ClientConnInterface) WatchtowerClient {",
      "content": "func NewWatchtowerClient(cc grpc.ClientConnInterface) WatchtowerClient {\n\treturn &watchtowerClient{cc}\n}\n",
      "length": 30,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func (c *watchtowerClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {",
      "content": "func (c *watchtowerClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {\n\tout := new(GetInfoResponse)\n\terr := c.cc.Invoke(ctx, \"/watchtowerrpc.Watchtower/GetInfo\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// WatchtowerServer is the server API for Watchtower service.\n// All implementations must embed UnimplementedWatchtowerServer\n// for forward compatibility",
      "length": 311,
      "tokens": 42,
      "embedding": []
    },
    {
      "slug": "type WatchtowerServer interface {",
      "content": "type WatchtowerServer interface {\n\t// lncli: tower info\n\t// GetInfo returns general information concerning the companion watchtower\n\t// including its public key and URIs where the server is currently\n\t// listening for clients.\n\tGetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)\n\tmustEmbedUnimplementedWatchtowerServer()\n}\n\n// UnimplementedWatchtowerServer must be embedded to have forward compatible implementations.",
      "length": 392,
      "tokens": 45,
      "embedding": []
    },
    {
      "slug": "type UnimplementedWatchtowerServer struct {",
      "content": "type UnimplementedWatchtowerServer struct {\n}\n",
      "length": 1,
      "tokens": 1,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedWatchtowerServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {",
      "content": "func (UnimplementedWatchtowerServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetInfo not implemented\")\n}",
      "length": 82,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedWatchtowerServer) mustEmbedUnimplementedWatchtowerServer() {}",
      "content": "func (UnimplementedWatchtowerServer) mustEmbedUnimplementedWatchtowerServer() {}\n\n// UnsafeWatchtowerServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to WatchtowerServer will\n// result in compilation errors.",
      "length": 213,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "type UnsafeWatchtowerServer interface {",
      "content": "type UnsafeWatchtowerServer interface {\n\tmustEmbedUnimplementedWatchtowerServer()\n}\n",
      "length": 42,
      "tokens": 2,
      "embedding": []
    },
    {
      "slug": "func RegisterWatchtowerServer(s grpc.ServiceRegistrar, srv WatchtowerServer) {",
      "content": "func RegisterWatchtowerServer(s grpc.ServiceRegistrar, srv WatchtowerServer) {\n\ts.RegisterService(&Watchtower_ServiceDesc, srv)\n}\n",
      "length": 49,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func _Watchtower_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _Watchtower_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(GetInfoRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(WatchtowerServer).GetInfo(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/watchtowerrpc.Watchtower/GetInfo\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(WatchtowerServer).GetInfo(ctx, req.(*GetInfoRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// Watchtower_ServiceDesc is the grpc.ServiceDesc for Watchtower service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar Watchtower_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"watchtowerrpc.Watchtower\",\n\tHandlerType: (*WatchtowerServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GetInfo\",\n\t\t\tHandler:    _Watchtower_GetInfo_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"watchtowerrpc/watchtower.proto\",\n}\n",
      "length": 944,
      "tokens": 102,
      "embedding": []
    }
  ]
}