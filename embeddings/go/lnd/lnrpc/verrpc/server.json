{
  "filepath": "../implementations/go/lnd/lnrpc/verrpc/server.go",
  "package": "verrpc",
  "sections": [
    {
      "slug": "type ServerShell struct {",
      "content": "type ServerShell struct {\n\tVersionerServer\n}\n\n// Server is an rpc server that supports querying for information about the\n// running binary.",
      "length": 110,
      "tokens": 18,
      "embedding": []
    },
    {
      "slug": "type Server struct {",
      "content": "type Server struct {\n\t// Required by the grpc-gateway/v2 library for forward compatibility.\n\tUnimplementedVersionerServer\n}\n\n// Start launches any helper goroutines required for the rpcServer to function.\n//\n// NOTE: This is part of the lnrpc.SubServer interface.",
      "length": 236,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "func (s *Server) Start() error {",
      "content": "func (s *Server) Start() error {\n\treturn nil\n}\n\n// Stop signals any active goroutines for a graceful closure.\n//\n// NOTE: This is part of the lnrpc.SubServer interface.",
      "length": 130,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (s *Server) Stop() error {",
      "content": "func (s *Server) Stop() error {\n\treturn nil\n}\n\n// Name returns a unique string representation of the sub-server. This can be\n// used to identify the sub-server and also de-duplicate them.\n//\n// NOTE: This is part of the lnrpc.SubServer interface.",
      "length": 208,
      "tokens": 36,
      "embedding": []
    },
    {
      "slug": "func (s *Server) Name() string {",
      "content": "func (s *Server) Name() string {\n\treturn subServerName\n}\n\n// RegisterWithRootServer will be called by the root gRPC server to direct a\n// sub RPC server to register itself with the main gRPC root server. Until this\n// is called, each sub-server won't be able to have requests routed towards it.\n//\n// NOTE: This is part of the lnrpc.GrpcHandler interface.",
      "length": 315,
      "tokens": 55,
      "embedding": []
    },
    {
      "slug": "func (r *ServerShell) RegisterWithRootServer(grpcServer *grpc.Server) error {",
      "content": "func (r *ServerShell) RegisterWithRootServer(grpcServer *grpc.Server) error {\n\tRegisterVersionerServer(grpcServer, r)\n\n\tlog.Debugf(\"Versioner RPC server successfully registered with root \" +\n\t\t\"gRPC server\")\n\n\treturn nil\n}\n\n// RegisterWithRestServer will be called by the root REST mux to direct a sub\n// RPC server to register itself with the main REST mux server. Until this is\n// called, each sub-server won't be able to have requests routed towards it.\n//\n// NOTE: This is part of the lnrpc.GrpcHandler interface.",
      "length": 427,
      "tokens": 68,
      "embedding": []
    },
    {
      "slug": "func (r *ServerShell) RegisterWithRestServer(ctx context.Context,",
      "content": "func (r *ServerShell) RegisterWithRestServer(ctx context.Context,\n\tmux *runtime.ServeMux, dest string, opts []grpc.DialOption) error {\n\n\t// We make sure that we register it with the main REST server to ensure\n\t// all our methods are routed properly.\n\terr := RegisterVersionerHandlerFromEndpoint(ctx, mux, dest, opts)\n\tif err != nil {\n\t\tlog.Errorf(\"Could not register Versioner REST server \"+\n\t\t\t\"with root REST server: %v\", err)\n\t\treturn err\n\t}\n\n\tlog.Debugf(\"Versioner REST server successfully registered with \" +\n\t\t\"root REST server\")\n\treturn nil\n}\n\n// CreateSubServer populates the subserver's dependencies using the passed\n// SubServerConfigDispatcher. This method should fully initialize the\n// sub-server instance, making it ready for action. It returns the macaroon\n// permissions that the sub-server wishes to pass on to the root server for all\n// methods routed towards it.\n//\n// NOTE: This is part of the lnrpc.GrpcHandler interface.",
      "length": 854,
      "tokens": 130,
      "embedding": []
    },
    {
      "slug": "func (r *ServerShell) CreateSubServer(_ lnrpc.SubServerConfigDispatcher) (",
      "content": "func (r *ServerShell) CreateSubServer(_ lnrpc.SubServerConfigDispatcher) (\n\tlnrpc.SubServer, lnrpc.MacaroonPerms, error) {\n\n\tsubServer := &Server{}\n\tr.VersionerServer = subServer\n\treturn subServer, macPermissions, nil\n}\n\n// GetVersion returns information about the compiled binary.",
      "length": 199,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (s *Server) GetVersion(_ context.Context,",
      "content": "func (s *Server) GetVersion(_ context.Context,\n\t_ *VersionRequest) (*Version, error) {\n\n\treturn &Version{\n\t\tCommit:        build.Commit,\n\t\tCommitHash:    build.CommitHash,\n\t\tVersion:       build.Version(),\n\t\tAppMajor:      uint32(build.AppMajor),\n\t\tAppMinor:      uint32(build.AppMinor),\n\t\tAppPatch:      uint32(build.AppPatch),\n\t\tAppPreRelease: build.AppPreRelease,\n\t\tBuildTags:     build.Tags(),\n\t\tGoVersion:     build.GoVersion,\n\t}, nil\n}\n",
      "length": 381,
      "tokens": 28,
      "embedding": []
    }
  ]
}