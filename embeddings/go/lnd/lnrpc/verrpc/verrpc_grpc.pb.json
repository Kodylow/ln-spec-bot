{
  "filepath": "../implementations/go/lnd/lnrpc/verrpc/verrpc_grpc.pb.go",
  "package": "verrpc",
  "sections": [
    {
      "slug": "type VersionerClient interface {",
      "content": "type VersionerClient interface {\n\t// lncli: `version`\n\t// GetVersion returns the current version and build information of the running\n\t// daemon.\n\tGetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*Version, error)\n}\n",
      "length": 206,
      "tokens": 26,
      "embedding": []
    },
    {
      "slug": "type versionerClient struct {",
      "content": "type versionerClient struct {\n\tcc grpc.ClientConnInterface\n}\n",
      "length": 29,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func NewVersionerClient(cc grpc.ClientConnInterface) VersionerClient {",
      "content": "func NewVersionerClient(cc grpc.ClientConnInterface) VersionerClient {\n\treturn &versionerClient{cc}\n}\n",
      "length": 29,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func (c *versionerClient) GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*Version, error) {",
      "content": "func (c *versionerClient) GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*Version, error) {\n\tout := new(Version)\n\terr := c.cc.Invoke(ctx, \"/verrpc.Versioner/GetVersion\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// VersionerServer is the server API for Versioner service.\n// All implementations must embed UnimplementedVersionerServer\n// for forward compatibility",
      "length": 295,
      "tokens": 42,
      "embedding": []
    },
    {
      "slug": "type VersionerServer interface {",
      "content": "type VersionerServer interface {\n\t// lncli: `version`\n\t// GetVersion returns the current version and build information of the running\n\t// daemon.\n\tGetVersion(context.Context, *VersionRequest) (*Version, error)\n\tmustEmbedUnimplementedVersionerServer()\n}\n\n// UnimplementedVersionerServer must be embedded to have forward compatible implementations.",
      "length": 306,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "type UnimplementedVersionerServer struct {",
      "content": "type UnimplementedVersionerServer struct {\n}\n",
      "length": 1,
      "tokens": 1,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedVersionerServer) GetVersion(context.Context, *VersionRequest) (*Version, error) {",
      "content": "func (UnimplementedVersionerServer) GetVersion(context.Context, *VersionRequest) (*Version, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method GetVersion not implemented\")\n}",
      "length": 85,
      "tokens": 8,
      "embedding": []
    },
    {
      "slug": "func (UnimplementedVersionerServer) mustEmbedUnimplementedVersionerServer() {}",
      "content": "func (UnimplementedVersionerServer) mustEmbedUnimplementedVersionerServer() {}\n\n// UnsafeVersionerServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to VersionerServer will\n// result in compilation errors.",
      "length": 211,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "type UnsafeVersionerServer interface {",
      "content": "type UnsafeVersionerServer interface {\n\tmustEmbedUnimplementedVersionerServer()\n}\n",
      "length": 41,
      "tokens": 2,
      "embedding": []
    },
    {
      "slug": "func RegisterVersionerServer(s grpc.ServiceRegistrar, srv VersionerServer) {",
      "content": "func RegisterVersionerServer(s grpc.ServiceRegistrar, srv VersionerServer) {\n\ts.RegisterService(&Versioner_ServiceDesc, srv)\n}\n",
      "length": 48,
      "tokens": 3,
      "embedding": []
    },
    {
      "slug": "func _Versioner_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {",
      "content": "func _Versioner_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(VersionRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(VersionerServer).GetVersion(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/verrpc.Versioner/GetVersion\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(VersionerServer).GetVersion(ctx, req.(*VersionRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// Versioner_ServiceDesc is the grpc.ServiceDesc for Versioner service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar Versioner_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"verrpc.Versioner\",\n\tHandlerType: (*VersionerServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"GetVersion\",\n\t\t\tHandler:    _Versioner_GetVersion_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"verrpc/verrpc.proto\",\n}\n",
      "length": 925,
      "tokens": 102,
      "embedding": []
    }
  ]
}