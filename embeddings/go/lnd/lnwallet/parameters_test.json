{
  "filepath": "../implementations/go/lnd/lnwallet/parameters_test.go",
  "package": "lnwallet",
  "sections": [
    {
      "slug": "func TestDefaultRoutingFeeLimitForAmount(t *testing.T) {",
      "content": "func TestDefaultRoutingFeeLimitForAmount(t *testing.T) {\n\tt.Parallel()\n\n\ttests := []struct {\n\t\tamount        lnwire.MilliSatoshi\n\t\texpectedLimit lnwire.MilliSatoshi\n\t}{\n\t\t{\n\t\t\tamount:        1,\n\t\t\texpectedLimit: 1,\n\t\t},\n\t\t{\n\t\t\tamount:        lnwire.NewMSatFromSatoshis(1_000),\n\t\t\texpectedLimit: lnwire.NewMSatFromSatoshis(1_000),\n\t\t},\n\t\t{\n\t\t\tamount:        lnwire.NewMSatFromSatoshis(1_001),\n\t\t\texpectedLimit: 50_050,\n\t\t},\n\t\t{\n\t\t\tamount:        5_000_000_000,\n\t\t\texpectedLimit: 250_000_000,\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\ttest := test\n\n\t\tt.Run(fmt.Sprintf(\"%d sats\", test.amount), func(t *testing.T) {\n\t\t\tfeeLimit := DefaultRoutingFeeLimitForAmount(test.amount)\n\t\t\trequire.Equal(t, int64(test.expectedLimit), int64(feeLimit))\n\t\t})\n\t}\n}\n\n// TestDustLimitForSize tests that we receive the expected dust limits for\n// various script types from btcd's GetDustThreshold function.",
      "length": 792,
      "tokens": 79,
      "embedding": []
    },
    {
      "slug": "func TestDustLimitForSize(t *testing.T) {",
      "content": "func TestDustLimitForSize(t *testing.T) {\n\tt.Parallel()\n\n\ttests := []struct {\n\t\tname          string\n\t\tsize          int\n\t\texpectedLimit btcutil.Amount\n\t}{\n\t\t{\n\t\t\tname:          \"p2pkh dust limit\",\n\t\t\tsize:          input.P2PKHSize,\n\t\t\texpectedLimit: btcutil.Amount(546),\n\t\t},\n\t\t{\n\t\t\tname:          \"p2sh dust limit\",\n\t\t\tsize:          input.P2SHSize,\n\t\t\texpectedLimit: btcutil.Amount(540),\n\t\t},\n\t\t{\n\t\t\tname:          \"p2wpkh dust limit\",\n\t\t\tsize:          input.P2WPKHSize,\n\t\t\texpectedLimit: btcutil.Amount(294),\n\t\t},\n\t\t{\n\t\t\tname:          \"p2wsh dust limit\",\n\t\t\tsize:          input.P2WSHSize,\n\t\t\texpectedLimit: btcutil.Amount(330),\n\t\t},\n\t\t{\n\t\t\tname:          \"unknown witness limit\",\n\t\t\tsize:          input.UnknownWitnessSize,\n\t\t\texpectedLimit: btcutil.Amount(354),\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\ttest := test\n\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\tdustlimit := DustLimitForSize(test.size)\n\t\t\trequire.Equal(t, test.expectedLimit, dustlimit)\n\t\t})\n\t}\n}\n",
      "length": 885,
      "tokens": 86,
      "embedding": []
    }
  ]
}