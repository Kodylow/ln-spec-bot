{
  "filepath": "../implementations/go/lnd/lnwallet/btcwallet/config.go",
  "package": "btcwallet",
  "sections": [
    {
      "slug": "type Config struct {",
      "content": "type Config struct {\n\t// LogDir is the name of the directory which should be used to store\n\t// generated log files.\n\tLogDir string\n\n\t// PrivatePass is the private password to the underlying btcwallet\n\t// instance. Without this, the wallet cannot be decrypted and operated.\n\tPrivatePass []byte\n\n\t// PublicPass is the optional public password to btcwallet. This is\n\t// optionally used to encrypt public material such as public keys and\n\t// scripts.\n\tPublicPass []byte\n\n\t// HdSeed is an optional seed to feed into the wallet. If this is\n\t// unspecified, a new seed will be generated.\n\tHdSeed []byte\n\n\t// Birthday specifies the time at which this wallet was initially\n\t// created. It is used to bound rescans for used addresses.\n\tBirthday time.Time\n\n\t// RecoveryWindow specifies the address look-ahead for which to scan\n\t// when restoring a wallet. The recovery window will apply to all\n\t// default BIP44 derivation paths.\n\tRecoveryWindow uint32\n\n\t// ChainSource is the primary chain interface. This is used to operate\n\t// the wallet and do things such as rescanning, sending transactions,\n\t// notifications for received funds, etc.\n\tChainSource chain.Interface\n\n\t// NetParams is the net parameters for the target chain.\n\tNetParams *chaincfg.Params\n\n\t// CoinType specifies the BIP 44 coin type to be used for derivation.\n\tCoinType uint32\n\n\t// Wallet is an unlocked wallet instance that is set if the\n\t// UnlockerService has already opened and unlocked the wallet. If this\n\t// is nil, then a wallet might have just been created or is simply not\n\t// encrypted at all, in which case it should be attempted to be loaded\n\t// normally when creating the BtcWallet.\n\tWallet *wallet.Wallet\n\n\t// LoaderOptions holds functional wallet db loader options.\n\tLoaderOptions []LoaderOption\n\n\t// CoinSelectionStrategy is the strategy that is used for selecting\n\t// coins when funding a transaction.\n\tCoinSelectionStrategy wallet.CoinSelectionStrategy\n\n\t// WatchOnly indicates that the wallet was initialized with public key\n\t// material only and does not contain any private keys.\n\tWatchOnly bool\n\n\t// MigrateWatchOnly indicates that if a wallet with private key material\n\t// already exists, it should be attempted to be converted into a\n\t// watch-only wallet on first startup. This flag has no effect if no\n\t// wallet exists and a watch-only one is created directly, or, if the\n\t// wallet was previously converted to a watch-only already.\n\tMigrateWatchOnly bool\n}\n\n// NetworkDir returns the directory name of a network directory to hold wallet\n// files.",
      "length": 2447,
      "tokens": 392,
      "embedding": []
    },
    {
      "slug": "func NetworkDir(dataDir string, chainParams *chaincfg.Params) string {",
      "content": "func NetworkDir(dataDir string, chainParams *chaincfg.Params) string {\n\tnetname := chainParams.Name\n\n\t// For now, we must always name the testnet data directory as \"testnet\"\n\t// and not \"testnet3\" or any other version, as the chaincfg testnet3\n\t// parameters will likely be switched to being named \"testnet3\" in the\n\t// future.  This is done to future proof that change, and an upgrade\n\t// plan to move the testnet3 data directory can be worked out later.\n\tif chainParams.Net == wire.TestNet3 {\n\t\tnetname = \"testnet\"\n\t}\n\n\treturn filepath.Join(dataDir, netname)\n}\n",
      "length": 479,
      "tokens": 79,
      "embedding": []
    }
  ]
}