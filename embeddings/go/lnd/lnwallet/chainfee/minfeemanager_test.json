{
  "filepath": "../implementations/go/lnd/lnwallet/chainfee/minfeemanager_test.go",
  "package": "chainfee",
  "sections": [
    {
      "slug": "type mockChainBackend struct {",
      "content": "type mockChainBackend struct {\n\tminFee    SatPerKWeight\n\tcallCount int\n}\n",
      "length": 39,
      "tokens": 5,
      "embedding": []
    },
    {
      "slug": "func (m *mockChainBackend) fetchFee() (SatPerKWeight, error) {",
      "content": "func (m *mockChainBackend) fetchFee() (SatPerKWeight, error) {\n\tm.callCount++\n\treturn m.minFee, nil\n}\n\n// TestMinFeeManager tests that the minFeeManager returns an up to date min fee\n// by querying the chain backend and that it returns a cached fee if the chain\n// backend was recently queried.",
      "length": 225,
      "tokens": 39,
      "embedding": []
    },
    {
      "slug": "func TestMinFeeManager(t *testing.T) {",
      "content": "func TestMinFeeManager(t *testing.T) {\n\tt.Parallel()\n\n\t// Initialize the mock backend and let it have a minimum fee rate\n\t// below our fee floor.\n\tchainBackend := &mockChainBackend{\n\t\tminFee: FeePerKwFloor - 1,\n\t}\n\n\t// Initialise the min fee manager. This should call the chain backend\n\t// once.\n\tfeeManager, err := newMinFeeManager(\n\t\t100*time.Millisecond,\n\t\tchainBackend.fetchFee,\n\t)\n\trequire.NoError(t, err)\n\trequire.Equal(t, 1, chainBackend.callCount)\n\n\t// Check that the minimum fee rate is clamped by our fee floor.\n\trequire.Equal(t, feeManager.minFeePerKW, FeePerKwFloor)\n\n\t// If the fee is requested again, the stored fee should be returned\n\t// and the chain backend should not be queried.\n\tchainBackend.minFee = SatPerKWeight(2000)\n\tminFee := feeManager.fetchMinFee()\n\trequire.Equal(t, minFee, FeePerKwFloor)\n\trequire.Equal(t, 1, chainBackend.callCount)\n\n\t// Fake the passing of time.\n\tfeeManager.lastUpdatedTime = time.Now().Add(-200 * time.Millisecond)\n\n\t// If the fee is queried again after the backoff period has passed\n\t// then the chain backend should be queried again for the min fee.\n\tminFee = feeManager.fetchMinFee()\n\trequire.Equal(t, SatPerKWeight(2000), minFee)\n\trequire.Equal(t, 2, chainBackend.callCount)\n}\n",
      "length": 1155,
      "tokens": 150,
      "embedding": []
    }
  ]
}