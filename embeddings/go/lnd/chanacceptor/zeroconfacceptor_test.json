{
  "filepath": "../implementations/go/lnd/chanacceptor/zeroconfacceptor_test.go",
  "package": "chanacceptor",
  "sections": [
    {
      "slug": "type dummyAcceptor struct{}",
      "content": "type dummyAcceptor struct{}\n",
      "length": 0,
      "tokens": 0,
      "embedding": []
    },
    {
      "slug": "func (d *dummyAcceptor) Accept(",
      "content": "func (d *dummyAcceptor) Accept(\n\treq *ChannelAcceptRequest) *ChannelAcceptResponse {\n\n\treturn &ChannelAcceptResponse{}\n}\n\n// TestZeroConfAcceptorNormal verifies that the ZeroConfAcceptor will let\n// requests go through for non-zero-conf channels if there are no\n// sub-acceptors.",
      "length": 240,
      "tokens": 28,
      "embedding": []
    },
    {
      "slug": "func TestZeroConfAcceptorNormal(t *testing.T) {",
      "content": "func TestZeroConfAcceptorNormal(t *testing.T) {\n\tt.Parallel()\n\n\t// Create the zero-conf acceptor.\n\tzeroAcceptor := NewZeroConfAcceptor()\n\n\t// Assert that calling Accept won't return a failure.\n\treq := &ChannelAcceptRequest{\n\t\tOpenChanMsg: &lnwire.OpenChannel{},\n\t}\n\tresp := zeroAcceptor.Accept(req)\n\trequire.False(t, resp.RejectChannel())\n\n\t// Add a dummyAcceptor to the zero-conf acceptor. Assert that Accept\n\t// does not return a failure.\n\tdummy := &dummyAcceptor{}\n\tdummyID := zeroAcceptor.AddAcceptor(dummy)\n\tresp = zeroAcceptor.Accept(req)\n\trequire.False(t, resp.RejectChannel())\n\n\t// Remove the dummyAcceptor from the zero-conf acceptor and assert that\n\t// Accept doesn't return a failure.\n\tzeroAcceptor.RemoveAcceptor(dummyID)\n\tresp = zeroAcceptor.Accept(req)\n\trequire.False(t, resp.RejectChannel())\n}\n\n// TestZeroConfAcceptorZC verifies that the ZeroConfAcceptor will fail\n// zero-conf channel opens unless a sub-acceptor exists.",
      "length": 862,
      "tokens": 97,
      "embedding": []
    },
    {
      "slug": "func TestZeroConfAcceptorZC(t *testing.T) {",
      "content": "func TestZeroConfAcceptorZC(t *testing.T) {\n\tt.Parallel()\n\n\t// Create the zero-conf acceptor.\n\tzeroAcceptor := NewZeroConfAcceptor()\n\n\tchannelType := new(lnwire.ChannelType)\n\t*channelType = lnwire.ChannelType(*lnwire.NewRawFeatureVector(\n\t\tlnwire.ZeroConfRequired,\n\t))\n\n\t// Assert that calling Accept results in failure.\n\treq := &ChannelAcceptRequest{\n\t\tOpenChanMsg: &lnwire.OpenChannel{\n\t\t\tChannelType: channelType,\n\t\t},\n\t}\n\tresp := zeroAcceptor.Accept(req)\n\trequire.True(t, resp.RejectChannel())\n\n\t// Add a dummyAcceptor to the zero-conf acceptor. Assert that Accept\n\t// does not return a failure.\n\tdummy := &dummyAcceptor{}\n\tdummyID := zeroAcceptor.AddAcceptor(dummy)\n\tresp = zeroAcceptor.Accept(req)\n\trequire.False(t, resp.RejectChannel())\n\n\t// Remove the dummyAcceptor from the zero-conf acceptor and assert that\n\t// Accept returns a failure.\n\tzeroAcceptor.RemoveAcceptor(dummyID)\n\tresp = zeroAcceptor.Accept(req)\n\trequire.True(t, resp.RejectChannel())\n}\n",
      "length": 884,
      "tokens": 90,
      "embedding": []
    }
  ]
}