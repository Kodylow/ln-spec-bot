{
  "filepath": "../implementations/go/lnd/cmd/lncli/devrpc_active.go",
  "package": "main",
  "sections": [
    {
      "slug": "//go:build dev",
      "content": "//go:build dev\n// +build dev\n\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/lightninglabs/protobuf-hex-display/jsonpb\"\n\t\"github.com/lightningnetwork/lnd/lncfg\"\n\t\"github.com/lightningnetwork/lnd/lnrpc\"\n\t\"github.com/lightningnetwork/lnd/lnrpc/devrpc\"\n\t\"github.com/urfave/cli\"\n)\n\n// devCommands will return the set of commands to enable for devrpc builds.",
      "length": 341,
      "tokens": 29,
      "embedding": []
    },
    {
      "slug": "func devCommands() []cli.Command {",
      "content": "func devCommands() []cli.Command {\n\treturn []cli.Command{\n\t\t{\n\t\t\tName:        \"importgraph\",\n\t\t\tCategory:    \"Development\",\n\t\t\tDescription: \"Imports graph from describegraph JSON\",\n\t\t\tUsage:       \"Import the network graph.\",\n\t\t\tArgsUsage:   \"graph-json-file\",\n\t\t\tAction:      actionDecorator(importGraph),\n\t\t},\n\t}\n}\n",
      "length": 271,
      "tokens": 25,
      "embedding": []
    },
    {
      "slug": "func getDevClient(ctx *cli.Context) (devrpc.DevClient, func()) {",
      "content": "func getDevClient(ctx *cli.Context) (devrpc.DevClient, func()) {\n\tconn := getClientConn(ctx, false)\n\tcleanUp := func() {\n\t\tconn.Close()\n\t}\n\treturn devrpc.NewDevClient(conn), cleanUp\n}\n",
      "length": 113,
      "tokens": 14,
      "embedding": []
    },
    {
      "slug": "func importGraph(ctx *cli.Context) error {",
      "content": "func importGraph(ctx *cli.Context) error {\n\tctxc := getContext()\n\tclient, cleanUp := getDevClient(ctx)\n\tdefer cleanUp()\n\n\tjsonFile := lncfg.CleanAndExpandPath(ctx.Args().First())\n\tjsonBytes, err := ioutil.ReadFile(jsonFile)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error reading JSON from file %v: %v\",\n\t\t\tjsonFile, err)\n\t}\n\n\tjsonGraph := &lnrpc.ChannelGraph{}\n\terr = jsonpb.Unmarshal(bytes.NewReader(jsonBytes), jsonGraph)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error parsing JSON: %v\", err)\n\t}\n\tres, err := client.ImportGraph(ctxc, jsonGraph)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tprintRespJSON(res)\n\treturn nil\n}\n",
      "length": 542,
      "tokens": 68,
      "embedding": []
    }
  ]
}