{
  "filepath": "../implementations/go/lnd/monitoring/monitoring_on.go",
  "package": "monitoring",
  "sections": [
    {
      "slug": "//go:build monitoring",
      "content": "//go:build monitoring\n// +build monitoring\n\npackage monitoring\n\nimport (\n\t\"net/http\"\n\t\"sync\"\n\n\tgrpc_prometheus \"github.com/grpc-ecosystem/go-grpc-prometheus\"\n\t\"github.com/lightningnetwork/lnd/lncfg\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"google.golang.org/grpc\"\n)\n\nvar started sync.Once\n\n// GetPromInterceptors returns the set of interceptors for Prometheus\n// monitoring.",
      "length": 355,
      "tokens": 29,
      "embedding": []
    },
    {
      "slug": "func GetPromInterceptors() ([]grpc.UnaryServerInterceptor, []grpc.StreamServerInterceptor) {",
      "content": "func GetPromInterceptors() ([]grpc.UnaryServerInterceptor, []grpc.StreamServerInterceptor) {\n\tunaryInterceptors := []grpc.UnaryServerInterceptor{\n\t\tgrpc_prometheus.UnaryServerInterceptor,\n\t}\n\tstreamInterceptors := []grpc.StreamServerInterceptor{\n\t\tgrpc_prometheus.StreamServerInterceptor,\n\t}\n\treturn unaryInterceptors, streamInterceptors\n}\n\n// ExportPrometheusMetrics sets server options, registers gRPC metrics and\n// launches the Prometheus exporter on the specified address.",
      "length": 374,
      "tokens": 32,
      "embedding": []
    },
    {
      "slug": "func ExportPrometheusMetrics(grpcServer *grpc.Server, cfg lncfg.Prometheus) error {",
      "content": "func ExportPrometheusMetrics(grpcServer *grpc.Server, cfg lncfg.Prometheus) error {\n\tstarted.Do(func() {\n\t\tlog.Infof(\"Prometheus exporter started on %v/metrics\", cfg.Listen)\n\n\t\tgrpc_prometheus.Register(grpcServer)\n\n\t\t// Enable the histograms which can allow plotting latency\n\t\t// distributions of inbound calls. However we guard this behind\n\t\t// another flag as this can generate a lot of additional data,\n\t\t// as its a high cardinality metric typically.\n\t\tif cfg.PerfHistograms {\n\t\t\tgrpc_prometheus.EnableHandlingTimeHistogram()\n\t\t}\n\n\t\thttp.Handle(\"/metrics\", promhttp.Handler())\n\t\tgo func() {\n\t\t\thttp.ListenAndServe(cfg.Listen, nil)\n\t\t}()\n\t})\n\n\treturn nil\n}\n",
      "length": 555,
      "tokens": 65,
      "embedding": []
    }
  ]
}