{
  "filepath": "../implementations/go/lnd/chainreg/chainparams.go",
  "package": "chainreg",
  "sections": [
    {
      "slug": "type BitcoinNetParams struct {",
      "content": "type BitcoinNetParams struct {\n\t*bitcoinCfg.Params\n\tRPCPort  string\n\tCoinType uint32\n}\n\n// LitecoinNetParams couples the p2p parameters of a network with the\n// corresponding RPC port of a daemon running on the particular network.",
      "length": 193,
      "tokens": 29,
      "embedding": []
    },
    {
      "slug": "type LitecoinNetParams struct {",
      "content": "type LitecoinNetParams struct {\n\t*litecoinCfg.Params\n\tRPCPort  string\n\tCoinType uint32\n}\n\n// BitcoinTestNetParams contains parameters specific to the 3rd version of the\n// test network.\nvar BitcoinTestNetParams = BitcoinNetParams{\n\tParams:   &bitcoinCfg.TestNet3Params,\n\tRPCPort:  \"18334\",\n\tCoinType: keychain.CoinTypeTestnet,\n}\n\n// BitcoinMainNetParams contains parameters specific to the current Bitcoin\n// mainnet.\nvar BitcoinMainNetParams = BitcoinNetParams{\n\tParams:   &bitcoinCfg.MainNetParams,\n\tRPCPort:  \"8334\",\n\tCoinType: keychain.CoinTypeBitcoin,\n}\n\n// BitcoinSimNetParams contains parameters specific to the simulation test\n// network.\nvar BitcoinSimNetParams = BitcoinNetParams{\n\tParams:   &bitcoinCfg.SimNetParams,\n\tRPCPort:  \"18556\",\n\tCoinType: keychain.CoinTypeTestnet,\n}\n\n// BitcoinSigNetParams contains parameters specific to the signet test network.\nvar BitcoinSigNetParams = BitcoinNetParams{\n\tParams:   &bitcoinCfg.SigNetParams,\n\tRPCPort:  \"38332\",\n\tCoinType: keychain.CoinTypeTestnet,\n}\n\n// LitecoinSimNetParams contains parameters specific to the simulation test\n// network.\nvar LitecoinSimNetParams = LitecoinNetParams{\n\tParams:   &litecoinCfg.TestNet4Params,\n\tRPCPort:  \"18556\",\n\tCoinType: keychain.CoinTypeTestnet,\n}\n\n// LitecoinTestNetParams contains parameters specific to the 4th version of the\n// test network.\nvar LitecoinTestNetParams = LitecoinNetParams{\n\tParams:   &litecoinCfg.TestNet4Params,\n\tRPCPort:  \"19334\",\n\tCoinType: keychain.CoinTypeTestnet,\n}\n\n// LitecoinMainNetParams contains the parameters specific to the current\n// Litecoin mainnet.\nvar LitecoinMainNetParams = LitecoinNetParams{\n\tParams:   &litecoinCfg.MainNetParams,\n\tRPCPort:  \"9334\",\n\tCoinType: keychain.CoinTypeLitecoin,\n}\n\n// LitecoinRegTestNetParams contains parameters specific to a local litecoin\n// regtest network.\nvar LitecoinRegTestNetParams = LitecoinNetParams{\n\tParams:   &litecoinCfg.RegressionNetParams,\n\tRPCPort:  \"18334\",\n\tCoinType: keychain.CoinTypeTestnet,\n}\n\n// BitcoinRegTestNetParams contains parameters specific to a local bitcoin\n// regtest network.\nvar BitcoinRegTestNetParams = BitcoinNetParams{\n\tParams:   &bitcoinCfg.RegressionNetParams,\n\tRPCPort:  \"18334\",\n\tCoinType: keychain.CoinTypeTestnet,\n}\n\n// ApplyLitecoinParams applies the relevant chain configuration parameters that\n// differ for litecoin to the chain parameters typed for btcsuite derivation.\n// This function is used in place of using something like interface{} to\n// abstract over _which_ chain (or fork) the parameters are for.",
      "length": 2410,
      "tokens": 257,
      "embedding": []
    },
    {
      "slug": "func ApplyLitecoinParams(params *BitcoinNetParams,",
      "content": "func ApplyLitecoinParams(params *BitcoinNetParams,\n\tlitecoinParams *LitecoinNetParams) {\n\n\tparams.Name = litecoinParams.Name\n\tparams.Net = bitcoinWire.BitcoinNet(litecoinParams.Net)\n\tparams.DefaultPort = litecoinParams.DefaultPort\n\tparams.CoinbaseMaturity = litecoinParams.CoinbaseMaturity\n\n\tcopy(params.GenesisHash[:], litecoinParams.GenesisHash[:])\n\n\t// Address encoding magics\n\tparams.PubKeyHashAddrID = litecoinParams.PubKeyHashAddrID\n\tparams.ScriptHashAddrID = litecoinParams.ScriptHashAddrID\n\tparams.PrivateKeyID = litecoinParams.PrivateKeyID\n\tparams.WitnessPubKeyHashAddrID = litecoinParams.WitnessPubKeyHashAddrID\n\tparams.WitnessScriptHashAddrID = litecoinParams.WitnessScriptHashAddrID\n\tparams.Bech32HRPSegwit = litecoinParams.Bech32HRPSegwit\n\n\tcopy(params.HDPrivateKeyID[:], litecoinParams.HDPrivateKeyID[:])\n\tcopy(params.HDPublicKeyID[:], litecoinParams.HDPublicKeyID[:])\n\n\tparams.HDCoinType = litecoinParams.HDCoinType\n\n\tcheckPoints := make([]chaincfg.Checkpoint, len(litecoinParams.Checkpoints))\n\tfor i := 0; i < len(litecoinParams.Checkpoints); i++ {\n\t\tvar chainHash chainhash.Hash\n\t\tcopy(chainHash[:], litecoinParams.Checkpoints[i].Hash[:])\n\n\t\tcheckPoints[i] = chaincfg.Checkpoint{\n\t\t\tHeight: litecoinParams.Checkpoints[i].Height,\n\t\t\tHash:   &chainHash,\n\t\t}\n\t}\n\tparams.Checkpoints = checkPoints\n\n\tparams.RPCPort = litecoinParams.RPCPort\n\tparams.CoinType = litecoinParams.CoinType\n}\n\n// IsTestnet tests if the givern params correspond to a testnet\n// parameter configuration.",
      "length": 1399,
      "tokens": 97,
      "embedding": []
    },
    {
      "slug": "func IsTestnet(params *BitcoinNetParams) bool {",
      "content": "func IsTestnet(params *BitcoinNetParams) bool {\n\tswitch params.Params.Net {\n\tcase bitcoinWire.TestNet3, bitcoinWire.BitcoinNet(litecoinWire.TestNet4):\n\t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}\n",
      "length": 140,
      "tokens": 13,
      "embedding": []
    }
  ]
}