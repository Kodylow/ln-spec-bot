{
  "filepath": "../implementations/go/lnd/contractcourt/interfaces.go",
  "package": "contractcourt",
  "sections": [
    {
      "slug": "type Registry interface {",
      "content": "type Registry interface {\n\t// LookupInvoice attempts to look up an invoice according to its 32\n\t// byte payment hash.\n\tLookupInvoice(lntypes.Hash) (invoices.Invoice, error)\n\n\t// NotifyExitHopHtlc attempts to mark an invoice as settled. If the\n\t// invoice is a debug invoice, then this method is a noop as debug\n\t// invoices are never fully settled. The return value describes how the\n\t// htlc should be resolved. If the htlc cannot be resolved immediately,\n\t// the resolution is sent on the passed in hodlChan later.\n\tNotifyExitHopHtlc(payHash lntypes.Hash, paidAmount lnwire.MilliSatoshi,\n\t\texpiry uint32, currentHeight int32,\n\t\tcircuitKey models.CircuitKey, hodlChan chan<- interface{},\n\t\tpayload invoices.Payload) (invoices.HtlcResolution, error)\n\n\t// HodlUnsubscribeAll unsubscribes from all htlc resolutions.\n\tHodlUnsubscribeAll(subscriber chan<- interface{})\n}\n\n// OnionProcessor is an interface used to decode onion blobs.",
      "length": 885,
      "tokens": 117,
      "embedding": []
    },
    {
      "slug": "type OnionProcessor interface {",
      "content": "type OnionProcessor interface {\n\t// ReconstructHopIterator attempts to decode a valid sphinx packet from\n\t// the passed io.Reader instance.\n\tReconstructHopIterator(r io.Reader, rHash []byte) (hop.Iterator, error)\n}\n\n// UtxoSweeper defines the sweep functions that contract court requires.",
      "length": 251,
      "tokens": 32,
      "embedding": []
    },
    {
      "slug": "type UtxoSweeper interface {",
      "content": "type UtxoSweeper interface {\n\t// SweepInput sweeps inputs back into the wallet.\n\tSweepInput(input input.Input, params sweep.Params) (chan sweep.Result,\n\t\terror)\n\n\t// CreateSweepTx accepts a list of inputs and signs and generates a txn\n\t// that spends from them. This method also makes an accurate fee\n\t// estimate before generating the required witnesses.\n\tCreateSweepTx(inputs []input.Input, feePref sweep.FeePreference,\n\t\tcurrentBlockHeight uint32) (*wire.MsgTx, error)\n\n\t// RelayFeePerKW returns the minimum fee rate required for transactions\n\t// to be relayed.\n\tRelayFeePerKW() chainfee.SatPerKWeight\n\n\t// UpdateParams allows updating the sweep parameters of a pending input\n\t// in the UtxoSweeper. This function can be used to provide an updated\n\t// fee preference that will be used for a new sweep transaction of the\n\t// input that will act as a replacement transaction (RBF) of the\n\t// original sweeping transaction, if any.\n\tUpdateParams(input wire.OutPoint, params sweep.ParamsUpdate) (\n\t\tchan sweep.Result, error)\n}\n\n// HtlcNotifier defines the notification functions that contract court requires.",
      "length": 1055,
      "tokens": 146,
      "embedding": []
    },
    {
      "slug": "type HtlcNotifier interface {",
      "content": "type HtlcNotifier interface {\n\t// NotifyFinalHtlcEvent notifies the HtlcNotifier that the final outcome\n\t// for an htlc has been determined.\n\tNotifyFinalHtlcEvent(key models.CircuitKey,\n\t\tinfo channeldb.FinalHtlcInfo)\n}\n",
      "length": 185,
      "tokens": 21,
      "embedding": []
    }
  ]
}