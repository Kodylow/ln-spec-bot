{
  "filepath": "../implementations/go/lnd/pool/read.go",
  "package": "pool",
  "sections": [
    {
      "slug": "type Read struct {",
      "content": "type Read struct {\n\tworkerPool *Worker\n\tbufferPool *ReadBuffer\n}\n\n// NewRead creates a new Read pool, using an underlying ReadBuffer pool to\n// recycle buffer.Read objects across the lifetime of the Read pool's workers.",
      "length": 195,
      "tokens": 30,
      "embedding": []
    },
    {
      "slug": "func NewRead(readBufferPool *ReadBuffer, numWorkers int,",
      "content": "func NewRead(readBufferPool *ReadBuffer, numWorkers int,\n\tworkerTimeout time.Duration) *Read {\n\n\tr := &Read{\n\t\tbufferPool: readBufferPool,\n\t}\n\tr.workerPool = NewWorker(&WorkerConfig{\n\t\tNewWorkerState: r.newWorkerState,\n\t\tNumWorkers:     numWorkers,\n\t\tWorkerTimeout:  workerTimeout,\n\t})\n\n\treturn r\n}\n\n// Start safely spins up the Read pool.",
      "length": 268,
      "tokens": 31,
      "embedding": []
    },
    {
      "slug": "func (r *Read) Start() error {",
      "content": "func (r *Read) Start() error {\n\treturn r.workerPool.Start()\n}\n\n// Stop safely shuts down the Read pool.",
      "length": 69,
      "tokens": 11,
      "embedding": []
    },
    {
      "slug": "func (r *Read) Stop() error {",
      "content": "func (r *Read) Stop() error {\n\treturn r.workerPool.Stop()\n}\n\n// Submit accepts a function closure that provides access to the fresh\n// buffer.Read object. The function's execution will be allocated to one of the\n// underlying Worker pool's goroutines.",
      "length": 216,
      "tokens": 33,
      "embedding": []
    },
    {
      "slug": "func (r *Read) Submit(inner func(*buffer.Read) error) error {",
      "content": "func (r *Read) Submit(inner func(*buffer.Read) error) error {\n\treturn r.workerPool.Submit(func(s WorkerState) error {\n\t\tstate := s.(*readWorkerState)\n\t\treturn inner(state.readBuf)\n\t})\n}\n\n// readWorkerState is the per-goroutine state maintained by a Read pool's\n// goroutines.",
      "length": 206,
      "tokens": 25,
      "embedding": []
    },
    {
      "slug": "type readWorkerState struct {",
      "content": "type readWorkerState struct {\n\t// bufferPool is the pool to which the readBuf will be returned when the\n\t// goroutine exits.\n\tbufferPool *ReadBuffer\n\n\t// readBuf is a buffer taken from the bufferPool on initialization,\n\t// which will be cleaned and provided to any tasks that the goroutine\n\t// processes before exiting.\n\treadBuf *buffer.Read\n}\n\n// newWorkerState initializes a new readWorkerState, which will be called\n// whenever a new goroutine is allocated to begin processing read tasks.",
      "length": 450,
      "tokens": 72,
      "embedding": []
    },
    {
      "slug": "func (r *Read) newWorkerState() WorkerState {",
      "content": "func (r *Read) newWorkerState() WorkerState {\n\treturn &readWorkerState{\n\t\tbufferPool: r.bufferPool,\n\t\treadBuf:    r.bufferPool.Take(),\n\t}\n}\n\n// Cleanup returns the readBuf to the underlying buffer pool, and removes the\n// goroutine's reference to the readBuf.",
      "length": 206,
      "tokens": 27,
      "embedding": []
    },
    {
      "slug": "func (r *readWorkerState) Cleanup() {",
      "content": "func (r *readWorkerState) Cleanup() {\n\tr.bufferPool.Return(r.readBuf)\n\tr.readBuf = nil\n}\n\n// Reset recycles the readBuf to make it ready for any subsequent tasks the\n// goroutine may process.",
      "length": 148,
      "tokens": 23,
      "embedding": []
    },
    {
      "slug": "func (r *readWorkerState) Reset() {",
      "content": "func (r *readWorkerState) Reset() {\n\tr.readBuf.Recycle()\n}\n",
      "length": 21,
      "tokens": 2,
      "embedding": []
    }
  ]
}