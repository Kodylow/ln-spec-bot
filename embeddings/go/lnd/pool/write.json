{
  "filepath": "../implementations/go/lnd/pool/write.go",
  "package": "pool",
  "sections": [
    {
      "slug": "type Write struct {",
      "content": "type Write struct {\n\tworkerPool *Worker\n\tbufferPool *WriteBuffer\n}\n\n// NewWrite creates a Write pool, using an underlying Writebuffer pool to\n// recycle buffer.Write objects across the lifetime of the Write pool's\n// workers.",
      "length": 199,
      "tokens": 30,
      "embedding": []
    },
    {
      "slug": "func NewWrite(writeBufferPool *WriteBuffer, numWorkers int,",
      "content": "func NewWrite(writeBufferPool *WriteBuffer, numWorkers int,\n\tworkerTimeout time.Duration) *Write {\n\n\tw := &Write{\n\t\tbufferPool: writeBufferPool,\n\t}\n\tw.workerPool = NewWorker(&WorkerConfig{\n\t\tNewWorkerState: w.newWorkerState,\n\t\tNumWorkers:     numWorkers,\n\t\tWorkerTimeout:  workerTimeout,\n\t})\n\n\treturn w\n}\n\n// Start safely spins up the Write pool.",
      "length": 272,
      "tokens": 31,
      "embedding": []
    },
    {
      "slug": "func (w *Write) Start() error {",
      "content": "func (w *Write) Start() error {\n\treturn w.workerPool.Start()\n}\n\n// Stop safely shuts down the Write pool.",
      "length": 70,
      "tokens": 11,
      "embedding": []
    },
    {
      "slug": "func (w *Write) Stop() error {",
      "content": "func (w *Write) Stop() error {\n\treturn w.workerPool.Stop()\n}\n\n// Submit accepts a function closure that provides access to a fresh\n// bytes.Buffer backed by a buffer.Write object. The function's execution will\n// be allocated to one of the underlying Worker pool's goroutines.",
      "length": 240,
      "tokens": 37,
      "embedding": []
    },
    {
      "slug": "func (w *Write) Submit(inner func(*bytes.Buffer) error) error {",
      "content": "func (w *Write) Submit(inner func(*bytes.Buffer) error) error {\n\treturn w.workerPool.Submit(func(s WorkerState) error {\n\t\tstate := s.(*writeWorkerState)\n\t\treturn inner(state.buf)\n\t})\n}\n\n// writeWorkerState is the per-goroutine state maintained by a Write pool's\n// goroutines.",
      "length": 205,
      "tokens": 25,
      "embedding": []
    },
    {
      "slug": "type writeWorkerState struct {",
      "content": "type writeWorkerState struct {\n\t// bufferPool is the pool to which the writeBuf will be returned when\n\t// the goroutine exits.\n\tbufferPool *WriteBuffer\n\n\t// writeBuf is the buffer taken from the bufferPool on initialization,\n\t// which will be used to back the buf object provided to any tasks that\n\t// the goroutine processes before exiting.\n\twriteBuf *buffer.Write\n\n\t// buf is a buffer backed by writeBuf, that can be written to by tasks\n\t// submitted to the Write pool. The buf will be reset between each task\n\t// processed by a goroutine before exiting, and allows the task\n\t// submitters to interact with the writeBuf as if it were an io.Writer.\n\tbuf *bytes.Buffer\n}\n\n// newWorkerState initializes a new writeWorkerState, which will be called\n// whenever a new goroutine is allocated to begin processing write tasks.",
      "length": 772,
      "tokens": 131,
      "embedding": []
    },
    {
      "slug": "func (w *Write) newWorkerState() WorkerState {",
      "content": "func (w *Write) newWorkerState() WorkerState {\n\twriteBuf := w.bufferPool.Take()\n\n\treturn &writeWorkerState{\n\t\tbufferPool: w.bufferPool,\n\t\twriteBuf:   writeBuf,\n\t\tbuf:        bytes.NewBuffer(writeBuf[0:0:len(writeBuf)]),\n\t}\n}\n\n// Cleanup returns the writeBuf to the underlying buffer pool, and removes the\n// goroutine's reference to the writeBuf and encapsulating buf.",
      "length": 311,
      "tokens": 35,
      "embedding": []
    },
    {
      "slug": "func (w *writeWorkerState) Cleanup() {",
      "content": "func (w *writeWorkerState) Cleanup() {\n\tw.bufferPool.Return(w.writeBuf)\n\tw.writeBuf = nil\n\tw.buf = nil\n}\n\n// Reset resets the bytes.Buffer so that it is zero-length and has the capacity\n// of the underlying buffer.Write.k",
      "length": 176,
      "tokens": 27,
      "embedding": []
    },
    {
      "slug": "func (w *writeWorkerState) Reset() {",
      "content": "func (w *writeWorkerState) Reset() {\n\tw.buf.Reset()\n}\n",
      "length": 15,
      "tokens": 2,
      "embedding": []
    }
  ]
}