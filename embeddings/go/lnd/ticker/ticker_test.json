{
  "filepath": "../implementations/go/lnd/ticker/ticker_test.go",
  "package": "ticker_test",
  "sections": [
    {
      "slug": "func TestInterfaceTickers(t *testing.T) {",
      "content": "func TestInterfaceTickers(t *testing.T) {\n\tfor _, test := range tickers {\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\ttestTicker(t, test.ticker)\n\t\t})\n\t}\n}\n\n// testTicker asserts the behavior of a freshly initialized ticker.Ticker.",
      "length": 180,
      "tokens": 26,
      "embedding": []
    },
    {
      "slug": "func testTicker(t *testing.T, ticker ticker.Ticker) {",
      "content": "func testTicker(t *testing.T, ticker ticker.Ticker) {\n\t// Newly initialized ticker should start off inactive.\n\tselect {\n\tcase <-ticker.Ticks():\n\t\tt.Fatalf(\"ticker should not have ticked before calling Resume\")\n\tcase <-time.After(2 * interval):\n\t}\n\n\t// Resume, ticker should be active and start sending ticks.\n\tticker.Resume()\n\n\tfor i := 0; i < numActiveTicks; i++ {\n\t\tselect {\n\t\tcase <-ticker.Ticks():\n\t\tcase <-time.After(2 * interval):\n\t\t\tt.Fatalf(\n\t\t\t\t\"ticker should have ticked after calling Resume\",\n\t\t\t)\n\t\t}\n\t}\n\n\t// Pause, check that ticker is inactive and sends no ticks.\n\tticker.Pause()\n\n\tselect {\n\tcase <-ticker.Ticks():\n\t\tt.Fatalf(\"ticker should not have ticked after calling Pause\")\n\tcase <-time.After(2 * interval):\n\t}\n\n\t// Pause again, expect same behavior as after first invocation.\n\tticker.Pause()\n\n\tselect {\n\tcase <-ticker.Ticks():\n\t\tt.Fatalf(\"ticker should not have ticked after calling Pause again\")\n\tcase <-time.After(2 * interval):\n\t}\n\n\t// Resume again, should result in normal active behavior.\n\tticker.Resume()\n\n\tfor i := 0; i < numActiveTicks; i++ {\n\t\tselect {\n\t\tcase <-ticker.Ticks():\n\t\tcase <-time.After(2 * interval):\n\t\t\tt.Fatalf(\n\t\t\t\t\"ticker should have ticked after calling Resume\",\n\t\t\t)\n\t\t}\n\t}\n\n\t// Stop the ticker altogether, should render it inactive.\n\tticker.Stop()\n\n\tselect {\n\tcase <-ticker.Ticks():\n\t\tt.Fatalf(\"ticker should not have ticked after calling Stop\")\n\tcase <-time.After(2 * interval):\n\t}\n}\n",
      "length": 1319,
      "tokens": 188,
      "embedding": []
    }
  ]
}