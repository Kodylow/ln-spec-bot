{
  "filepath": "../implementations/go/lnd/itest/lnd_trackpayments_test.go",
  "package": "itest",
  "sections": [
    {
      "slug": "func testTrackPayments(ht *lntest.HarnessTest) {",
      "content": "func testTrackPayments(ht *lntest.HarnessTest) {\n\t// Open a channel between alice and bob.\n\talice, bob := ht.Alice, ht.Bob\n\tchannel := ht.OpenChannel(\n\t\talice, bob, lntest.OpenChannelParams{\n\t\t\tAmt: btcutil.Amount(300000),\n\t\t},\n\t)\n\n\t// Call the TrackPayments api to listen for payment updates.\n\treq := &routerrpc.TrackPaymentsRequest{\n\t\tNoInflightUpdates: false,\n\t}\n\ttracker := alice.RPC.TrackPayments(req)\n\n\t// Create an invoice from bob.\n\tvar amountMsat int64 = 1000\n\tinvoiceResp := bob.RPC.AddInvoice(\n\t\t&lnrpc.Invoice{\n\t\t\tValueMsat: amountMsat,\n\t\t},\n\t)\n\tinvoice := bob.RPC.LookupInvoice(invoiceResp.RHash)\n\n\t// Send payment from alice to bob.\n\tpaymentClient := alice.RPC.SendPayment(\n\t\t&routerrpc.SendPaymentRequest{\n\t\t\tPaymentRequest: invoice.PaymentRequest,\n\t\t\tTimeoutSeconds: 60,\n\t\t},\n\t)\n\n\t// Make sure the payment doesn't error due to invalid parameters or so.\n\t_, err := paymentClient.Recv()\n\trequire.NoError(ht, err, \"unable to get payment update.\")\n\n\t// Assert the first payment update is an inflight update.\n\tupdate1, err := tracker.Recv()\n\trequire.NoError(ht, err, \"unable to receive payment update 1.\")\n\n\trequire.Equal(\n\t\tht, lnrpc.PaymentFailureReason_FAILURE_REASON_NONE,\n\t\tupdate1.FailureReason,\n\t)\n\trequire.Equal(ht, lnrpc.Payment_IN_FLIGHT, update1.Status)\n\trequire.Equal(ht, invoice.PaymentRequest, update1.PaymentRequest)\n\trequire.Equal(ht, amountMsat, update1.ValueMsat)\n\n\t// Assert the second payment update is a payment success update.\n\tupdate2, err := tracker.Recv()\n\trequire.NoError(ht, err, \"unable to receive payment update 2.\")\n\n\trequire.Equal(\n\t\tht, lnrpc.PaymentFailureReason_FAILURE_REASON_NONE,\n\t\tupdate2.FailureReason,\n\t)\n\trequire.Equal(ht, lnrpc.Payment_SUCCEEDED, update2.Status)\n\trequire.Equal(ht, invoice.PaymentRequest, update2.PaymentRequest)\n\trequire.Equal(ht, amountMsat, update2.ValueMsat)\n\trequire.Equal(\n\t\tht, hex.EncodeToString(invoice.RPreimage),\n\t\tupdate2.PaymentPreimage,\n\t)\n\n\t// TODO(yy): remove the sleep once the following bug is fixed.\n\t// When the invoice is reported settled, the commitment dance is not\n\t// yet finished, which can cause an error when closing the channel,\n\t// saying there's active HTLCs. We need to investigate this issue and\n\t// reverse the order to, first finish the commitment dance, then report\n\t// the invoice as settled.\n\ttime.Sleep(2 * time.Second)\n\n\tht.CloseChannel(alice, channel)\n}\n",
      "length": 2243,
      "tokens": 253,
      "embedding": []
    }
  ]
}