{
  "filepath": "../implementations/go/lnd/itest/lnd_wipe_fwdpkgs_test.go",
  "package": "itest",
  "sections": [
    {
      "slug": "func testWipeForwardingPackages(ht *lntest.HarnessTest) {",
      "content": "func testWipeForwardingPackages(ht *lntest.HarnessTest) {\n\tconst (\n\t\tchanAmt        = 10e6\n\t\tpaymentAmt     = 10e4\n\t\tfinalCTLVDelta = chainreg.DefaultBitcoinTimeLockDelta\n\t\tnumInvoices    = 3\n\t)\n\n\t// Grab Alice and Bob from HarnessTest.\n\talice, bob := ht.Alice, ht.Bob\n\n\t// Create a new node Carol, which will create invoices that require\n\t// Alice to pay.\n\tcarol := ht.NewNode(\"Carol\", nil)\n\n\t// Connect Bob to Carol.\n\tht.ConnectNodes(bob, carol)\n\n\t// Open a channel between Alice and Bob.\n\tchanPointAB := ht.OpenChannel(\n\t\talice, bob, lntest.OpenChannelParams{Amt: chanAmt},\n\t)\n\n\t// Open a channel between Bob and Carol.\n\tchanPointBC := ht.OpenChannel(\n\t\tbob, carol, lntest.OpenChannelParams{Amt: chanAmt},\n\t)\n\n\t// Before we continue, make sure Alice has seen the channel between Bob\n\t// and Carol.\n\tht.AssertTopologyChannelOpen(alice, chanPointBC)\n\n\t// Alice sends several payments to Carol through Bob, which triggers\n\t// Bob to create forwarding packages.\n\tfor i := 0; i < numInvoices; i++ {\n\t\t// Add an invoice for Carol.\n\t\tinvoice := &lnrpc.Invoice{Memo: \"testing\", Value: paymentAmt}\n\t\tresp := carol.RPC.AddInvoice(invoice)\n\n\t\t// Alice sends a payment to Carol through Bob.\n\t\tht.CompletePaymentRequests(alice, []string{resp.PaymentRequest})\n\t}\n\n\t// TODO(yy): remove the sleep once the following bug is fixed.\n\t// When the invoice is reported settled, the commitment dance is not\n\t// yet finished, which can cause an error when closing the channel,\n\t// saying there's active HTLCs. We need to investigate this issue and\n\t// reverse the order to, first finish the commitment dance, then report\n\t// the invoice as settled.\n\ttime.Sleep(2 * time.Second)\n\n\t// Firstly, Bob force closes the channel.\n\tht.CloseChannelAssertPending(bob, chanPointAB, true)\n\n\t// Now that the channel has been force closed, it should show up in\n\t// bob's PendingChannels RPC under the waiting close section.\n\tpendingAB := ht.AssertChannelWaitingClose(bob, chanPointAB).Channel\n\n\t// Check that Bob has created forwarding packages. We don't care the\n\t// exact number here as long as these packages are deleted when the\n\t// channel is closed.\n\trequire.NotZero(ht, pendingAB.NumForwardingPackages)\n\n\t// Secondly, Bob coop closes the channel.\n\tht.CloseChannelAssertPending(bob, chanPointBC, false)\n\n\t// Now that the channel has been coop closed, it should show up in\n\t// bob's PendingChannels RPC under the waiting close section.\n\tpendingBC := ht.AssertChannelWaitingClose(bob, chanPointBC).Channel\n\n\t// Check that Bob has created forwarding packages. We don't care the\n\t// exact number here as long as these packages are deleted when the\n\t// channel is closed.\n\trequire.NotZero(ht, pendingBC.NumForwardingPackages)\n\n\t// Since it's a coop close, Carol should see the waiting close channel\n\t// too.\n\tpendingBC = ht.AssertChannelWaitingClose(carol, chanPointBC).Channel\n\trequire.NotZero(ht, pendingBC.NumForwardingPackages)\n\n\t// Mine 1 block to get the two closing transactions confirmed.\n\tht.MineBlocksAndAssertNumTxes(1, 2)\n\n\t// Now that the closing transaction is confirmed, the above waiting\n\t// close channel should now become pending force closed channel.\n\tpendingAB = ht.AssertChannelPendingForceClose(bob, chanPointAB).Channel\n\n\t// Check the forwarding pacakges are deleted.\n\trequire.Zero(ht, pendingAB.NumForwardingPackages)\n\n\t// For Alice, the forwarding packages should have been wiped too.\n\tpending := ht.AssertChannelPendingForceClose(alice, chanPointAB)\n\tpendingAB = pending.Channel\n\trequire.Zero(ht, pendingAB.NumForwardingPackages)\n\n\t// Mine 1 block to get Alice's sweeping tx confirmed.\n\tht.MineBlocksAndAssertNumTxes(1, 1)\n\n\t// Clean up the force closed channel.\n\tht.CleanupForceClose(bob, chanPointAB)\n}\n",
      "length": 3538,
      "tokens": 470,
      "embedding": []
    }
  ]
}