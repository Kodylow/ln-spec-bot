{
  "filepath": "../implementations/go/lnd/lncfg/protocol_integration.go",
  "package": "integration",
  "sections": [
    {
      "slug": "type ProtocolOptions struct {",
      "content": "type ProtocolOptions struct {\n\t// LegacyProtocol is a sub-config that houses all the legacy protocol\n\t// options.  These are mostly used for integration tests as most modern\n\t// nodes should always run with them on by default.\n\tLegacyProtocol `group:\"legacy\" namespace:\"legacy\"`\n\n\t// ExperimentalProtocol is a sub-config that houses any experimental\n\t// protocol features that also require a build-tag to activate.\n\tExperimentalProtocol\n\n\t// WumboChans should be set if we want to enable support for wumbo\n\t// (channels larger than 0.16 BTC) channels, which is the opposite of\n\t// mini.\n\tWumboChans bool `long:\"wumbo-channels\" description:\"if set, then lnd will create and accept requests for channels larger chan 0.16 BTC\"`\n\n\t// Anchors enables anchor commitments.\n\t// TODO(halseth): transition itests to anchors instead!\n\tAnchors bool `long:\"anchors\" description:\"enable support for anchor commitments\"`\n\n\t// ScriptEnforcedLease enables script enforced commitments for channel\n\t// leases.\n\t//\n\t// TODO: Move to experimental?\n\tScriptEnforcedLease bool `long:\"script-enforced-lease\" description:\"enable support for script enforced lease commitments\"`\n\n\t// OptionScidAlias should be set if we want to signal the\n\t// option-scid-alias feature bit. This allows scid aliases and the\n\t// option-scid-alias channel-type.\n\tOptionScidAlias bool `long:\"option-scid-alias\" description:\"enable support for option_scid_alias channels\"`\n\n\t// OptionZeroConf should be set if we want to signal the zero-conf\n\t// feature bit.\n\tOptionZeroConf bool `long:\"zero-conf\" description:\"enable support for zero-conf channels, must have option-scid-alias set also\"`\n\n\t// NoOptionAnySegwit should be set to true if we don't want to use any\n\t// Taproot (and beyond) addresses for co-op closing.\n\tNoOptionAnySegwit bool `long:\"no-any-segwit\" description:\"disallow using any segiwt witness version as a co-op close address\"`\n}\n\n// Wumbo returns true if lnd should permit the creation and acceptance of wumbo\n// channels.",
      "length": 1921,
      "tokens": 260,
      "embedding": []
    },
    {
      "slug": "func (l *ProtocolOptions) Wumbo() bool {",
      "content": "func (l *ProtocolOptions) Wumbo() bool {\n\treturn l.WumboChans\n}\n\n// NoAnchorCommitments returns true if we have disabled support for the anchor\n// commitment type.",
      "length": 118,
      "tokens": 18,
      "embedding": []
    },
    {
      "slug": "func (l *ProtocolOptions) NoAnchorCommitments() bool {",
      "content": "func (l *ProtocolOptions) NoAnchorCommitments() bool {\n\treturn !l.Anchors\n}\n\n// NoScriptEnforcementLease returns true if we have disabled support for the\n// script enforcement commitment type for leased channels.",
      "length": 153,
      "tokens": 22,
      "embedding": []
    },
    {
      "slug": "func (l *ProtocolOptions) NoScriptEnforcementLease() bool {",
      "content": "func (l *ProtocolOptions) NoScriptEnforcementLease() bool {\n\treturn !l.ScriptEnforcedLease\n}\n\n// ScidAlias returns true if we have enabled the option-scid-alias feature bit.",
      "length": 110,
      "tokens": 15,
      "embedding": []
    },
    {
      "slug": "func (l *ProtocolOptions) ScidAlias() bool {",
      "content": "func (l *ProtocolOptions) ScidAlias() bool {\n\treturn l.OptionScidAlias\n}\n\n// ZeroConf returns true if we have enabled the zero-conf feature bit.",
      "length": 96,
      "tokens": 15,
      "embedding": []
    },
    {
      "slug": "func (l *ProtocolOptions) ZeroConf() bool {",
      "content": "func (l *ProtocolOptions) ZeroConf() bool {\n\treturn l.OptionZeroConf\n}\n\n// NoAnySegwit returns true if we don't signal that we understand other newer\n// segwit witness versions for co-op close addresses.",
      "length": 155,
      "tokens": 24,
      "embedding": []
    },
    {
      "slug": "func (l *ProtocolOptions) NoAnySegwit() bool {",
      "content": "func (l *ProtocolOptions) NoAnySegwit() bool {\n\treturn l.NoOptionAnySegwit\n}\n",
      "length": 28,
      "tokens": 3,
      "embedding": []
    }
  ]
}