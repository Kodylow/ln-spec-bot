{
  "filepath": "../implementations/go/lnd/lncfg/chain.go",
  "package": "lncfg",
  "sections": [
    {
      "slug": "type Chain struct {",
      "content": "type Chain struct {\n\tActive   bool   `long:\"active\" description:\"If the chain should be active or not.\"`\n\tChainDir string `long:\"chaindir\" description:\"The directory to store the chain's data within.\"`\n\n\tNode string `long:\"node\" description:\"The blockchain interface to use.\" choice:\"btcd\" choice:\"bitcoind\" choice:\"neutrino\" choice:\"ltcd\" choice:\"litecoind\" choice:\"nochainbackend\"`\n\n\tMainNet         bool     `long:\"mainnet\" description:\"Use the main network\"`\n\tTestNet3        bool     `long:\"testnet\" description:\"Use the test network\"`\n\tSimNet          bool     `long:\"simnet\" description:\"Use the simulation test network\"`\n\tRegTest         bool     `long:\"regtest\" description:\"Use the regression test network\"`\n\tSigNet          bool     `long:\"signet\" description:\"Use the signet test network\"`\n\tSigNetChallenge string   `long:\"signetchallenge\" description:\"Connect to a custom signet network defined by this challenge instead of using the global default signet test network -- Can be specified multiple times\"`\n\tSigNetSeedNode  []string `long:\"signetseednode\" description:\"Specify a seed node for the signet network instead of using the global default signet network seed nodes\"`\n\n\tDefaultNumChanConfs int                 `long:\"defaultchanconfs\" description:\"The default number of confirmations a channel must have before it's considered open. If this is not set, we will scale the value according to the channel size.\"`\n\tDefaultRemoteDelay  int                 `long:\"defaultremotedelay\" description:\"The default number of blocks we will require our channel counterparty to wait before accessing its funds in case of unilateral close. If this is not set, we will scale the value according to the channel size.\"`\n\tMaxLocalDelay       uint16              `long:\"maxlocaldelay\" description:\"The maximum blocks we will allow our funds to be timelocked before accessing its funds in case of unilateral close. If a peer proposes a value greater than this, we will reject the channel.\"`\n\tMinHTLCIn           lnwire.MilliSatoshi `long:\"minhtlc\" description:\"The smallest HTLC we are willing to accept on our channels, in millisatoshi\"`\n\tMinHTLCOut          lnwire.MilliSatoshi `long:\"minhtlcout\" description:\"The smallest HTLC we are willing to send out on our channels, in millisatoshi\"`\n\tBaseFee             lnwire.MilliSatoshi `long:\"basefee\" description:\"The base fee in millisatoshi we will charge for forwarding payments on our channels\"`\n\tFeeRate             lnwire.MilliSatoshi `long:\"feerate\" description:\"The fee rate used when forwarding payments on our channels. The total fee charged is basefee + (amount * feerate / 1000000), where amount is the forwarded amount.\"`\n\tTimeLockDelta       uint32              `long:\"timelockdelta\" description:\"The CLTV delta we will subtract from a forwarded HTLC's timelock value\"`\n\tDNSSeeds            []string            `long:\"dnsseed\" description:\"The seed DNS server(s) to use for initial peer discovery. Must be specified as a '<primary_dns>[,<soa_primary_dns>]' tuple where the SOA address is needed for DNS resolution through Tor but is optional for clearnet users. Multiple tuples can be specified, will overwrite the default seed servers.\"`\n}\n\n// Validate performs validation on our chain config.",
      "length": 3211,
      "tokens": 384,
      "embedding": []
    },
    {
      "slug": "func (c *Chain) Validate(minTimeLockDelta uint32, minDelay uint16) error {",
      "content": "func (c *Chain) Validate(minTimeLockDelta uint32, minDelay uint16) error {\n\tif c.TimeLockDelta < minTimeLockDelta {\n\t\treturn fmt.Errorf(\"timelockdelta must be at least %v\",\n\t\t\tminTimeLockDelta)\n\t}\n\n\t// Check that our max local delay isn't set below some reasonable\n\t// minimum value. We do this to prevent setting an unreasonably low\n\t// delay, which would mean that the node would accept no channels.\n\tif c.MaxLocalDelay < minDelay {\n\t\treturn fmt.Errorf(\"MaxLocalDelay must be at least: %v\",\n\t\t\tminDelay)\n\t}\n\n\treturn nil\n}\n",
      "length": 434,
      "tokens": 67,
      "embedding": []
    }
  ]
}