{
  "filepath": "../implementations/go/lnd/healthcheck/diskcheck.go",
  "package": "healthcheck",
  "sections": [
    {
      "slug": "//go:build !windows && !solaris && !netbsd && !openbsd && !js",
      "content": "//go:build !windows && !solaris && !netbsd && !openbsd && !js\n// +build !windows,!solaris,!netbsd,!openbsd,!js\n\npackage healthcheck\n\nimport \"syscall\"\n\n// AvailableDiskSpaceRatio returns ratio of available disk space to total\n// capacity.",
      "length": 168,
      "tokens": 19,
      "embedding": []
    },
    {
      "slug": "func AvailableDiskSpaceRatio(path string) (float64, error) {",
      "content": "func AvailableDiskSpaceRatio(path string) (float64, error) {\n\ts := syscall.Statfs_t{}\n\terr := syscall.Statfs(path, &s)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\t// Calculate our free blocks/total blocks to get our total ratio of\n\t// free blocks.\n\treturn float64(s.Bfree) / float64(s.Blocks), nil\n}\n\n// AvailableDiskSpace returns the available disk space in bytes of the given\n// file system.",
      "length": 314,
      "tokens": 52,
      "embedding": []
    },
    {
      "slug": "func AvailableDiskSpace(path string) (uint64, error) {",
      "content": "func AvailableDiskSpace(path string) (uint64, error) {\n\ts := syscall.Statfs_t{}\n\terr := syscall.Statfs(path, &s)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\t// Some OSes have s.Bavail defined as int64, others as uint64, so we\n\t// need the explicit type conversion here.\n\treturn uint64(s.Bavail) * uint64(s.Bsize), nil // nolint:unconvert\n}\n",
      "length": 269,
      "tokens": 44,
      "embedding": []
    }
  ]
}