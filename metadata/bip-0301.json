{
  "BIP": "301",
  "Layer": "Consensus (soft fork)",
  "Title": "Blind Merged Mining (Consensus layer)",
  "Author": "Paul Sztorc <truthcoin@gmail.com>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0301",
  "Status": "Draft",
  "Type": "Standards Track",
  "Created": "2019-07-23",
  "License": "BSD-2-Clause",
  "sections": [
    {
      "header": "Abstract",
      "content": "Blind Merged Mining (BMM) allows miners to mine a Sidechain/Altcoin,\nwithout running its node software (ie, without \\\"looking\\\" at it, hence\n\\\"blind\\\").\n\nInstead, a separate sidechain user runs their node and constructs the\nblock, paying himself the transaction fees. He then uses an equivalent\namount of money to \\\"buy\\\" the right to find this block, from the\nconventional layer1 Sha256d miners."
    },
    {
      "header": "Motivation",
      "content": "\\\"Merged-Mining\\\" (MM) allows miners to reuse their hashing work to\nsecure other chains (for example, as in Namecoin).\n\nHowever, traditional MM has two drawbacks:\n\n1.  Miners must run a full node of the other chain(s). (Thus, they must\nrun \\\"non-Bitcoin\\\" software which may be buggy.)\n2.  Miners are paid on the other chain, in Alt-currency. (Miners who MM\nNamecoin, will earn NMC.)"
    },
    {
      "header": "Notation and Example {#notation_and_example}",
      "content": "Note: We use notation side:\\\\\\* and main:\\\\\\* in front of\notherwise-ambiguous words (such as \\\"block\\\", \\\"node\\\", or \\\"chain\\\"),\nto sort the mainchain version from its sidechain counterpart. We name\nall sidechain users \\\"Simon\\\", and name all mainchain miners \\\"Mary\\\".\n\nExample: imagine that a sidechain block contains 20,000 txns, each\npaying a \\$0.10 fee; therefore, the block is worth \\$2000 of\nfee-revenue. As usual: the sidechain\\'s coinbase txn will pay this\n\\$2000 to someone (in this case, \\\"Simon\\\"). Under Bip301, Simon does no\nhashing, but instead makes one layer1 txn paying \\$1999 to the layer1\nminers (\\\"Mary\\\").\n\nUpon finding a sidechain block worth \\$2000\\...\n-------------------------------------------------\nItem\nRuns a sidechain node?\nHow much hashing?\nCoins collected, on Layer2\nCoins paid out, on Layer1\nCoins rec\\'d, on Layer1\nd(Net Worth)\n\nBip301 makes this specialization-of-labor trustless on layer1. If Mary\ntakes Simon\\'s money, then she must let Simon control the side:block."
    },
    {
      "header": "Specification",
      "content": "Bip300 consists of two messages: \\\"BMM Accept\\\" and \\\"BMM Request\\\".\nThese govern something called \\\"h\\*\\\".\n\nSo we will discuss:\n\n1.  h\\* \\-- The sidechain\\'s hashMerkleRoot, and why it matters.\n2.  \\\"BMM Accept\\\" \\-- How h\\* enters a main:coinbase. When Mary\n\\\"accepts\\\" a BMM Request, Mary is *endorsing a side:block*.\n3.  \\\"BMM Request\\\" \\-- Simon offering money to Mary, if (and only if)\nshe will Endorse a specific h\\*. When Simon broadcasts a BMM\nRequest, Simon is *attempting a side:block*."
    },
    {
      "header": "h\\*",
      "content": "h\\* (\\\"h star\\\") is the sidechain\\'s Merkle Root hash.\n\nIn Bip301, a sidechain\\'s coinbase txn acts as a header (it contains the\nhash of the previous side:block, and previous main:block). Thus, the\nMerkleRoot contains everything important.\n\nNote: in Bip301 sidechains, \\\"headers\\\" and \\\"block hashes\\\" do not have\nsignificant consensus meaning and are in the design mainly to help with\nIBD. (In the mainchain, in contrast, headers and block hashes determine\nthe difficulty adjustments and cumulative PoW.)\n\n`<img src=\"bip-0301/sidechain-headers.png?raw=true\" align=\"middle\">`{=html}`</img>`{=html}\n\nAbove: h\\* is located in the main:coinbase. h\\* contains all side:txns,\nincluding the side:coinbase. The side:coinbase contains many\n\\\"header-like\\\" fields, such as the hash of the previous side:block.\n\nMary controls the main:coinbase, so she may select any h\\*. Her\nselection will determine which side:block is \\\"found\\\"."
    },
    {
      "header": "BMM Accept {#bmm_accept}",
      "content": "To \\\"Accept\\\" the BMM proposal (and to accept Simon\\'s money), Mary must\nendorse Simon\\'s block.\n\nFor each side:block Mary wishes to endorse, Mary places the following into a main:coinbase OP_RETURN:\n1-byte - OP_RETURN (0x6a)\n4-bytes - Message header (0xD1617368)\n32-bytes - h* (obtained from Simon)\n\n[Code details\nhere](https://github.com/drivechain-project/mainchain/blob/8901d469975752d799b6a7a61d4e00a9a124028f/src/validation.cpp#L3530-L3572).\n\nIf these OP_RETURN outputs are not present, then no Requests were\naccepted. (And, Mary would get no money from Requests.)\n\nIt is possible for Mary and Simon to be the same person.They would trust\neach other completely, so the BMM process would stop here. There would\nonly be Accepts; Requests would be unnecessary.\n\nWhen Simon and Mary are different people, Simon will need to use BMM\nRequests."
    },
    {
      "header": "BMM Request {#bmm_request}",
      "content": "Simon will use BMM Requests to buy the right to find a sidechain block,\nfrom Mary.\n\nFor each side:block that Simon wants to attempt, he broadcasts a txn containing the following:\n3-bytes - Message header (0x00bf00)\n32-bytes  - h* (side:MerkleRoot)\n1-byte  - nSidechain (sidechain ID number)\n4-bytes - prevMainHeaderBytes (the last four bytes of the previous main:block)\n\nWe make use of the [extended serialization\nformat](https://github.com/drivechain-project/mainchain/blob/8901d469975752d799b6a7a61d4e00a9a124028f/src/primitives/transaction.h#L224-L331).\n(SegWit used ESF to position scriptWitness data within txns; we use it\nhere to position the five fields above.)\n\nThe Message header identifies this txn as a BMM transaction. h\\* is\nchosen by Simon to correspond to his side:block. nSidechain is the\nnumber assigned to the sidechain when it was created. preSideBlockRef\nallows Simon to build on any preexisting side:block (allowing him to\nbypass one or more invalid blocks, details below). prevMainHeaderBytes\nare the last four bytes of the previous main:block (details below).\n\nThis txn is invalid if it fails any of the following checks:\n\n1.  Each \\\"BMM Request\\\", must match one corresponding \\\"BMM Accept\\\"\n(previous section).\n2.  Only one BMM Request is allowed in each main:block, per sidechain.\nIn other words, if 700 users broadcast BMM Requests for sidechain"
    },
    {
      "header": "4, then the main:miner singles out one BMM Request to include.",
      "content": "3.  The 4-bytes of prevMainHeaderBytes must match the last four bytes of\nthe previous main:blockheader. Thus, Simon\\'s txns are only valid\nfor the current block, in the block history that he knows about (and\ntherefore, the current sidechain history that he knows about).\n\nMost BMM Request txns will never make it into a block. Simon will make\nmany BMM Requests, but only one will be accepted. Since only one BMM\nRequest can become a bona fide transaction, Simon may feel comfortable\nmaking multiple offers all day long. This means Mary has many offers to\nchoose from, and can choose the one which pays her the most.\n\nThis BIP allows BMM Requests to take place over Lightning. One method is\n[here](https://www.drivechain.info/media/bmm-note/bmm-lightning/). (BMM\nAccepts cannot be over LN, since they reside in main:coinbase txns.)"
    },
    {
      "header": "Backward compatibility {#backward_compatibility}",
      "content": "As a soft fork, older software will continue to operate without\nmodification. To enforce BMM trustlessly, nodes must watch \\\"pairs\\\" of\ntransactions, and subject them to extra rules. Non-upgraded nodes will\nnotice that this activity is present in the blockchain, but they will\nnot understand any of it.\n\nMuch like P2SH or a new OP Code, these old users can never be directly\naffected by the fork, as they will have no expectations of receiving\npayments of this kind. (As a matter of fact, the only people receiving\nBTC here, all happen to be miners. So there is less reason than ever to\nexpect compatibility problems.)\n\nAs with all previous soft forks, non-upgraded users are indirectly\naffected, in that they are no longer performing full validation."
    },
    {
      "header": "Deployment",
      "content": "This BIP will be deployed via UASF-style block height activation. Block\nheight TBD."
    },
    {
      "header": "Reference Implementation {#reference_implementation}",
      "content": "See: <https://github.com/drivechain-project/mainchain>\n\nAlso, for interest, see an example sidechain here:\n<https://github.com/drivechain-project/sidechains/tree/testchain>"
    },
    {
      "header": "References",
      "content": "-   <http://www.drivechain.info/literature/index.html>\n-   <http://www.truthcoin.info/blog/blind-merged-mining/>\n-   <http://www.truthcoin.info/images/bmm-outline.txt>"
    },
    {
      "header": "Thanks",
      "content": "Thanks to everyone who contributed to the discussion, especially:\nZmnSCPxj, Adam Back, Peter Todd, Dan Anderson, Sergio Demian Lerner,\nMatt Corallo, Sjors Provoost, Tier Nolan, Erik Aronesty, Jason\nDreyzehner, Joe Miyamoto, Chris Stewart, Ben Goldhaber."
    },
    {
      "header": "Copyright",
      "content": "This BIP is licensed under the BSD 2-clause license."
    }
  ]
}