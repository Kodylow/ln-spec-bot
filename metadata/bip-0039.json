{
  "BIP": "39",
  "Layer": "Applications",
  "Title": "Mnemonic code for generating deterministic keys",
  "Author": "Marek Palatinus <slush@satoshilabs.com>",
  "Comments-Summary": "Unanimously Discourage for implementation",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0039",
  "Status": "Proposed",
  "Type": "Standards Track",
  "Created": "2013-09-10",
  "sections": [
    {
      "header": "Abstract",
      "content": "This BIP describes the implementation of a mnemonic code or mnemonic\nsentence \\-- a group of easy to remember words \\-- for the generation of\ndeterministic wallets.\n\nIt consists of two parts: generating the mnemonic and converting it into\na binary seed. This seed can be later used to generate deterministic\nwallets using BIP-0032 or similar methods."
    },
    {
      "header": "Motivation",
      "content": "A mnemonic code or sentence is superior for human interaction compared\nto the handling of raw binary or hexadecimal representations of a wallet\nseed. The sentence could be written on paper or spoken over the\ntelephone.\n\nThis guide is meant to be a way to transport computer-generated\nrandomness with a human-readable transcription. It\\'s not a way to\nprocess user-created sentences (also known as brainwallets) into a\nwallet seed."
    },
    {
      "header": "Generating the mnemonic {#generating_the_mnemonic}",
      "content": "The mnemonic must encode entropy in a multiple of 32 bits. With more\nentropy security is improved but the sentence length increases. We refer\nto the initial entropy length as ENT. The allowed size of ENT is 128-256\nbits.\n\nFirst, an initial entropy of ENT bits is generated. A checksum is\ngenerated by taking the first\n\nENT / 32\n\nbits of its SHA256 hash. This checksum is appended to the end of the\ninitial entropy. Next, these concatenated bits are split into groups of\n11 bits, each encoding a number from 0-2047, serving as an index into a\nwordlist. Finally, we convert these numbers into words and use the\njoined words as a mnemonic sentence.\n\nThe following table describes the relation between the initial entropy\nlength (ENT), the checksum length (CS), and the length of the generated\nmnemonic sentence (MS) in words.\n\nCS = ENT / 32\nMS = (ENT + CS) / 11\n\n|  ENT  | CS | ENT+CS |  MS  |\n+-------+----+--------+------+\n|  128  |  4 |   132  |  12  |\n|  160  |  5 |   165  |  15  |\n|  192  |  6 |   198  |  18  |\n|  224  |  7 |   231  |  21  |\n|  256  |  8 |   264  |  24  |"
    },
    {
      "header": "Wordlist",
      "content": "An ideal wordlist has the following characteristics:\n\na\\) smart selection of words\n\n`\u00a0\u00a0-\u00a0the\u00a0wordlist\u00a0is\u00a0created\u00a0in\u00a0such\u00a0a\u00a0way\u00a0that\u00a0it's\u00a0enough\u00a0to\u00a0type\u00a0the\u00a0first\u00a0four`\\\n`\u00a0\u00a0\u00a0\u00a0letters\u00a0to\u00a0unambiguously\u00a0identify\u00a0the\u00a0word`\n\nb\\) similar words avoided\n\n`\u00a0\u00a0-\u00a0word\u00a0pairs\u00a0like\u00a0\"build\"\u00a0and\u00a0\"built\",\u00a0\"woman\"\u00a0and\u00a0\"women\",\u00a0or\u00a0\"quick\"\u00a0and\u00a0\"quickly\"`\\\n`\u00a0\u00a0\u00a0\u00a0not\u00a0only\u00a0make\u00a0remembering\u00a0the\u00a0sentence\u00a0difficult\u00a0but\u00a0are\u00a0also\u00a0more\u00a0error`\\\n`\u00a0\u00a0\u00a0\u00a0prone\u00a0and\u00a0more\u00a0difficult\u00a0to\u00a0guess`\n\nc\\) sorted wordlists\n\n`\u00a0\u00a0-\u00a0the\u00a0wordlist\u00a0is\u00a0sorted\u00a0which\u00a0allows\u00a0for\u00a0more\u00a0efficient\u00a0lookup\u00a0of\u00a0the\u00a0code\u00a0words`\\\n`\u00a0\u00a0\u00a0\u00a0(i.e.\u00a0implementations\u00a0can\u00a0use\u00a0binary\u00a0search\u00a0instead\u00a0of\u00a0linear\u00a0search)`\\\n`\u00a0\u00a0-\u00a0this\u00a0also\u00a0allows\u00a0trie\u00a0(a\u00a0prefix\u00a0tree)\u00a0to\u00a0be\u00a0used,\u00a0e.g.\u00a0for\u00a0better\u00a0compression`\n\nThe wordlist can contain native characters, but they must be encoded in\nUTF-8 using Normalization Form Compatibility Decomposition (NFKD)."
    },
    {
      "header": "From mnemonic to seed {#from_mnemonic_to_seed}",
      "content": "A user may decide to protect their mnemonic with a passphrase. If a\npassphrase is not present, an empty string \\\"\\\" is used instead.\n\nTo create a binary seed from the mnemonic, we use the PBKDF2 function\nwith a mnemonic sentence (in UTF-8 NFKD) used as the password and the\nstring \\\"mnemonic\\\" + passphrase (again in UTF-8 NFKD) used as the salt.\nThe iteration count is set to 2048 and HMAC-SHA512 is used as the\npseudo-random function. The length of the derived key is 512 bits (= 64\nbytes).\n\nThis seed can be later used to generate deterministic wallets using\nBIP-0032 or similar methods.\n\nThe conversion of the mnemonic sentence to a binary seed is completely\nindependent from generating the sentence. This results in a rather\nsimple code; there are no constraints on sentence structure and clients\nare free to implement their own wordlists or even whole sentence\ngenerators, allowing for flexibility in wordlists for typo detection or\nother purposes.\n\nAlthough using a mnemonic not generated by the algorithm described in\n\\\"Generating the mnemonic\\\" section is possible, this is not advised and\nsoftware must compute a checksum for the mnemonic sentence using a\nwordlist and issue a warning if it is invalid.\n\nThe described method also provides plausible deniability, because every\npassphrase generates a valid seed (and thus a deterministic wallet) but\nonly the correct one will make the desired wallet available."
    },
    {
      "header": "Wordlists",
      "content": "Since the vast majority of BIP39 wallets supports only the English\nwordlist, it is **strongly discouraged** to use non-English wordlists\nfor generating the mnemonic sentences.\n\nIf you still feel your application really needs to use a localized\nwordlist, use one of the following instead of inventing your own.\n\n-   [Wordlists](bip-0039/bip-0039-wordlists.md \"wikilink\")"
    },
    {
      "header": "Test vectors {#test_vectors}",
      "content": "The test vectors include input entropy, mnemonic and seed. The\npassphrase \\\"TREZOR\\\" is used for all vectors.\n\n<https://github.com/trezor/python-mnemonic/blob/master/vectors.json>\n\nAlso see\n<https://github.com/bip32JP/bip32JP.github.io/blob/master/test_JP_BIP39.json>\n\n(Japanese wordlist test with heavily normalized symbols as passphrase)"
    },
    {
      "header": "Reference Implementation {#reference_implementation}",
      "content": "Reference implementation including wordlists is available from\n\n<http://github.com/trezor/python-mnemonic>"
    },
    {
      "header": "Other Implementations {#other_implementations}",
      "content": "Go:\n\n-   <https://github.com/tyler-smith/go-bip39>\n\nPython:\n\n-   <https://github.com/meherett/python-hdwallet>\n\nElixir:\n\n-   <https://github.com/aerosol/mnemo>\n\nObjective-C:\n\n-   <https://github.com/nybex/NYMnemonic>\n\nHaskell:\n\n-   <https://github.com/haskoin/haskoin>\n\n.NET (Standard):\n\n-   <https://www.nuget.org/packages/dotnetstandard-bip39/>\n\n.NET C# (PCL):\n\n-   <https://github.com/Thashiznets/BIP39.NET>\n\n.NET C# (PCL):\n\n-   <https://github.com/NicolasDorier/NBitcoin>\n\nJavaScript:\n\n-   <https://github.com/bitpay/bitcore/tree/master/packages/bitcore-mnemonic>\n-   <https://github.com/bitcoinjs/bip39> (used by\n[blockchain.info](https://github.com/blockchain/My-Wallet-V3/blob/v3.8.0/src/hd-wallet.js#L121-L146 \"wikilink\"))\n-   <https://github.com/hujiulong/web-bip39>\n\nJava:\n\n-   <https://github.com/bitcoinj/bitcoinj/blob/master/core/src/main/java/org/bitcoinj/crypto/MnemonicCode.java>\n\nRuby:\n\n-   <https://github.com/sreekanthgs/bip_mnemonic>\n\nRust:\n\n-   <https://github.com/maciejhirsz/tiny-bip39/>\n-   <https://github.com/koushiro/bip0039-rs>\n\nSmalltalk:\n\n-   <https://github.com/eMaringolo/pharo-bip39mnemonic>\n\nSwift:\n\n-   <https://github.com/CikeQiu/CKMnemonic>\n-   <https://github.com/yuzushioh/WalletKit>\n-   <https://github.com/pengpengliu/BIP39>\n-   <https://github.com/matter-labs/web3swift/blob/develop/Sources/web3swift/KeystoreManager/BIP39.swift>\n-   <https://github.com/zcash-hackworks/MnemonicSwift>\n-   <https://github.com/ShenghaiWang/BIP39>\n\nC++:\n\n-   <https://github.com/libbitcoin/libbitcoin-system/blob/master/include/bitcoin/system/wallet/mnemonic.hpp>\n\nC (with Python/Java/Javascript bindings):\n\n-   <https://github.com/ElementsProject/libwally-core>\n\nPython:\n\n-   <https://github.com/scgbckbone/btc-hd-wallet>\n\nDart:\n\n-   <https://github.com/dart-bitcoin/bip39>"
    }
  ]
}