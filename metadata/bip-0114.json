{
  "BIP": "114",
  "Layer": "Consensus (soft fork)",
  "Title": "Merkelized Abstract Syntax Tree",
  "Author": "Johnson Lau <jl2012@xbt.hk>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0114",
  "Status": "Rejected",
  "Type": "Standards Track",
  "Created": "2016-04-02",
  "License": "PD",
  "sections": [
    {
      "header": "Abstract",
      "content": "This BIP defines a new witness program type that uses a Merkle tree to\nencode mutually exclusive branches in a script. This enables complicated\nredemption conditions that are currently not possible, improves privacy\nby hiding unexecuted scripts, and allows inclusion of non-consensus\nenforced data with very low or no additional cost."
    },
    {
      "header": "Motivation",
      "content": "### Evolution of Bitcoin script system {#evolution_of_bitcoin_script_system}\n\nBitcoin uses a script system to specify the conditions for redemption of\ntransaction outputs. In its original design, the conditions for\nredemption are directly recorded in the scriptPubKey by the sender of\nthe funds. This model has several drawbacks, particularly for\ncomplicated scripts:\n\n1.  It could be difficult for the receiver to specify the conditions;\n2.  Large scripts take up more UTXO space;\n3.  The sender will pay for the additional block space;\n4.  To prevent DoS attack, scripts are limited to 10,000 bytes and 201\nop codes;\n5.  Any unexecuted branches and non-consensus enforced data in the\nscript are visible to the public, consuming block space while\ndamaging privacy.\n\nThe [BIP16](bip-0016.mediawiki \"wikilink\") (Pay-to-script-hash,\n\\\"P2SH\\\") fixes the first 3 problems by using a fixed-length 20-byte\nscript hash in the scriptPubKey, and moving the responsibility for\nsupplying the script to the redeemer. However, due to the data push size\nlimit in script, a P2SH script may not be bigger than 520 bytes. Also,\nP2SH still requires the redeemer to publish all unexecuted branches of\nthe script.\n\nThe [BIP141](bip-0141.mediawiki \"wikilink\") defines 2 new types of\nscripts that support segregated witness. The pay-to-witness-script-hash\n(P2WSH) is similar to P2SH is many ways. By supplying the script in\nwitness, P2WSH restores the original 10,000 byte script limit. However,\nit still requires publishing of unexecuted branches."
    },
    {
      "header": "Merkelized Abstract Syntax Tree {#merkelized_abstract_syntax_tree}",
      "content": "The idea of Merkelized Abstract Syntax Tree (MAST) is to use a Merkle\ntree to encode branches in a script. When spending, users may provide\nonly the branches they are executing, and hashes that connect the\nbranches to the fixed size Merkel root. This reduces the size of\nredemption stack from O(n) to O(log n) (n as the number of branches).\nThis enables complicated redemption conditions that is currently not\npossible due to the script size and opcode limit, improves privacy by\nhiding unexecuted branches, and allows inclusion of non-consensus\nenforced data with very low or no additional cost."
    },
    {
      "header": "Specification",
      "content": "In [BIP141](bip-0141.mediawiki \"wikilink\"), witness programs with a\nversion byte of 1 or larger are considered to be anyone-can-spend\nscripts. The following new validation rules are applied if the witness\nprogram version byte is 1 and the program size is 32 bytes.[^1] The\nwitness program is the `MAST Root`.\n\nTo redeem an output of this kind, the witness must consist of the\nfollowing items:\n\n`\u00a0Script_stack_1`\\\n`\u00a0Script_stack_2`\\\n`\u00a0.`\\\n`\u00a0.`\\\n`\u00a0Script_stack_X\u00a0(X\u00a0\u2265\u00a00)`\\\n`\u00a0Subscript_1`\\\n`\u00a0Subscript_2`\\\n`\u00a0.`\\\n`\u00a0.`\\\n`\u00a0Subscript_Y\u00a0(1\u00a0\u2264\u00a0Y\u00a0\u2264\u00a0255)`\\\n`\u00a0Position`\\\n`\u00a0Path`\\\n`\u00a0Metadata\u00a0(Y|MAST\u00a0Version)`\n\n`Metadata` is the last witness item. It is a vector of 1 to 5 bytes. The\nfirst byte is an unsigned integer between 1 to 255 denoting the number\nof `Subscript` (defined hereinafter). The following 0 to 4 byte(s) is an\nunsigned little-endian integer denoting the `MAST version`.\n`MAST Version` must be minimally encoded (the most significant byte must\nnot be 0).\n\n`Path` is the second last witness item. It is a serialized Merkle path\nof the `Script Hash` (defined hereinafter). Size of `Path` must be a\nmultiple of 32 bytes, and not more than 1024 bytes. Each 32 byte word is\na double-SHA256 merkle node in the merkle branch connecting to the\n`Script Root` (defined hereinafter). `Depth` of the tree (0 to 32) is\nthe size of `Path` divided by 32.\n\n`Position` is the third last witness item. It indicates the location of\nthe `Script Hash` in the Merkle tree, with zero indicating the leftmost\nposition. It is an unsigned little-endian integer with not more than 4\nbytes. It must be minimally encoded: the value must not be larger than\nthe maximum number of items allowed by the `Depth` of the tree, and the\nmost significant byte must not be 0. For example, if `Depth` is 4, the\nvalid range of `Position` is 0 to 15 (2^4^-1).\n\nDepends on the first byte of `Metadata`, there should be 1 to 255\n`Subscript` witness item(s) before `Position`.\n\n`Script Hash` is defined as:\n\n`\u00a0Script\u00a0Hash\u00a0=\u00a0H(Y|H(Subscript_1)|H(Subscript_2)|...|H(Subscript_Y))`\\\n`\u00a0H()\u00a0=\u00a0SHA256(SHA256())`\n\nwhere `Y` is a 1-byte value denoting number of `Subscript`, followed by\nthe hash of each `Subscript`\n\n`Script Root` is the Merkle root calculated by the\n`ComputeMerkleRootFromBranch` function, using `Script Hash`, `Path` and\n`Position`.\n\n`MAST Root` is `H(MAST Version|Script Root)`. The pre-image has a fixed\nsize of 36 bytes: 4 bytes for `MAST Version` (unsigned little-endian\ninteger) and 32 bytes for `Script Root`.\n\nThe script evaluation fails if `MAST Root` does not match the witness\nprogram.\n\nIf the `MAST Root` matches the witness program and `MAST Version` is\ngreater than 0, the script returns a success without further evaluation.\n`SigOpsCost` is counted as 0. This is reserved for future script\nupgrades.\n\nIf the `MAST Version` is 0, the `Subscript`(s) are serialized to form\nthe final `MAST Script`, beginning with\n`</code>`{=html}Subscript_1`</code>`{=html}. The unused witness item(s)\nbefore the `</code>`{=html}Subscript_1`</code>`{=html} are used as\n`Input Stack` to feed to the `MASTScript`. (Similar to P2WSH in BIP141)\n\nThe script fails with one of the following conditions:\n\n-   `MAST Script` is malformed (i.e. not enough data provided for the\nlast push operation). Individual `Subscript` might be malformed, as\nlong as they are serialized into a valid `MAST Script`\n-   Size of `MAST Script` is larger than 10,000 bytes\n-   Size of any one of the `Input Stack` item is larger than 520 bytes\n-   Number of non-push operations (`nOpCount`) is more than 201.\n`nOpCount` is the sum of the number of non-push operations in\n`MAST Script` (counted in the same way as P2WSH `witnessScript`),\nnumber of `Subscript` (Y), and `Depth` of the Merkle tree.\n\nThe `MAST Script` is then evaluated with the `Input Stack` (with some\nnew or redefined opcodes described in BIPXXX). The evaluation must not\nfail, and result in an exactly empty stack.\n\nCounting of `SigOpsCost` is based on the `MAST Script`, described in\nBIPYYY."
    },
    {
      "header": "Rationale",
      "content": "### MAST Structure {#mast_structure}\n\nThis proposal is a restricted case of more general MAST. In a general\nMAST design, users may freely assign one or more script branches for\nexecution. In this proposal, only one branch is allowed for execution,\nand users are required to transform a complicated condition into several\nmutually exclusive branches. For example, if the desired redeem\ncondition is:\n\n`\u00a0(A\u00a0or\u00a0B)\u00a0and\u00a0(C\u00a0or\u00a0D\u00a0or\u00a0E)\u00a0and\u00a0(F\u00a0or\u00a0G)`\n\nIn a general MAST design, the 7 branches (A to G) will form a 3-level\nMerkle tree, plus an \\\"overall condition\\\" describing the relationship\nof different branches. In redemption, the \\\"overall condition\\\",\nexecuted branches (e.g. B, D, F), and Merkle path data will be provided\nfor validation.\n\nIn the current proposal, the user has to transform the redeem condition\ninto 12 mutually exclusive branches and form a 4-level Merkle tree, and\npresent only one branch in redemption:\n\n`\u00a0A\u00a0and\u00a0C\u00a0and\u00a0F`\\\n`\u00a0B\u00a0and\u00a0C\u00a0and\u00a0F`\\\n`\u00a0A\u00a0and\u00a0D\u00a0and\u00a0F`\\\n`\u00a0.`\\\n`\u00a0.`\\\n`\u00a0B\u00a0and\u00a0E\u00a0and\u00a0G`\n\nOne way to implement the general MAST design is using a combination of\n`OP_EVAL`, `OP_CAT`, and `OP_HASH256`. However, that will suffer from\nthe problems of `OP_EVAL`, including risks of indefinite program loop\nand inability to do static program analysis. A complicated\nimplementation is required to fix these problems and is difficult to\nreview.\n\nThe advantages of the current proposal are:\n\n-   `Subscript` are located at a fixed position in the witness stack.\nThis allows static program analysis, such as static `SigOpsCost`\ncounting and early termination of scripts with disabled opcodes.\n-   If different parties in a contract do not want to expose their\nscripts to each other, they may provide only `H(Subscript)` and keep\nthe `Subscript` private until redemption.\n-   If they are willing to share the actual scripts, they may combine\nthem into one `Subscript` for each branch, saving some `nOpCount`\nand a few bytes of witness space.\n\nThe are some disadvantages, but only when the redemption condition is\nvery complicated:\n\n-   It may require more branches than a general MAST design (as shown in\nthe previous example) and take more witness space in redemption\n-   Creation and storage of the MAST structure may take more time and\nspace. However, such additional costs affect only the related\nparties in the contract but not any other Bitcoin users."
    },
    {
      "header": "MAST Version {#mast_version}",
      "content": "This proposal allows users to indicate the version of scripting language\nin the witness, which is cheaper than doing that in `scriptPubKey` or\n`scriptSig`. Undefined versions remain anyone-can-spend and are reserved\nfor future expansions. A new version could be used for relaxing\nconstraints (e.g. the 10,000 bytes size limit of `MAST Script`), adding\nor redefining opcodes, or even introducing a completely novel scripting\nsystem."
    },
    {
      "header": "nOpCount limit {#nopcount_limit}",
      "content": "In version 0 MAST, the extra hashing operations in calculating the\n`MAST Root` are counted towards the 201 `nOpCount` limit to prevent\nabusive use. This limitation is not applied to undefined `MAST Version`\nfor flexibility, but it is constrained by the 255 `Subscript` and 32\n`Depth` limits."
    },
    {
      "header": "Script evaluation {#script_evaluation}",
      "content": "This proposal requires script evaluation resulting in an empty stack,\ninstead of a single `TRUE` value as in P2WSH. This allows each party in\na contract to provide its own `Subscript`, and demonstrate the required\n`Input Stack` to clean up its own `Subscript`. In this case, order of\nthe `Subscript` is not important since the overall objective is to clean\nup the stack after evaluation."
    },
    {
      "header": "Examples",
      "content": "### Calculation of MAST Root {#calculation_of_mast_root}\n\n`<img src=bip-0114/mastexample.png>`{=html}`</img>`{=html}\n\n`\u00a0Subscript:`\\\n`\u00a0\u00a0\u00a0SA\u00a0=\u00a01\u00a0EQUALVERIFY\u00a0(0x5188)`\\\n`\u00a0\u00a0\u00a0SB\u00a0=\u00a02\u00a0EQUALVERIFY\u00a0(0x5288)`\\\n`\u00a0\u00a0\u00a0SC\u00a0=\u00a03\u00a0EQUALVERIFY\u00a0(0x5388)`\\\n`\u00a0\u00a0\u00a0SD\u00a0=\u00a04\u00a0EQUALVERIFY\u00a0(0x5488)`\\\n`\u00a0\u00a0\u00a0SE\u00a0=\u00a05\u00a0EQUALVERIFY\u00a0(0x5588)`\\\n`\u00a0\u00a0\u00a0SF\u00a0=\u00a06\u00a0EQUALVERIFY\u00a0(0x5688)`\\\n`\u00a0\u00a0\u00a0SG\u00a0=\u00a07\u00a0EQUALVERIFY\u00a0(0x5788)`\\\n`\u00a0\u00a0\u00a0SH\u00a0=\u00a08\u00a0EQUALVERIFY\u00a0(0x5888)`\\\n`\u00a0\u00a0\u00a0M\u00a0=\u00a0RETURN\u00a0\"Hello\"\u00a0(0x6a0548656c6c6f)`\\\n`\u00a0Hash:`\\\n`\u00a0\u00a0\u00a0HA\u00a0=\u00a0H(0x01|H(SA))\u00a0=\u00a0H(0x015acb54166e0db370cd1b05a29120373568dacea2abc3748459ec3da2106e4b4e)\u00a0=\u00a00xd385d7268ad7e1ec51660f833d54787d2d8d79b6b1809d9c1d06c9e71f7be204`\\\n`\u00a0\u00a0\u00a0HB\u00a0=\u00a0H(0x02|H(SB)|H(SC))\u00a0=\u00a00x7cbfa08e44ea9f4f996873be95d9bffd97d4b91a5af32cc5f64efb8461727cdd`\\\n`\u00a0\u00a0\u00a0HF\u00a0=\u00a0H(0x03|H(SD)|H(SE)|H(SF))\u00a0=\u00a00x4611414355945a7c2fcc62a53a0004821b87e68f93048ffba7a55a3cb1e9783b`\\\n`\u00a0\u00a0\u00a0HG\u00a0=\u00a0H(0x01|H(SG))\u00a0=\u00a00xaa5fbdf58264650eadec33691ba1e7606d0a62f570eea348a465c55bc86ffc10`\\\n`\u00a0\u00a0\u00a0HC\u00a0=\u00a0H(0x01|H(M))\u00a0=\u00a00x70426d480d5b28d93c5be54803681f99abf4e8df4eab4dc87aaa543f0d138159`\\\n`\u00a0\u00a0\u00a0HD\u00a0=\u00a0H(0x0x|H(SH))\u00a0=\u00a00x8482f6c9c3fe90dd4d533b4efedb6a241b95ec9267d1bd5aaaee36d2ce2dd6da`\\\n`\u00a0\u00a0\u00a0HE\u00a0=\u00a0H(HA|HB)\u00a0=\u00a00x049b9f2f94f0a9bdea624e39cd7d6b27a365c6a0545bf0e9d88d86eff4894210`\\\n`\u00a0\u00a0\u00a0HH\u00a0=\u00a0H(HC|HD)\u00a0=\u00a00xc709fdc632f370f3367da45378d1cf430c5fda6805e731ad5761c213cf2d276e`\\\n`\u00a0\u00a0\u00a0HI\u00a0=\u00a0H(HE|HF)\u00a0=\u00a00xead5e1a1e7e41b77b794f091df9be3f0e9f41d47304eb43dece90688f69843b7`\\\n`\u00a0\u00a0\u00a0HJ\u00a0=\u00a0H(HG|HH)\u00a0=\u00a00xd00fc690c4700d0f983f9700740066531ea826b21a4cbc62f80317261723d477`\\\n`\u00a0\u00a0\u00a0Script\u00a0Root\u00a0=\u00a0H(HI|HJ)\u00a0=\u00a00x26d5235d20daf1440a15a248f5b5b4f201392128072c55afa64a26ccc6f56bd9`\\\n`\u00a0\u00a0\u00a0MAST\u00a0Root\u00a0=\u00a0H(MAST\u00a0Version|Script\u00a0Root)\u00a0=\u00a0H(0x0000000026d5235d20daf1440a15a248f5b5b4f201392128072c55afa64a26ccc6f56bd9)\u00a0=\u00a00xb4b706e0c02eab9aba58419eb7ea2a286fb1c01d7406105fc12742bf8a3f97c9`\n\nThe scriptPubKey with native witness program is:\n\n`\u00a01\u00a0<0xb4b706e0c02eab9aba58419eb7ea2a286fb1c01d7406105fc12742bf8a3f97c9>`\\\n`\u00a0(0x5120b4b706e0c02eab9aba58419eb7ea2a286fb1c01d7406105fc12742bf8a3f97c9)`\n\nTo redeem with the `SD|SE|SF` branch, the witness is\n\n`\u00a0Script_stack_1:\u00a00x06`\\\n`\u00a0Script_stack_2:\u00a00x05`\\\n`\u00a0Script_stack_3:\u00a00x04`\\\n`\u00a0Subscript_1:\u00a0\u00a0\u00a0\u00a00x5488`\\\n`\u00a0Subscript_2:\u00a0\u00a0\u00a0\u00a00x5588`\\\n`\u00a0Subscript_3:\u00a0\u00a0\u00a0\u00a00x5688`\\\n`\u00a0Position:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00x01\u00a0(HF\u00a0is\u00a0the\u00a0second\u00a0hash\u00a0in\u00a0its\u00a0level)`\\\n`\u00a0Path\u00a0(HE|HJ):\u00a0\u00a0\u00a00x049b9f2f94f0a9bdea624e39cd7d6b27a365c6a0545bf0e9d88d86eff4894210d00fc690c4700d0f983f9700740066531ea826b21a4cbc62f80317261723d477`\\\n`\u00a0Metadata:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00x03\u00a0(3\u00a0Subscript)`"
    },
    {
      "header": "Imbalance MAST {#imbalance_mast}",
      "content": "When constructing a MAST, if the user believes that some of the branches\nare more likely to be executed, they may put them closer to the\n`Script Root`. It will save some witness space when the preferred\nbranches are actually executed."
    },
    {
      "header": "Escrow with Timeout {#escrow_with_timeout}",
      "content": "The following is the \\\"Escrow with Timeout\\\" example in\n[BIP112](bip-0112.mediawiki \"wikilink\"):\n\n`\u00a0\u00a0\u00a0IF`\\\n`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\u00a0<Alice's\u00a0pubkey>\u00a0<Bob's\u00a0pubkey>\u00a0<Escrow's\u00a0pubkey>\u00a03\u00a0CHECKMULTISIG`\\\n`\u00a0\u00a0\u00a0ELSE`\\\n`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"30d\"\u00a0CHECKSEQUENCEVERIFY\u00a0DROP`\\\n`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Alice's\u00a0pubkey>\u00a0CHECKSIG`\\\n`\u00a0\u00a0\u00a0ENDIF`\n\nUsing compressed public key, the size of this script is 150 bytes.\n\nWith MAST, this script could be broken down into 2 mutually exclusive\nbranches:[^2]\n\n`\u00a0\u00a0\u00a02\u00a0<Alice's\u00a0pubkey>\u00a0<Bob's\u00a0pubkey>\u00a0<Escrow's\u00a0pubkey>\u00a03\u00a0CHECKMULTISIGVERIFY\u00a0(105\u00a0bytes)`\\\n`\u00a0\u00a0\u00a0\"30d\"\u00a0CHECKSEQUENCEVERIFY\u00a0<Alice's\u00a0pubkey>\u00a0CHECKSIGVERIFY\u00a0(42\u00a0bytes)`\n\nSince only one branch will be published, it is more difficult for a\nblockchain analyst to determine the details of the escrow."
    },
    {
      "header": "Hashed Time-Lock Contract {#hashed_time_lock_contract}",
      "content": "The following is the \\\"Hashed TIme-Lock Contract\\\" example in\n[BIP112](bip-0112.mediawiki \"wikilink\"):\n\n`\u00a0\u00a0\u00a0HASH160\u00a0DUP\u00a0``<R-HASH>`{=html}`\u00a0EQUAL`\\\n`\u00a0\u00a0\u00a0IF`\\\n`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"24h\"\u00a0CHECKSEQUENCEVERIFY`\\\n`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02DROP`\\\n`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Alice's\u00a0pubkey>`\\\n`\u00a0\u00a0\u00a0ELSE`\\\n`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``<Commit-Revocation-Hash>`{=html}`\u00a0EQUAL`\\\n`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NOTIF`\\\n`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Timestamp\"\u00a0CHECKLOCKTIMEVERIFY\u00a0DROP`\\\n`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ENDIF`\\\n`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Bob's\u00a0pubkey>`\\\n`\u00a0\u00a0\u00a0ENDIF`\\\n`\u00a0\u00a0\u00a0CHECKSIG`\n\nTo create a MAST Root, it is flattened to 3 mutually exclusive branches:\n\n`\u00a0\u00a0\u00a0HASH160\u00a0``<R-HASH>`{=html}`\u00a0EQUALVERIFY\u00a0\"24h\"\u00a0CHECKSEQUENCEVERIFY\u00a0<Alice's\u00a0pubkey>\u00a0CHECKSIGVERIFY`\\\n`\u00a0\u00a0\u00a0HASH160\u00a0``<Commit-Revocation-Hash>`{=html}`\u00a0EQUALVERIFY\u00a0<Bob's\u00a0pubkey>\u00a0CHECKSIGVERIFY`\\\n`\u00a0\u00a0\u00a0\"Timestamp\"\u00a0CHECKLOCKTIMEVERIFY\u00a0<Bob's\u00a0pubkey>\u00a0CHECKSIGVERIFY`\n\nwhich significantly improves readability and reduces the witness size\nwhen it is redeemed."
    },
    {
      "header": "Large multi-signature constructs {#large_multi_signature_constructs}",
      "content": "The current CHECKMULTISIG supports up to 20 public keys. Although it is\npossible to extend it beyond 20 keys by using multiple CHECKSIGs and\nIF/ELSE conditions, the construction could be very complicated and soon\nuse up the 10,000 bytes and 201 `nOpCount` limit.\n\nWith MAST, large and complex multi-signature constructs could be\nflattened to many simple CHECKMULTISIGVERIFY conditions. For example, a\n3-of-2000 multi-signature scheme could be expressed as 1,331,334,000\n3-of-3 CHECKMULTISIGVERIFY, which forms a 31-level MAST. The\nscriptPubKey still maintains a fixed size of 34 bytes, and the\nredemption witness will be very compact, with less than 1,500 bytes."
    },
    {
      "header": "Commitment of non-consensus enforced data {#commitment_of_non_consensus_enforced_data}",
      "content": "Currently, committing non-consensus enforced data in the scriptPubKey\nrequires the use of OP_RETURN which occupies additional block space.\nWith MAST, users may commit such data as a branch. Depends on the number\nof executable branches, inclusion of such a commitment may incur no\nextra witness space, or 32 bytes at most.\n\nAn useful case would be specifying \\\"message-signing keys\\\", which are\nnot valid for spending, but allow users to sign any message without\ntouching the cold storage \\\"funding key\\\"."
    },
    {
      "header": "Backward compatibility {#backward_compatibility}",
      "content": "As a soft fork, older software will continue to operate without\nmodification. Non-upgraded nodes, however, will consider MAST programs\nas anyone-can-spend scripts. Wallets should always be wary of\nanyone-can-spend scripts and treat them with suspicion."
    },
    {
      "header": "Deployment",
      "content": "This BIP depends on [BIP141](bip-0141.mediawiki \"wikilink\") and will be\ndeployed by version-bits [BIP9](bip-0009.mediawiki \"wikilink\") after\nBIP141 is enforced. Exact details TBD."
    },
    {
      "header": "Credits",
      "content": "The idea of MAST originates from Russell O'Connor, Pieter Wuille, and\n[Peter\nTodd](https://bitcointalk.org/index.php?topic=255145.msg2757327#msg2757327)."
    },
    {
      "header": "Reference Implementation {#reference_implementation}",
      "content": "<https://github.com/jl2012/bitcoin/tree/bip114v2> (WIP)\n\n``` cpp\n//New rules apply if version byte is 1 and witness program size is 32 bytes\nif (witversion == 1 && program.size() == 32 && (flags & SCRIPT_VERIFY_MAST)) {\nCHashWriter sRoot(SER_GETHASH, 0);\nCHashWriter sScriptHash(SER_GETHASH, 0);\nuint32_t nMASTVersion = 0;\nsize_t stacksize = witness.stack.size();\nif (stacksize < 4)\nreturn set_error(serror, SCRIPT_ERR_INVALID_MAST_STACK);\nstd::vector<unsigned char> metadata = witness.stack.back(); // The last witness stack item is metadata\nif (metadata.size() < 1 || metadata.size() > 5)\nreturn set_error(serror, SCRIPT_ERR_INVALID_MAST_STACK);\n\n// The first byte of metadata is the number of subscripts (1 to 255)\nuint32_t nSubscript = static_cast<uint32_t>(metadata[0]);\nif (nSubscript == 0 || stacksize < nSubscript + 3)\nreturn set_error(serror, SCRIPT_ERR_INVALID_MAST_STACK);\nint nOpCount = nSubscript; // Each condition consumes a nOpCount\nsScriptHash << metadata[0];\n\n// The rest of metadata is MAST version in minimally-coded unsigned little endian int\nif (metadata.back() == 0)\nreturn set_error(serror, SCRIPT_ERR_INVALID_MAST_STACK);\nif (metadata.size() > 1) {\nfor (size_t i = 1; i != metadata.size(); ++i)\nnMASTVersion |= static_cast<uint32_t>(metadata[i]) << 8 * (i - 1);\n}\n\n// Unknown MAST version is non-standard\nif (nMASTVersion > 0 && flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\nreturn set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n\nsRoot << nMASTVersion;\n\n// The second last witness stack item is the pathdata\n// Size of pathdata must be divisible by 32 (0 is allowed)\n// Depth of the Merkle tree is implied by the size of pathdata, and must not be greater than 32\nstd::vector<unsigned char> pathdata = witness.stack.at(stacksize - 2);\nif (pathdata.size() & 0x1F)\nreturn set_error(serror, SCRIPT_ERR_INVALID_MAST_STACK);\nunsigned int depth = pathdata.size() >> 5;\nif (depth > 32)\nreturn set_error(serror, SCRIPT_ERR_INVALID_MAST_STACK);\n\n// Each level of Merkle tree consumes a nOpCount\n// Evaluation of version 0 MAST terminates early if there are too many nOpCount\n// Not enforced in unknown MAST version for upgrade flexibility\nnOpCount = nOpCount + depth;\nif (nMASTVersion == 0 && nOpCount > MAX_OPS_PER_SCRIPT)\nreturn set_error(serror, SCRIPT_ERR_OP_COUNT);\n\n// path is a vector of 32-byte hashes\nstd::vector <uint256> path;\npath.resize(depth);\nfor (unsigned int j = 0; j < depth; j++)\nmemcpy(path[j].begin(), &pathdata[32 * j], 32);\n\n// The third last witness stack item is the positiondata\n// Position is in minimally-coded unsigned little endian int\nstd::vector<unsigned char> positiondata = witness.stack.at(stacksize - 3);\nif (positiondata.size() > 4)\nreturn set_error(serror, SCRIPT_ERR_INVALID_MAST_STACK);\nuint32_t position = 0;\nif (positiondata.size() > 0) {\nif (positiondata.back() == 0)\nreturn set_error(serror, SCRIPT_ERR_INVALID_MAST_STACK);\nfor (size_t k = 0; k != positiondata.size(); ++k)\nposition |= static_cast<uint32_t>(positiondata[k]) << 8 * k;\n}\n\n// Position value must not exceed the number of leaves at the depth\nif (depth < 32) {\nif (position >= (1U << depth))\nreturn set_error(serror, SCRIPT_ERR_INVALID_MAST_STACK);\n}\n\n// Sub-scripts are located before positiondata\nfor (size_t i = stacksize - nSubscript - 3; i <= stacksize - 4; i++) {\nCScript subscript(witness.stack.at(i).begin(), witness.stack.at(i).end());\n\n// Evaluation of version 0 MAST terminates early if script is oversize\n// Not enforced in unknown MAST version for upgrade flexibility\nif (nMASTVersion == 0 && (scriptPubKey.size() + subscript.size()) > MAX_SCRIPT_SIZE)\nreturn set_error(serror, SCRIPT_ERR_SCRIPT_SIZE);\nuint256 hashSubScript;\nCHash256().Write(&subscript[0], subscript.size()).Finalize(hashSubScript.begin());\nsScriptHash << hashSubScript;\nscriptPubKey = scriptPubKey + subscript; // Final scriptPubKey is a serialization of subscripts\n}\nuint256 hashScript = sScriptHash.GetHash();\n\n// Calculate MAST Root and compare against witness program\nuint256 rootScript = ComputeMerkleRootFromBranch(hashScript, path, position);\nsRoot << rootScript;\nuint256 rootMAST = sRoot.GetHash();\nif (memcmp(rootMAST.begin(), &program[0], 32))\nreturn set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n\nif (nMASTVersion == 0) {\nstack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 3 - nSubscript);\nfor (unsigned int i = 0; i < stack.size(); i++) {\nif (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE)\nreturn set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n}\n\n// Script evaluation must not fail, and return an empty stack\nif (!EvalScript(stack, scriptPubKey, flags, checker, SIGVERSION_WITNESS_V1, nOpCount, serror))\nreturn false;\nif (stack.size() != 0)\nreturn set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n}\n\nreturn set_success(serror);\n}\n```\n\nCopying from `src/consensus/merkle.cpp`:\n\n``` cpp\nuint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& vMerkleBranch, uint32_t nIndex) {\nuint256 hash = leaf;\nfor (std::vector<uint256>::const_iterator it = vMerkleBranch.begin(); it != vMerkleBranch.end(); ++it) {\nif (nIndex & 1) {\nhash = Hash(BEGIN(*it), END(*it), BEGIN(hash), END(hash));\n} else {\nhash = Hash(BEGIN(hash), END(hash), BEGIN(*it), END(*it));\n}\nnIndex >>= 1;\n}\nreturn hash;\n}\n```"
    },
    {
      "header": "References",
      "content": "-   [BIP141 Segregated Witness (Consensus\nlayer)](bip-0141.mediawiki \"wikilink\")"
    },
    {
      "header": "Copyright",
      "content": "This document is placed in the public domain.\n\n[^1]: If the version byte is 1, but the witness program is not 32 bytes,\nno further interpretation of the witness program or witness stack\nhappens. This is reserved for future extensions.\n\n[^2]: In BIPXXX, it is proposed that CHECKLOCKTIMEVERIFY and\nCHECKSEQUENCEVERIFY will pop the top stack item"
    }
  ]
}