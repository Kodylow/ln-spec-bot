{
  "BIP": "10",
  "Layer": "Applications",
  "Title": "Multi-Sig Transaction Distribution",
  "Author": "Alan Reiner <etotheipi@gmail.com>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0010",
  "Status": "Withdrawn",
  "Type": "Informational",
  "Created": "2011-10-28",
  "sections": [
    {
      "header": "Motivation",
      "content": "The enabling of multi-signature transactions in Bitcoin will introduce a\ngreat deal of extra functionality to the users of the network, but also\na great deal of extra complexity. Executing a multi-signature tx will be\na multi-step process, and will potentially get worse with multiple\nclients, each implementing this process differently. By providing an\nefficient, standardized technique, we can improve the chance that\ndevelopers will adopt compatible protocols and not bifurcate the\nuser-base based on client selection.\n\nIn addition to providing a general encoding scheme for transaction\nsigning/collection, it does not require the signing device to hold any\nblockchain information (all information needed for verification and\nsigning is part of the encoding). This enables the existence of very\nlightweight devices that can be used for signing since they do not need\nthe blockchain \\-- only a minimal set of Bitcoin tools and an ECDSA\nmodule. Therefore, BIP 0010 has benefit beyond just multi-signature\ntransactions."
    },
    {
      "header": "Specification",
      "content": "This BIP proposes the following process, with terms in quotes referring\nto recommended terminology that should be encouraged across all\nimplementations.\n\n1.  One party will initiate this process by creating a \\\"Distribution\nProposal\\\", which could be abbreviated DP, or TxDP\n2.  The user creating the TxDP (the preparer) will create the\ntransaction as they would like to see it spent, but with blank TxIn\nscripts (where the signatures scripts will eventually go).\n3.  The proposed transaction will be spending a set of unspent TxOuts\navailable in the blockchain. The full transactions containing these\nTxOuts will be serialized and included, as well. This so that the\nvalues of the TxIns can be verified before signing (the prev-tx-hash\nis part of the data being signed, but the value is not). By\nincluding the full tx, the signing party can verify that the tx\nmatches the OutPoint hash, and then verify input values, all without\nany access to the blockchain.\n4.  The TxDP will have an \\\"DP ID\\\" or \\\"Unsigned ID\\\" which is the hash\nof the proposed transaction with blanked scripts, in Base58. This is\na specific naming convention to make sure it is not confused with\nthe actual the transaction ID that it will have after it is\nbroadcast (the transaction ID cannot be determined until after all\nsignatures are collected). The final Tx ID can be referred to as its\n\\\"Broadcast ID\\\", in order to distinguish it from the pre-signed ID.\n5.  The TxDP will have a potentially-unordered list of sig-pubkey pairs\nwhich represent collected signatures. If you receive a TxDP missing\nonly your signature, you can broadcast it as soon as you sign it.\n6.  Identical TxDP objects with different signatures can be easily\ncombined. This allows one party to send out all the requests for\nsignatures at once, and combine them all when they are received\n(instead of having to \\\"pass it around\\\".\n7.  For cases where the TxDP might be put into a file or sent via email,\nit should use .txdp or .btcdp suffix\n\nAnyone adopting BIP 0010 for multi-sig transactions will use the\nfollowing format (without indentation):\n\n'-----BEGIN-TRANSACTION-TXDPID-------'\n(\"_TXDIST_\") (magicBytes) (base58Txid) (varIntTxSize)\n(serializedTxListInHex_Line1)\n(serializedTxListInHex_Line2)\n(serializedTxListInHex_Line3)\n...\n(\"_TXINPUT_\") (00) (InputValue)\n(\"_SIG_\") (AddrBase58) (SigBytes) (SigHexPart0)\n(SigHexRemainingLines)\n(\"_SIG_\") (AddrBase58) (SigBytes) (SigHexPart0)\n(SigHexRemainingLines)\n(\"_TXINPUT_\") (01) (InputValue)\n(\"_SIG_\") (AddrBase58) (SigBytes) (SigHexPart0)\n(SigHexRemainingLines)\n(\"_TXINPUT_\") (02) (InputValue)\n'-------END-TRANSACTION-TXDPID-------'\n\nThe following is an example TxDP from Armory, produced while running on\nthe test network. Its DPID is 3fX59xPj:\n\n```{=html}\n</pre>\n```\n`-----BEGIN-TRANSACTION-3fX59xPj-------------------------------------------------`\\\n`_TXDIST_fabfb5da_3fX59xPj_00a0`\\\n`010000000292807c8e70a28c687daea2998d6273d074e56fa8a55a0b10556974cf2b526e61000000`\\\n`0000ffffffffe3c1ee0711611b01af3dee55b1484f0d6b65d17dce4eff0e6e06242e6cf457e10000`\\\n`000000ffffffff02b0feea0b000000001976a91457996661391fa4e95bed27d7e8fe47f47cb8e428`\\\n`88ac00a0acb9030000001976a914dc504e07b1107110f601fb679dd3f56cee9ff71e88ac00000000`\\\n`0100000001eb626e4f73d88f415a8e8cb32b8d73eed47aa1039d0ed2f013abdc741ce6828c010000`\\\n`008c493046022100b0da540e4924518f8989a9da798ca2d9e761b69a173b8cc41a3e3e3c6d77cd50`\\\n`022100ecfa61730e58005338420516744ef680428dcfc05022dec70a851365c8575b190141042dc5`\\\n`be3afa5887aee4a377032ed014361b0b9b61eb3ea6b8a8821bfe13ee4b65cd25d9630e4f227a53e8`\\\n`bf637f85452c9981bcbd64ef77e22ce97b0f547c783effffffff0200d6117e030000001976a914cf`\\\n`f580fd243f64f0ad7bf69faf41c0bf42d86d8988ac00205fa0120000001976a9148d573ef6984fd9`\\\n`f8847d420001f7ac49b222a24988ac000000000100000001f2782db40ae147398a31cff9c7cc3423`\\\n`014a073a92e463741244330cc304168f000000008c493046022100c9311b9eef0cc69219cb96838f`\\\n`dd621530a80c46269a00dccc66498bc03ccf7a0221003742ee652a0a76fd28ad81aa73bb7f7a0a6a`\\\n`81850af58f62d9a184d10e5eec30014104f815e8ef4cad584e04974889d7636e8933803d2e72991d`\\\n`b5288c9e953c2465533905f98b7b688898c7c1f0708f2e49f0dd0abc06859ffed5144e8a1018a4e8`\\\n`63ffffffff02008c8647000000001976a914d4e211215967f8e3744693bf85f47eb4ee9567fc88ac`\\\n`603d4e95010000001976a914e9a6b50901c1969d2b0fd43a3ccfa3fef3291efe88ac00000000`\\\n`_TXINPUT_00_150.00000000`\\\n`_SIG_mzUYGfqGpyXmppYpmWJ31Y4zTxR4ZCod22_00_008c`\\\n`4930460221007699967c3ec09d072599558d2e7082fae0820206b63aa66afea124634ed11a080221`\\\n`0003346f7e963e645ecae2855026dc7332eb7237012539b34cd441c3cef97fbd4d01410497d5e1a0`\\\n`0e1db90e893d1f2e547e2ee83b5d6bf4ddaa3d514e6dc2d94b6bcb5a72be1fcec766b8c382502caa`\\\n`9ec09fe478bad07d3f38ff47b2eb42e681c384cc`\\\n`_TXINPUT_01_12.00000000`\\\n`_SIG_mzvaN8JUhHLz3Gdec1zBRxs5rNaYLQnbD1_01_008c`\\\n`49304602210081554f8b08a1ad8caa69e34f4794d54952dac7c5efcf2afe080985d6bd5b00770221`\\\n`00dea20ca3dbae1d15ec61bec57b4b8062e7d7c47614aba032c5a32f651f471cfd014104c30936d2`\\\n`456298a566aa76fefeab8a7cb7a91e8a936a11757c911b4c669f0434d12ab0936fc13986b156156f`\\\n`9b389ed244bbb580112be07dbe23949a4764dffb`\\\n`-------END-TRANSACTION-3fX59xPj-------------------------------------------------`\n\n```{=html}\n</pre>\n```\nIn this transaction, there are two inputs, one of 150 BTC and the other\nof 12 BTC. This transaction combines 162 BTC to create two outputs, one\nof 160 BTC, one 1.9995 BTC, and a tx fee of 0.0005. In this TxDP, both\ninputs have been signed, and thus could broadcast immediately.\n\nThe style of communication is taken directly from PGP/GPG, which uses\nblocks of ASCII like this to communicate encrypted messages and\nsignatures. This serialization is compact, and will be interpretted the\nsame in all character encodings. It can be copied inline into an email,\nor saved in a text file. The advantage over the analogous PGP encoding\nis that there are some human readable elements to it, for users that\nwish to examine the TxDP packet manually, instead of requiring a program\nto parse the core elements of the TxDP.\n\nA party receiving this TxDP can simply add their signature to the\nappropriate \\_TXINPUT\\_ line. If that is the last signature required,\nthey can broadcast it themselves. Any software that implements this\nstandard should be able to combine multiple TxDPs into a single TxDP.\nHowever, even without the programmatic support, a user could manually\ncombine them by copying the appropriate \\_TXSIGS\\_ lines between\nserializations, though it is not the recommended method for combining\nTxDPs."
    },
    {
      "header": "Reference Implementation {#reference_implementation}",
      "content": "This proposal was implemented and tested in the older versions of\n*Armory* Bitcoin software for use in offline-wallet transaction signing\n(as a 1-of-1 transaction). Implementation can be found in\n<https://github.com/etotheipi/BitcoinArmory/blob/v0.91-beta/armoryengine/Transaction.py>\nunder the class PyTxDistProposal. However, as of verion 0.92 released in\nJuly 2014, Armory no longer uses this proposal for offline wallet\ntransaction signing and has moved on to a new format."
    }
  ]
}