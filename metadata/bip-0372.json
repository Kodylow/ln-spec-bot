{
  "BIP": "372",
  "Layer": "Applications",
  "Title": "Pay-to-contract tweak fields for PSBT",
  "Author": "Maxim Orlovsky <orlovsky@lnp-bp.org>",
  "Discussions-To": "<bitcoin-dev@lists.linuxfoundation.org>",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0372",
  "Status": "Draft",
  "Type": "Standards Track",
  "Created": "2022-01-16",
  "License": "BSD-2-Clause",
  "Requires": "BIP-174",
  "sections": [
    {
      "header": "Introduction",
      "content": "### Abstract\n\nThis document proposes additional fields for BIP 174 PSBTv0 and BIP 370\nPSBTv2 that allow for pay-to-contract key tweaking data data to be\nincluded in a PSBT of any version. These will represent an\nextra-transaction information required for the signer to produce valid\nsignatures spending previous outputs."
    },
    {
      "header": "Copyright",
      "content": "This BIP is licensed under the 2-clause BSD license."
    },
    {
      "header": "Background",
      "content": "Key tweaking is a procedure for creating a cryptographic commitment to\nsome message using elliptic curve properties. The procedure uses the\ndiscrete log problem (DLP) to commit to an extra-transaction message.\nThis is done by adding to a public key (for which the output owner knows\nthe corresponding private key) a hash of the message multiplied on the\ngenerator point G of the elliptic curve. This produces a tweaked public\nkey, containing the commitment. Later, in order to spend an output\ncontaining P2C commitment, the same commitment should be added to the\ncorresponding private key.\n\nThis type of commitment was originally proposed as a part of the pay to\ncontract concept by Ilja Gerhardt and Timo Hanke in \\[1\\] and later used\nby Eternity Wall \\[2\\] for the same purpose. Since that time multiple\ndifferent protocols for P2C has been developed, including OpenTimeStamps\n\\[3\\], Elements sidechain P2C tweaks \\[4\\] and LNPBP-1 \\[5\\], used in\nfor constructing Peter Todd\\'s single-use-seals \\[6\\] in\nclient-side-validation protocols like RGB."
    },
    {
      "header": "Motivation",
      "content": "P2C outputs can be detected onchain and spent only if the output owner\nnot just knows the corresponding original private key, but also is aware\nabout P2C tweak applied to the public key. In order to produce a valid\nsignature, the same tweak value must be added (modulo group order) to\nthe original private key by a signer device. This represents a challenge\nfor external signers, which may not have any information about such\ncommitment. This proposal addresses this issue by adding relevant fields\nto the PSBT input information.\n\nThe proposal abstracts details of specific P2C protocols and provides\nuniversal method for spending previous outputs containing P2C tweaks,\napplied to the public key contained within any standard form of the\n`scriptPubkey`, including bare scripts and P2PK, P2PKH, P2SH, witness v0\nP2WPKH, P2WSH, nested witness v0 P2WPKH-P2SH, P2WSH-P2SH and witness v1\nP2TR outputs."
    },
    {
      "header": "Design",
      "content": "P2C-tweaked public keys are already exposed in the\n`PSBT_IN_REDEEM_SCRIPT`, `PSBT_IN_WITNESS_SCRIPT`,\n`PSBT_IN_TAP_INTERNAL_KEY` and `PSBT_IN_TAP_LEAF_SCRIPT` fields; the\nonly information signer is needed to recognize which keys it should sign\nwith is from which of the original keys they were generated. This is\nachieved by introducing new \\`PSBT_IN_P2C_TWEAK\\` field which has the\noriginal key as a field key and the tweak as a field value. The signer\nwill recognize the keys which are available to it, apply the tweak to\nthem and see in which scripts it was used \\-- and use this information\nto apply tweaks for the corresponding private keys and produce valid\nsignatures."
    },
    {
      "header": "Specification",
      "content": "The new per-input type is defined as follows:\n\nName            `<keytype>`{=html}           `<keydata>`{=html}   `<keydata>`{=html} Description                                                                                                                                                                                                             `<valuedata>`{=html}   `<valuedata>`{=html} Description                                                                                                                                                                         Versions Requiring Inclusion   Versions Requiring Exclusion   Versions Allowing Inclusion\nnP2C Key Tweak   `PSBT_IN_P2C_TWEAK = 0x19`   `<pubkey>`{=html}    33 bytes of compact public key serialization specifying to which of keys the P2C tweak may be applied (i.e. this MUST be a value of a public key before the tweak is applied). BIP-340 keys are serialized by appending \\`02\\` byte.[^1]   `<tweak>`{=html}       The 32 byte value which MUST be added to a private key to produce correct ECDSA and/or Schnorr signature (\\\"key tweak\\\"). Signers SHOULD remove this field after `PSBT_IN_PARTIAL_SIG` is constructed.                                                                 0, 2"
    },
    {
      "header": "Security considerations {#security_considerations}",
      "content": "The scope of this proposal is deliberately kept narrow; it addresses\nonly spending of transaction outputs containing P2C tweaks - and does\nnot addresses construction of a new P2C commitments or transactions\ncontaining them in their outputs.[^2]"
    },
    {
      "header": "Rationale",
      "content": "```{=html}\n<references/>\n```"
    },
    {
      "header": "Compatibility",
      "content": "The proposal is compatible with the existing consensus rules and does\nnot require any of their modifications.\n\nThe proposed P2C PSBT fields provides sufficient information for\ncreating a valid signatures for spendings of the following output types\ncontaining tweaked public keys: - bare scripts, - P2PK, - P2PKH, -\nP2SH, - witness v0 P2WPKH and P2WSH, - nested witness v0 P2WPKH-P2SH and\nP2WSH-P2SH,\n\nPost-0 witness versions, including taproot outputs and future witness\nversions, may not be supported or covered by this BIP and may require\naddition of new fields to the PSBT inputs."
    },
    {
      "header": "Reference implementation {#reference_implementation}",
      "content": "WIP"
    },
    {
      "header": "Acknowledgements",
      "content": "Author is grateful to Andrew Poelstra, who provided an initial set of\nideas and information on his previous work on the topic basing on which\nthis standard was designed."
    },
    {
      "header": "Test vectors {#test_vectors}",
      "content": "TBD"
    },
    {
      "header": "References",
      "content": "\\[1\\] Ilja Gerhardt, Timo Hanke. Homomorphic Payment Addresses and the\n\n`\u00a0\u00a0\u00a0Pay-to-Contract\u00a0Protocol.\u00a0arXiv:1212.3257\u00a0`$$cs.CR$$\\\n`\u00a0\u00a0\u00a0<`[`https://arxiv.org/pdf/1212.3257.pdf`](https://arxiv.org/pdf/1212.3257.pdf)`>`\n\n\\[2\\] Eternity Wall\\'s \\\"sign-to-contract\\\" article.\n\n`\u00a0\u00a0\u00a0<`[`https://blog.eternitywall.com/2018/04/13/sign-to-contract/`](https://blog.eternitywall.com/2018/04/13/sign-to-contract/)`>`\n\n\\[3\\] Peter Todd. OpenTimestamps: Scalable, Trust-Minimized, Distributed\n\n`\u00a0\u00a0\u00a0Timestamping\u00a0with\u00a0Bitcoin.`\\\n`\u00a0\u00a0\u00a0<`[`https://petertodd.org/2016/opentimestamps-announcement`](https://petertodd.org/2016/opentimestamps-announcement)`>`\n\n\\[4\\] Adam Back, Matt Corallo, Luke Dashjr, et al. Enabling Blockchain\n\n`\u00a0\u00a0\u00a0Innovations\u00a0with\u00a0Pegged\u00a0Sidechains\u00a0(commit5620e43).\u00a0Appenxix\u00a0A.`\\\n`\u00a0\u00a0\u00a0<`[`https://blockstream.com/sidechains.pdf`](https://blockstream.com/sidechains.pdf)`>;.`\n\n\\[5\\] Maxim Orlovsky, Rene Pickhardt, Federico Tenga, et al. Key\n\n`\u00a0\u00a0\u00a0tweaking:\u00a0collision-\u00a0resistant\u00a0elliptic\u00a0curve-based\u00a0commitments.`\\\n`\u00a0\u00a0\u00a0LNPBP-1\u00a0Standard.`\\\n`\u00a0\u00a0\u00a0<`[`https://github.com/LNP-BP/LNPBPs/blob/master/lnpbp-0001.md`](https://github.com/LNP-BP/LNPBPs/blob/master/lnpbp-0001.md)`>`\n\n\\[6\\] Peter Todd. Single-use-seals. LNPBP-8 Standard.\n\n`\u00a0\u00a0\u00a0<`[`https://github.com/LNP-BP/LNPBPs/blob/master/lnpbp-0008.md`](https://github.com/LNP-BP/LNPBPs/blob/master/lnpbp-0008.md)`>`\n\n[^1]: **Why compressed public keys are not distinguished from BIP-340\npublic keys**We follow the logic of BIP32 key derivation which does\nnot performs that distinguishment. The type of the key is defined by\nthe input type, and adding additional PSBT field type will just\ncreate the need for handling errors when the input type does not\nmatch the provided key type.\n\n[^2]: **Why only spending of P2C tweaked outputs is covered** P2C tweaks\ncommit to external data, some of which may represent certain value\n(like in some sidechains, single-use-seal applications like RGB\netc). Creation of such outputs much allow hardware devices to\nunderstand the structure of such extra-transaction data, which may\nbe in different formats and constantly involve. Thus, this should be\naddresses with a separate standards (or be a vendor-based). The\ncurrent proposal only touches the question of spending an output\nwhich contained previously created P2C commitment, which does not\ncreates a new commitment and does not provides that kind of risk of\nextra-blockchain value loses."
    }
  ]
}