{
  "BIP": "342",
  "Layer": "Consensus (soft fork)",
  "Title": "Validation of Taproot Scripts",
  "Author": "Pieter Wuille <pieter.wuille@gmail.com>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0342",
  "Status": "Final",
  "Type": "Standards Track",
  "Created": "2020-01-19",
  "License": "BSD-3-Clause",
  "Requires": "340, 341",
  "Post-History": "2019-05-06: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016914.html [bitcoin-dev] Taproot proposal",
  "sections": [
    {
      "header": "Introduction",
      "content": "### Abstract\n\nThis document specifies the semantics of the initial scripting system\nunder [BIP341](bip-0341.mediawiki \"wikilink\")."
    },
    {
      "header": "Copyright",
      "content": "This document is licensed under the 3-clause BSD license."
    },
    {
      "header": "Motivation",
      "content": "[BIP341](bip-0341.mediawiki \"wikilink\") proposes improvements to just\nthe script structure, but some of its goals are incompatible with the\nsemantics of certain opcodes within the scripting language itself. While\nit is possible to deal with these in separate optional improvements,\ntheir impact is not guaranteed unless they are addressed simultaneously\nwith [BIP341](bip-0341.mediawiki \"wikilink\") itself.\n\nSpecifically, the goal is making **Schnorr signatures**, **batch\nvalidation**, and **signature hash** improvements available to spends\nthat use the script system as well."
    },
    {
      "header": "Design",
      "content": "In order to achieve these goals, signature opcodes `OP_CHECKSIG` and\n`OP_CHECKSIGVERIFY` are modified to verify Schnorr signatures as\nspecified in [BIP340](bip-0340.mediawiki \"wikilink\") and to use a\nsignature message algorithm based on the common message calculation in\n[BIP341](bip-0341.mediawiki \"wikilink\"). The tapscript signature message\nalso simplifies `OP_CODESEPARATOR` handling and makes it more efficient.\n\nThe inefficient `OP_CHECKMULTISIG` and `OP_CHECKMULTISIGVERIFY` opcodes\nare disabled. Instead, a new opcode `OP_CHECKSIGADD` is introduced to\nallow creating the same multisignature policies in a batch-verifiable\nway. Tapscript uses a new, simpler signature opcode limit fixing\ncomplicated interactions with transaction weight. Furthermore, a\npotential malleability vector is eliminated by requiring MINIMALIF.\n\nTapscript can be upgraded through soft forks by defining unknown key\ntypes, for example to add new `hash_types` or signature algorithms.\nAdditionally, the new tapscript `OP_SUCCESS` opcodes allow introducing\nnew opcodes more cleanly than through `OP_NOP`."
    },
    {
      "header": "Specification",
      "content": "The rules below only apply when validating a transaction input for which\nall of the conditions below are true:\n\n-   The transaction input is a **segregated witness spend** (i.e., the\nscriptPubKey contains a witness program as defined in\n[BIP141](bip-0141.mediawiki \"wikilink\")).\n-   It is a **taproot spend** as defined in\n[BIP341](bip-0341.mediawiki#design \"wikilink\") (i.e., the witness\nversion is 1, the witness program is 32 bytes, and it is not P2SH\nwrapped).\n-   It is a **script path spend** as defined in\n[BIP341](bip-0341.mediawiki#design \"wikilink\") (i.e., after removing\nthe optional annex from the witness stack, two or more stack\nelements remain).\n-   The leaf version is *0xc0* (i.e. the first byte of the last witness\nelement after removing the optional annex is *0xc0* or *0xc1*),\nmarking it as a **tapscript spend**.\n\nValidation of such inputs must be equivalent to performing the following\nsteps in the specified order.\n\n1.  If the input is invalid due to BIP141 or BIP341, fail.\n2.  The script as defined in BIP341 (i.e., the penultimate witness stack\nelement after removing the optional annex) is called the\n**tapscript** and is decoded into opcodes, one by one:\n1.  If any opcode numbered *80, 98, 126-129, 131-134, 137-138,\n141-142, 149-153, 187-254* is encountered, validation succeeds\n(none of the rules below apply). This is true even if later\nbytes in the tapscript would fail to decode otherwise. These\nopcodes are renamed to `OP_SUCCESS80`, \\..., `OP_SUCCESS254`,\nand collectively known as\n`OP_SUCCESSx``<ref>`{=html}**`OP_SUCCESSx`** `OP_SUCCESSx` is a\nmechanism to upgrade the Script system. Using an `OP_SUCCESSx`\nbefore its meaning is defined by a softfork is insecure and\nleads to fund loss. The inclusion of `OP_SUCCESSx` in a script\nwill pass it unconditionally. It precedes any script execution\nrules to avoid the difficulties in specifying various edge\ncases, for example: `OP_SUCCESSx` in a script with an input\nstack larger than 1000 elements, `OP_SUCCESSx` after too many\nsignature opcodes, or even scripts with conditionals lacking\n`OP_ENDIF`. The mere existence of an `OP_SUCCESSx` anywhere in\nthe script will guarantee a pass for all such cases.\n`OP_SUCCESSx` are similar to the `OP_RETURN` in very early\nbitcoin versions (v0.1 up to and including v0.3.5). The original\n`OP_RETURN` terminates script execution immediately, and return\npass or fail based on the top stack element at the moment of\ntermination. This was one of a major design flaws in the\noriginal bitcoin protocol as it permitted unconditional third\nparty theft by placing an `OP_RETURN` in `scriptSig`. This is\nnot a concern in the present proposal since it is not possible\nfor a third party to inject an `OP_SUCCESSx` to the validation\nprocess, as the `OP_SUCCESSx` is part of the script (and thus\ncommitted to by the taproot output), implying the consent of the\ncoin owner. `OP_SUCCESSx` can be used for a variety of upgrade\npossibilities:\n\n-   An `OP_SUCCESSx` could be turned into a functional opcode through a\nsoftfork. Unlike `OP_NOPx`-derived opcodes which only have read-only\naccess to the stack, `OP_SUCCESSx` may also write to the stack. Any\nrule changes to an `OP_SUCCESSx`-containing script may only turn a\nvalid script into an invalid one, and this is always achievable with\nsoftforks.\n-   Since `OP_SUCCESSx` precedes size check of initial stack and push\nopcodes, an `OP_SUCCESSx`-derived opcode requiring stack elements\nbigger than 520 bytes may uplift the limit in a softfork.\n-   `OP_SUCCESSx` may also redefine the behavior of existing opcodes so\nthey could work together with the new opcode. For example, if an\n`OP_SUCCESSx`-derived opcode works with 64-bit integers, it may also\nallow the existing arithmetic opcodes in the *same script* to do the\nsame.\n-   Given that `OP_SUCCESSx` even causes potentially unparseable scripts\nto pass, it can be used to introduce multi-byte opcodes, or even a\ncompletely new scripting language when prefixed with a specific\n`OP_SUCCESSx` opcode.\n```{=html}\n</ref>\n```\n.\n\n1.  1.  If any push opcode fails to decode because it would extend past\nthe end of the tapscript, fail.\n\n2.  If the **initial stack** as defined in BIP341 (i.e., the witness\nstack after removing both the optional annex and the two last stack\nelements after that) violates any resource limits (stack size, and\nsize of the elements in the stack; see \\\"Resource Limits\\\" below),\nfail. Note that this check can be bypassed using `OP_SUCCESSx`.\n\n3.  The tapscript is executed according to the rules in the following\nsection, with the initial stack as input.\n1.  If execution fails for any reason, fail.\n2.  If the execution results in anything but exactly one element on\nthe stack which evaluates to true with `CastToBool()`, fail.\n\n4.  If this step is reached without encountering a failure, validation\nsucceeds."
    },
    {
      "header": "Script execution {#script_execution}",
      "content": "The execution rules for tapscript are based on those for P2WSH according\nto BIP141, including the `OP_CHECKLOCKTIMEVERIFY` and\n`OP_CHECKSEQUENCEVERIFY` opcodes defined in\n[BIP65](bip-0065.mediawiki \"wikilink\") and\n[BIP112](bip-0112.mediawiki \"wikilink\"), but with the following\nmodifications:\n\n-   **Disabled script opcodes** The following script opcodes are\ndisabled in tapscript: `OP_CHECKMULTISIG` and\n`OP_CHECKMULTISIGVERIFY`[^1]. The disabled opcodes behave in the\nsame way as `OP_RETURN`, by failing and terminating the script\nimmediately when executed, and being ignored when found in\nunexecuted branch of the script.\n-   **Consensus-enforced MINIMALIF** The MINIMALIF rules, which are only\na standardness rule in P2WSH, are consensus enforced in tapscript.\nThis means that the input argument to the `OP_IF` and `OP_NOTIF`\nopcodes must be either exactly 0 (the empty vector) or exactly 1\n(the one-byte vector with value 1)[^2].\n-   **OP_SUCCESSx opcodes** As listed above, some opcodes are renamed to\n`OP_SUCCESSx`, and make the script unconditionally valid.\n-   **Signature opcodes**. The `OP_CHECKSIG` and `OP_CHECKSIGVERIFY` are\nmodified to operate on Schnorr public keys and signatures (see\n[BIP340](bip-0340.mediawiki \"wikilink\")) instead of ECDSA, and a new\nopcode `OP_CHECKSIGADD` is added.\n-   The opcode 186 (`0xba`) is named as `OP_CHECKSIGADD`.\n[^3]`<ref>`{=html}**Alternatives to `CHECKMULTISIG`** There are\nmultiple ways of implementing a threshold *k*-of-*n* policy\nusing Taproot and Tapscript:\n-   **Using a single `OP_CHECKSIGADD`-based script** A `CHECKMULTISIG`\nscript\n`m ``<pubkey_1>`{=html}` ... ``<pubkey_n>`{=html}` n CHECKMULTISIG`\nwith witness `0 ``<signature_1>`{=html}` ... ``<signature_m>`{=html}\ncan be rewritten as script\n`<pubkey_1>`{=html}` CHECKSIG ``<pubkey_2>`{=html}` CHECKSIGADD ... ``<pubkey_n>`{=html}` CHECKSIGADD m NUMEQUAL`\nwith witness `<w_n>`{=html}` ... ``<w_1>`{=html}. Every witness\nelement `w_i` is either a signature corresponding to `pubkey_i` or\nan empty vector. A similar `CHECKMULTISIGVERIFY` script can be\ntranslated to BIP342 by replacing `NUMEQUAL` with `NUMEQUALVERIFY`.\nThis approach has very similar characteristics to the existing\n`OP_CHECKMULTISIG`-based scripts.\n-   **Using a *k*-of-*k* script for every combination** A *k*-of-*n*\npolicy can be implemented by splitting the script into several\nleaves of the Merkle tree, each implementing a *k*-of-*k* policy\nusing\n`<pubkey_1>`{=html}` CHECKSIGVERIFY ... <pubkey_(n-1)> CHECKSIGVERIFY ``<pubkey_n>`{=html}` CHECKSIG`.\nThis may be preferable for privacy reasons over the previous\napproach, as it only exposes the participating public keys, but it\nis only more cost effective for small values of *k* (1-of-*n* for\nany *n*, 2-of-*n* for *n \u2265 6*, 3-of-*n* for *n \u2265 9*, \\...).\nFurthermore, the signatures here commit to the branch used, which\nmeans signers need to be aware of which other signers will be\nparticipating, or produce signatures for each of the tree leaves.\n-   **Using an aggregated public key for every combination** Instead of\nbuilding a tree where every leaf consists of *k* public keys, it is\npossible instead build a tree where every leaf contains a single\n*aggregate* of those *k* keys using\n[MuSig](https://eprint.iacr.org/2018/068). This approach is far more\nefficient, but does require a 3-round interactive signing protocol\nto jointly produce the (single) signature.\n-   **Native Schnorr threshold signatures** Multisig policies can also\nbe realized with [threshold\nsignatures](http://cacr.uwaterloo.ca/techreports/2001/corr2001-13.ps)\nusing verifiable secret sharing. This results in outputs and inputs\nthat are indistinguishable from single-key payments, but at the cost\nof needing an interactive protocol (and associated backup\nprocedures) before determining the address to send to.\n```{=html}\n</ref>\n```"
    },
    {
      "header": "Rules for signature opcodes {#rules_for_signature_opcodes}",
      "content": "The following rules apply to `OP_CHECKSIG`, `OP_CHECKSIGVERIFY`, and\n`OP_CHECKSIGADD`.\n\n-   For `OP_CHECKSIGVERIFY` and `OP_CHECKSIG`, the public key (top\nelement) and a signature (second to top element) are popped from the\nstack.\n-   If fewer than 2 elements are on the stack, the script MUST fail\nand terminate immediately.\n-   For `OP_CHECKSIGADD`, the public key (top element), a `CScriptNum`\n`n` (second to top element), and a signature (third to top element)\nare popped from the stack.\n-   If fewer than 3 elements are on the stack, the script MUST fail\nand terminate immediately.\n-   If `n` is larger than 4 bytes, the script MUST fail and\nterminate immediately.\n-   If the public key size is zero, the script MUST fail and terminate\nimmediately.\n-   If the public key size is 32 bytes, it is considered to be a public\nkey as described in BIP340:\n-   If the signature is not the empty vector, the signature is\nvalidated against the public key (see the next subsection).\nValidation failure in this case immediately terminates script\nexecution with failure.\n-   If the public key size is not zero and not 32 bytes, the public key\nis of an *unknown public key type*[^4] and no actual signature\nverification is applied. During script execution of signature\nopcodes they behave exactly as known public key types except that\nsignature validation is considered to be successful.\n-   If the script did not fail and terminate before this step,\nregardless of the public key type:\n-   If the signature is the empty vector:\n-   For `OP_CHECKSIGVERIFY`, the script MUST fail and terminate\nimmediately.\n-   For `OP_CHECKSIG`, an empty vector is pushed onto the stack,\nand execution continues with the next opcode.\n-   For `OP_CHECKSIGADD`, a `CScriptNum` with value `n` is\npushed onto the stack, and execution continues with the next\nopcode.\n-   If the signature is not the empty vector, the opcode is counted\ntowards the sigops budget (see further).\n-   For `OP_CHECKSIGVERIFY`, execution continues without any\nfurther changes to the stack.\n-   For `OP_CHECKSIG`, a 1-byte value `0x01` is pushed onto the\nstack.\n-   For `OP_CHECKSIGADD`, a `CScriptNum` with value of `n + 1`\nis pushed onto the stack."
    },
    {
      "header": "Common Signature Message Extension {#common_signature_message_extension}",
      "content": "We define the tapscript message extension *ext* to [BIP341 Common\nSignature\nMessage](bip-0341.mediawiki#common-signature-message \"wikilink\"),\nindicated by *ext_flag = 1*:\n\n-   *tapleaf_hash* (32): the tapleaf hash as defined in\n[BIP341](bip-0341.mediawiki#design \"wikilink\")\n-   *key_version* (1): a constant value *0x00* representing the current\nversion of public keys in the tapscript signature opcode execution.\n-   *codesep_pos* (4): the opcode position of the last executed\n`OP_CODESEPARATOR` before the currently executed signature opcode,\nwith the value in little endian (or *0xffffffff* if none executed).\nThe first opcode in a script has a position of 0. A multi-byte push\nopcode is counted as one opcode, regardless of the size of data\nbeing pushed. Opcodes in parsed but unexecuted branches count\ntowards this value as well."
    },
    {
      "header": "Signature validation {#signature_validation}",
      "content": "To validate a signature *sig* with public key *p*:\n\n-   Compute the tapscript message extension *ext* described above.\n-   If the *sig* is 64 bytes long, return *Verify(p,\nhash~TapSighash~(0x00 \\|\\| SigMsg(0x00, 1) \\|\\| ext), sig)*, where\n*Verify* is defined in\n[BIP340](bip-0340.mediawiki#design \"wikilink\").\n-   If the *sig* is 65 bytes long, return *sig\\[64\\] \u2260 0x00 and\nVerify(p, hash~TapSighash~(0x00 \\|\\| SigMsg(sig\\[64\\], 1) \\|\\| ext),\nsig\\[0:64\\])*.\n-   Otherwise, fail.\n\nIn summary, the semantics of signature validation is identical to\nBIP340, except the following:\n\n1.  The signature message includes the tapscript-specific data\n*key_version*.[^5]\n2.  The signature message commits to the executed script through the\n*tapleaf_hash* which includes the leaf version and script instead of\n*scriptCode*. This implies that this commitment is unaffected by\n`OP_CODESEPARATOR`.\n3.  The signature message includes the opcode position of the last\nexecuted `OP_CODESEPARATOR`.[^6]"
    },
    {
      "header": "Resource limits {#resource_limits}",
      "content": "In addition to changing the semantics of a number of opcodes, there are\nalso some changes to the resource limitations:\n\n-   **Script size limit** The maximum script size of 10000 bytes does\nnot apply. Their size is only implicitly bounded by the block weight\nlimit.[^7]\n-   **Non-push opcodes limit** The maximum non-push opcodes limit of 201\nper script does not apply.[^8]\n-   **Sigops limit** The sigops in tapscripts do not count towards the\nblock-wide limit of 80000 (weighted). Instead, there is a per-script\nsigops *budget*. The budget equals 50 + the total serialized size in\nbytes of the transaction input\\'s witness (including the\n`CompactSize` prefix). Executing a signature opcode (`OP_CHECKSIG`,\n`OP_CHECKSIGVERIFY`, or `OP_CHECKSIGADD`) with a non-empty signature\ndecrements the budget by 50. If that brings the budget below zero,\nthe script fails immediately. Signature opcodes with unknown public\nkey type and non-empty signature are also counted.[^9][^10][^11].\n-   **Stack + altstack element count limit** The existing limit of 1000\nelements in the stack and altstack together after every executed\nopcode remains. It is extended to also apply to the size of initial\nstack.\n-   **Stack element size limit** The existing limit of maximum 520 bytes\nper stack element remains, both in the initial stack and in push\nopcodes."
    },
    {
      "header": "Rationale",
      "content": "```{=html}\n<references />\n```"
    },
    {
      "header": "Deployment",
      "content": "This proposal is deployed identically to Taproot\n([BIP341](bip-0341.mediawiki \"wikilink\"))."
    },
    {
      "header": "Examples",
      "content": "The Taproot ([BIP341](bip-0341.mediawiki \"wikilink\")) test vectors also\ncontain examples for Tapscript execution."
    },
    {
      "header": "Acknowledgements",
      "content": "This document is the result of many discussions and contains\ncontributions by a number of people. The authors wish to thank all those\nwho provided valuable feedback and reviews, including the participants\nof the [structured reviews](https://github.com/ajtowns/taproot-review).\n\n[^1]: **Why are `OP_CHECKMULTISIG` and `OP_CHECKMULTISIGVERIFY`\ndisabled, and not turned into OP_SUCCESSx?** This is a precaution to\nmake sure people who accidentally keep using `OP_CHECKMULTISIG` in\nTapscript notice a problem immediately. It also avoids the\ncomplication of script disassemblers needing to become\ncontext-dependent.\n\n[^2]: **Why make MINIMALIF consensus?** This makes it considerably\neasier to write non-malleable scripts that take branch information\nfrom the stack.\n\n[^3]: **`OP_CHECKSIGADD`** This opcode is added to compensate for the\nloss of `OP_CHECKMULTISIG`-like opcodes, which are incompatible with\nbatch verification. `OP_CHECKSIGADD` is functionally equivalent to\n`OP_ROT OP_SWAP OP_CHECKSIG OP_ADD`, but only takes 1 byte. All\n`CScriptNum`-related behaviours of `OP_ADD` are also applicable to\n`OP_CHECKSIGADD`.\n\n[^4]: **Unknown public key types** allow adding new signature validation\nrules through softforks. A softfork could add actual signature\nvalidation which either passes or makes the script fail and\nterminate immediately. This way, new `SIGHASH` modes can be added,\nas well as [NOINPUT-tagged public\nkeys](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-December/016549.html)\nand a public key constant which is replaced by the taproot internal\nkey for signature validation.\n\n[^5]: **Why does the signature message commit to the *key_version*?**\nThis is for future extensions that define unknown public key types,\nmaking sure signatures can\\'t be moved from one key type to another.\n\n[^6]: **Why does the signature message include the position of the last\nexecuted `OP_CODESEPARATOR`?** This allows continuing to use\n`OP_CODESEPARATOR` to sign the executed path of the script. Because\nthe `codeseparator_position` is the last input to the hash, the\nSHA256 midstate can be efficiently cached for multiple\n`OP_CODESEPARATOR`s in a single script. In contrast, the BIP143\nhandling of `OP_CODESEPARATOR` is to commit to the executed script\nonly from the last executed `OP_CODESEPARATOR` onwards which\nrequires unnecessary rehashing of the script. It should be noted\nthat the one known `OP_CODESEPARATOR` use case of saving a second\npublic key push in a script by sharing the first one between two\ncode branches can be most likely expressed even cheaper by moving\neach branch into a separate taproot leaf.\n\n[^7]: **Why is a limit on script size no longer needed?** Since there is\nno `scriptCode` directly included in the signature hash (only\nindirectly through a precomputable tapleaf hash), the CPU time spent\non a signature check is no longer proportional to the size of the\nscript being executed.\n\n[^8]: **Why is a limit on the number of opcodes no longer needed?** An\nopcode limit only helps to the extent that it can prevent data\nstructures from growing unboundedly during execution (both because\nof memory usage, and because of time that may grow in proportion to\nthe size of those structures). The size of stack and altstack is\nalready independently limited. By using O(1) logic for `OP_IF`,\n`OP_NOTIF`, `OP_ELSE`, and `OP_ENDIF` as suggested\n[here](https://bitslog.com/2017/04/17/new-quadratic-delays-in-bitcoin-scripts/)\nand implemented\n[here](https://github.com/bitcoin/bitcoin/pull/16902), the only\nother instance can be avoided as well.\n\n[^9]: **The tapscript sigop limit** The signature opcode limit protects\nagainst scripts which are slow to verify due to excessively many\nsignature operations. In tapscript the number of signature opcodes\ndoes not count towards the BIP141 or legacy sigop limit. The old\nsigop limit makes transaction selection in block construction\nunnecessarily difficult because it is a second constraint in\naddition to weight. Instead, the number of tapscript signature\nopcodes is limited by witness weight. Additionally, the limit\napplies to the transaction input instead of the block and only\nactually executed signature opcodes are counted. Tapscript execution\nallows one signature opcode per 50 witness weight units plus one\nfree signature opcode.\n\n[^10]: **Parameter choice of the sigop limit** Regular witnesses are\nunaffected by the limit as their weight is composed of public key\nand (`SIGHASH_ALL`) signature pairs with *33 + 65* weight units each\n(which includes a 1 weight unit `CompactSize` tag). This is also the\ncase if public keys are reused in the script because a signature\\'s\nweight alone is 65 or 66 weight units. However, the limit increases\nthe fees of abnormal scripts with duplicate signatures (and public\nkeys) by requiring additional weight. The weight per sigop factor 50\ncorresponds to the ratio of BIP141 block limits: 4 mega weight units\ndivided by 80,000 sigops. The \\\"free\\\" signature opcode permitted by\nthe limit exists to account for the weight of the non-witness parts\nof the transaction input.\n\n[^11]: **Why are only signature opcodes counted toward the budget, and\nnot for example hashing opcodes or other expensive operations?** It\nturns out that the CPU cost per witness byte for verification of a\nscript consisting of the maximum density of signature checking\nopcodes (taking the 50 WU/sigop limit into account) is already very\nclose to that of scripts packed with other opcodes, including\nhashing opcodes (taking the 520 byte stack element limit into\naccount) and `OP_ROLL` (taking the 1000 stack element limit into\naccount). That said, the construction is very flexible, and allows\nadding new signature opcodes like `CHECKSIGFROMSTACK` to count\ntowards the limit through a soft fork. Even if in the future new\nopcodes are introduced which change normal script cost there is no\nneed to stuff the witness with meaningless data. Instead, the\ntaproot annex can be used to add weight to the witness without\nincreasing the actual witness size."
    }
  ]
}