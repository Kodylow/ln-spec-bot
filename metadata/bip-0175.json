{
  "BIP": "175",
  "Layer": "Applications",
  "Title": "Pay to Contract Protocol",
  "Author": "Omar Shibli <omar@commerceblock.com>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0175",
  "Status": "Rejected",
  "Type": "Informational",
  "Created": "2017-07-17",
  "License": "BSD-2-Clause",
  "sections": [
    {
      "header": "Abstract",
      "content": "Utilizing hierarchical deterministic wallets as described in BIP-0032\nand the \\\"Purpose Field\\\" in BIP-0043, this document specifies the\nmultiparty pay-to-contract key derivation scheme outlined by Ilja\nGerhardt and Timo Hanke.\\[0\\]\n\nThe key words \\\"MUST\\\", \\\"MUST NOT\\\", \\\"REQUIRED\\\", \\\"SHALL\\\", \\\"SHALL\nNOT\\\", \\\"SHOULD\\\", \\\"SHOULD NOT\\\", \\\"RECOMMENDED\\\", \\\"MAY\\\", and\n\\\"OPTIONAL\\\" in this document are to be interpreted as described in RFC\n2119."
    },
    {
      "header": "Motivation",
      "content": "A Bitcoin transaction represents a \\\"real world\\\" contract between two\nparties transferring value. Counterparties in a business interaction\ntraditionally keep track of a payment with bills (invoices) and\nreceipts. Delivery of a good is made by the payee once the payer has\nsigned the receipt, agreeing to pay for the items on the invoice.\nGerhardt and Hanke \\[0\\] formulate this interaction within the confines\nof the Bitcoin protocol using homomorphic payment addresses and the\nmultiparty pay-to-contract protocol.\n\nThe protocol is constructed in such a way that all parties have\ncryptographic proof of both who is being paid and for what. Using the\ntechnique described in this BIP, an address can be provably derived from\nthe terms of a contract and the payee\\'s public key. This derivation\nscheme does not bloat the UTXO and is completely hidden to network\nparticipants; the derived address looks like any other P2(W)PKH or\nP2(W)SH address. Redemption of the funds requires knowledge of the\ncontract and the payee\\'s private key.\n\nThis scheme utilizes the foundations of BIP-0032, providing a consistent\nway for preexisting wallet developers to implement the specification."
    },
    {
      "header": "Specification",
      "content": "This key derivation scheme requires two parties: a payer (customer) and\na payee (merchant). The customer submits to the merchant a purchase\nrequest, specifying what goods/services they would like to buy. From the\npurchase request the merchant constructs an invoice (contract),\nspecifying the billable items and total amount to be paid. The merchant\nmust give this contract alongside a \"payment base\" extended public key\nto the customer. Given this information, the customer will be able to\nfulfill the contract by generating the public key of the payment address\nassociated with the contract and the payment base, then sending the\nfunds there.\n\nWe define the following levels in BIP32 path:\n\n`m / purpose' / coin_type' / contract_hash`\n\n`contract_hash` consists of multiple levels.\n\nApostrophe in the path indicates that BIP32 hardened derivation is used.\n\nWe define the following extended public keys:\n\nPayment base denoted as `payment_base`:\n\n`\u00a0\u00a0\u00a0m\u00a0/\u00a0purpose'\u00a0/\u00a0coin_type'`\n\nPayment address denoted as `payment_address`:\n\n`\u00a0\u00a0\u00a0m\u00a0/\u00a0purpose'\u00a0/\u00a0coin_type'\u00a0/\u00a0contract_hash`\\\n`\u00a0\u00a0\u00a0or`\\\n`\u00a0\u00a0\u00a0m\u00a0/\u00a0payment_base\u00a0/\u00a0contract_hash`\n\nEach level has special meaning described in the chapters below."
    },
    {
      "header": "Purpose",
      "content": "Purpose is a constant set to `175'` (or `0x800000AF`) following the\nBIP-0043 recommendation. It indicates that the subtree of this node is\nused according to this specification.\n\n`m / 175' / *`\n\nHardened derivation is used at this level."
    },
    {
      "header": "Coin type {#coin_type}",
      "content": "The coin type field is identical to the same field in BIP-0044.\n\nHardened derivation is used at this level."
    },
    {
      "header": "Payment address generation {#payment_address_generation}",
      "content": "For a given contract documents denoted by c~1~,\\...,c~n~, payment base\nextended public key denoted by `payment_base`, and cryptographic hash\nfunction denoted by `h`.\n\n1\\. Compute cryptographic hashes for all contract documents, by applying\nthe hash function.\n\n`\u00a0h(c1),...,h(cn)`\n\n2\\. Sort all hashes lexicographically.\n\n`\u00a0hash_1,...,hash_n`\n\n3\\. Prepend payment_base and concatenate the sorted hashes and apply the\nhash function.\n\n`\u00a0h(payment_base+hash_1+...+hash_n)`\n\n4\\. Compute a partial BIP32 derivation path from the combined hash as\ndefined in Hash to Partial Derivation Path Mapping procedure below.\n\n`\u00a0contract_hash`\n\n5\\. Prepend `payment_base` to contract_hash derivation path.\n\n`\u00a0payment_base\u00a0/\u00a0contract_hash`\n\n6\\. Compute public extended key from the derivation path in step 5.\n\n7\\. Compute address of the public extended key (P2PKH) from step 6."
    },
    {
      "header": "Payment address verification {#payment_address_verification}",
      "content": "For a given Bitcoin address, `payment_base` extended public key,\ncontract documents denoted by c~1~,\\...,c~n~, and cryptographic hash\nfunction denoted by `h`, we can verify the integrity of the address by\nthe following steps:\n\n1\\. Compute contract address from the given inputs as described in\nContract Address Generation section.\n\n2\\. Compare the computed address from step 1 with the given Bitcoin\naddress as an input."
    },
    {
      "header": "Redemption",
      "content": "The merchant is able to construct the private key offline using the\nmethod described in the Payment Address Generation section. The merchant\nshould actively monitor the blockchain for the payment to the payment\naddress. Because the address is generated from the payment base and the\ncontract, the merchant must implicitly agree to those terms in order to\nspend the funds. The act of making the payment to that address thus\nserves as a receipt for the customer."
    },
    {
      "header": "Hash to partial derivation path mapping {#hash_to_partial_derivation_path_mapping}",
      "content": "At this section, we define hash to partial BIP32 derivation path mapping\nprocedure that maps between an arbitrary hex number to a partial BIP32\nderivation path.\n\nFor a given hex number, do the following:\n\n1\\. Partition hex number into parts, each part length is 4 chars.\n\n2\\. Convert each part to integer in decimal format.\n\n3\\. Concatenate all numbers with slash `/`."
    },
    {
      "header": "Examples",
      "content": "For the following given inputs:\n\n`\u00a0master\u00a0private\u00a0extended\u00a0key:`\\\n`\u00a0xprv9s21ZrQH143K2JF8RafpqtKiTbsbaxEeUaMnNHsm5o6wCW3z8ySyH4UxFVSfZ8n7ESu7fgir8imbZKLYVBxFPND1pniTZ81vKfd45EHKX73`\\\n`\u00a0coin\u00a0type:`\\\n`\u00a00`\n\nwe can compute payment base as follows:\n\n`\u00a0payment\u00a0base\u00a0derivation\u00a0path:`\\\n`\u00a0m/175'/0'`\\\n`\u00a0contract\u00a0base\u00a0public\u00a0extended\u00a0key:`\\\n`\u00a0xpub6B3JSEWjqm5GgfzcjPwBixxLPzi15pFM3jq4E4yCzXXUFS5MFdXiSdw7b5dbdPGHuc7c1V4zXbbFRtc9G1njMUt9ZvMdGVGYQSQsurD6HAW`\n\nIn the below examples, we are going to use SHA256 as a cryptographic\nhash function, and the above contract base public key."
    },
    {
      "header": "Payment address generation {#payment_address_generation_1}",
      "content": "As an input, we have a contract that consists of two documents, below\nare contents:\n\ndocument 1:\n\n`\u00a0bar`\n\ndocument 2:\n\n`\u00a0foo`\n\n1\\. Apply the hash function:\n\n`\u00a0document\u00a01:`\\\n`\u00a0fcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9`\\\n`\u00a0document\u00a02:`\\\n`\u00a02c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae`\n\n2\\. Sort all hashes lexicographically:\n\n`\u00a02c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae`\\\n`\u00a0fcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9`\n\n3\\. Concatenate hashes and apply the hash function.\n\n`\u00a0concatenated\u00a0hash:\u00a0payment_base`\\\n`\u00a0xpub6B3JSEWjqm5GgfzcjPwBixxLPzi15pFM3jq4E4yCzXXUFS5MFdXiSdw7b5dbdPGHuc7c1V4zXbbFRtc9G1njMUt9ZvMdGVGYQSQsurD6HAW2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7aefcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9`\\\n`\u00a0combined\u00a0hash:`\\\n`\u00a0310057788c6073640dc222466d003411cd5c1cc0bf2803fc6ebbfae03ceb4451`\n\n4\\. Compute the partial BIP32 derivation path of the combined hash.\n\n`\u00a012544/22392/35936/29540/3522/8774/27904/13329/52572/7360/48936/1020/28347/64224/15595/17489`\n\n5\\. Prepend `payment_base` to `contract_hash` derivation path.\n\n`\u00a0contract_base_pub/12544/22392/35936/29540/3522/8774/27904/13329/52572/7360/48936/1020/28347/64224/15595/17489`\\\n`\u00a0or`\\\n`\u00a0m/175'/0'/12544/22392/35936/29540/3522/8774/27904/13329/52572/7360/48936/1020/28347/64224/15595/17489`\n\n6\\. Compute public extended key.\n\n`\u00a0xpub6hefaATTG5LbcwyPDvmNfnkyzefoM2TJDoo5astH7Gvs1g8vZURviBWvAvBnWc2CNb8ybJ6mDpnQYVsvNSZ3oUmbssX3rUVG97TFYa6AXVk`\n\n7\\. Compute address of the public extended key (P2PKH).\n\n`\u00a01C7f322izqMqLzZzfzkPAjxBzprxDi47Yf`"
    },
    {
      "header": "Verification example (negative test) {#verification_example_negative_test}",
      "content": "Similar to the input above, except this time we have a contract that\nconsists of one document, below is the content:\n\ndocument 1:\n\n`\u00a0baz`\n\n1\\. Apply the hash function.\n\n`\u00a0baa5a0964d3320fbc0c6a922140453c8513ea24ab8fd0577034804a967248096`\n\n2\\. Prepend payment_base\n\n`\u00a0xpub6B3JSEWjqm5GgfzcjPwBixxLPzi15pFM3jq4E4yCzXXUFS5MFdXiSdw7b5dbdPGHuc7c1V4zXbbFRtc9G1njMUt9ZvMdGVGYQSQsurD6HAWbaa5a0964d3320fbc0c6a922140453c8513ea24ab8fd0577034804a967248096`\n\n2\\. Apply hash function\n\n`\u00a03a08605829413ce0bf551b08d21e4a28dbda6e407f90eff1c448e839050c73a1`\n\n3\\. Compute the partial derivation path.\n\n`\u00a05338/54412/19213/962/30664/62597/11873/59874/56779/24089/54550/19585/28087/36422/18666/17562`\n\n4\\. Prepend contract_base~pub~ to contract_hash derivation path.\n\n`\u00a0contract_base_pub/5338/54412/19213/962/30664/62597/11873/59874/56779/24089/54550/19585/28087/36422/18666/17562`\\\n`\u00a0or`\\\n`\u00a0m/175'/0'/5338/54412/19213/962/30664/62597/11873/59874/56779/24089/54550/19585/28087/36422/18666/17562`\n\n5\\. Compute public extended key.\n\n`\u00a0xpub6h9k2KqsMpwghxt7naj1puhGV1ZDC88sxvpYN1HibCf8yQZdPsuhYmmvdK32Kf2Lb3rS1sV8UcZ1f84DJEiXuVfLCAj4bC85aEUCxh38m8i`\n\n7\\. Compute address of the public extended key (P2PKH).\n\n`\u00a01QGe5LaDMAmHeibJbZBmZqhQDZSp7QCqSs`\n\n8\\. As expected the address doesn\\'t match the Bitcoin address from the\nlast example `1C7f322izqMqLzZzfzkPAjxBzprxDi47Yf`.\n\nVerification operation will succeed only if we use identical documents\nto ones that have been used in the contract address generation."
    },
    {
      "header": "Compatibility",
      "content": "This specification is not backward compatible with BIP32 specification,\nthe proposed derivation scheme in this BIP is a BIP32 compliant.\nCommunication between payer and payee as well as hashing the contract\nand generating the path requires significant modification to the wallet."
    },
    {
      "header": "Reference implementations {#reference_implementations}",
      "content": "-   Reference wallet implementation, based on Copay project :\n<https://github.com/commerceblock/copay>\n([pull_request](https://github.com/commerceblock/copay/pull/1 \"wikilink\"))\n-   Reference implementation to Hash to Partial Derivation Path Mapping\nin javascript\n([<https://github.com/commerceblock/pay-to-contract-lib>](https://github.com/commerceblock/pay-to-contract-lib/blob/master/lib/contract.js \"wikilink\"))"
    },
    {
      "header": "Reference",
      "content": "-   [BIP32 - Hierarchical Deterministic\nWallets](bip-0032.mediawiki \"wikilink\")\n-   [BIP43 - Purpose Field for Deterministic\nWallets](bip-0043.mediawiki \"wikilink\")\n-   [BIP44 - Multi-Account Hierarchy for Deterministic\nWallets](bip-0044.mediawiki \"wikilink\")\n-   [Homomorphic Payment Addresses and the Pay-to-Contract\nProtocol](https://arxiv.org/abs/1212.3257 \"wikilink\")"
    },
    {
      "header": "Copyright",
      "content": "This BIP is licensed under the 2-clause BSD license."
    }
  ]
}