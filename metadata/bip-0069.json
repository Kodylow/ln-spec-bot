{
  "BIP": "69",
  "Layer": "Applications",
  "Title": "Lexicographical Indexing of Transaction Inputs and Outputs",
  "Author": "Kristov Atlas <kristov@openbitcoinprivacyproject.org>",
  "Editor": "Daniel Cousens <bips@dcousens.com>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0069",
  "Status": "Proposed",
  "Type": "Informational",
  "Created": "2015-06-12",
  "License": "PD",
  "sections": [
    {
      "header": "Abstract",
      "content": "Currently there is no standard for bitcoin wallet clients when ordering\ntransaction inputs and outputs. As a result, wallet clients often have a\ndiscernible blockchain fingerprint, and can leak private information\nabout their users. By contrast, a standard for non-deterministic sorting\ncould be difficult to audit. This document proposes deterministic\nlexicographical sorting, using hashes of previous transactions and\noutput indices to sort transaction inputs, as well as values and\nscriptPubKeys to sort transaction outputs."
    },
    {
      "header": "Copyright",
      "content": "This BIP is in the public domain."
    },
    {
      "header": "Motivation",
      "content": "Currently, there is no clear standard for how wallet clients ought to\norder transaction inputs and outputs. Since wallet clients are left to\ntheir own devices to determine this ordering, they often leak\ninformation about their users' finances. For example, a wallet client\nmight naively order inputs based on when addresses were added to a\nwallet by the user through importing or random generation. Many wallets\nwill place spending outputs first and change outputs second, leaking\ninformation about both the sender and receiver's finances to passive\nblockchain observers. Such information should remain private not only\nfor the benefit of consumers, but in higher order financial systems must\nbe kept secret to prevent fraud. A researcher recently demonstrated this\nprinciple when he detected that Bitstamp leaked information when\ncreating exchange transactions, enabling potential espionage among\ntraders. \\[1\\]\n\nOne way to address these privacy weaknesses is by randomizing the order\nof inputs and outputs. \\[2\\] After all, the order of inputs and outputs\ndoes not impact the function of the transaction they belong to, making\nrandom sorting viable. Unfortunately, it can be difficult to prove that\nthis sorting process is genuinely randomly sorted based on code or\nrun-time analysis, especially if the software is closed source. A\nmalicious software developer can abuse the ordering of inputs and\noutputs as a side channel of leaking information. For example, if an\nattacker can patch a victim's HD wallet client to order inputs and\noutputs based on the bits of a master private key, then the attacker can\neventually steal all of the victim's funds by monitoring the blockchain.\nNon-deterministic methods of sorting are difficult to audit because they\nare not repeatable.\n\nThe lack of standardization between wallet clients when ordering inputs\nand outputs can yield predictable quirks that characterize particular\nwallet clients or services. Such quirks create unique fingerprints that\na privacy attacker can employ through simple passive blockchain\nobservation.\n\nThe solution is to create an algorithm for sorting transaction inputs\nand outputs that is deterministic. Since it is deterministic, it should\nalso be unambiguous --- that is, given a particular transaction, the\nproper order of inputs and outputs should be obvious. To make this\nstandard as widely applicable as possible, it should rely on information\nthat is downloaded by both full nodes (with or without typical\nefficiency techniques such as pruning) and SPV nodes. In order to ensure\nthat it does not leak confidential data, it must rely on information\nthat is publicly accessible through the blockchain. The use of public\nblockchain information also allows a transaction to be sorted even when\nit is a multi-party transaction, such as in the example of a CoinJoin."
    },
    {
      "header": "Specification",
      "content": "### Applicability\n\nThis BIP applies to any transaction for which the order of its inputs\nand outputs does not impact the transaction's function. Currently, this\nrefers to any transaction that employs the SIGHASH_ALL signature hash\ntype, in which signatures commit to the exact order of inputs and\noutputs. Transactions that use SIGHASH_ANYONECANPAY and/or SIGHASH_NONE\nmay include inputs and/or outputs that are not signed; however,\ncompliant software should still emit transactions with lexicographically\nsorted inputs and outputs, even though they may later be modified by\nothers.\n\nIn the event that future protocol upgrades introduce new signature hash\ntypes, compliant software should apply the lexicographical ordering\nprinciple analogously.\n\nWhile out of scope of this BIP, protocols that do require a specified\norder of inputs/outputs (e.g. due to use of SIGHASH_SINGLE) should\nconsider the goals of this BIP and how best to adapt them to the\nspecific needs of those protocols."
    },
    {
      "header": "Lexicographical Ordering {#lexicographical_ordering}",
      "content": "Lexicographical ordering is an algorithm for comparison used to sort two\nsets based on their cartesian order within their common superset.\nLexicographic order is also often known as alphabetical order, or\ndictionary order.\n\nCommon implementations include:\n\n-   \\`std::lexicographical_compare\\` in C++ \\[5\\]\n-   \\`cmp\\` in Python 2.7\n-   \\`memcmp\\` in C \\[6\\]\n-   \\`Buffer.compare\\` in Node.js \\[7\\]\n\nFor more information, see the wikipedia entry on Lexicographical order.\n\\[8\\]\n\nN.B. All comparisons do not need to operate in constant time since they\nare not processing secret information."
    },
    {
      "header": "Transaction Inputs {#transaction_inputs}",
      "content": "Transaction inputs are defined by the hash of a previous transaction,\nthe output index of a UTXO from that previous transaction, the size of\nan unlocking script, the unlocking script, and a sequence number. \\[3\\]\nFor sorting inputs, the hash of the previous transaction and the output\nindex within that transaction are sufficient for sorting purposes; each\ntransaction hash has an extremely high probability of being unique in\nthe blockchain --- this is enforced for coinbase transactions by BIP30\n--- and output indices within a transaction are unique. For the sake of\nefficiency, transaction hashes should be compared first before output\nindices, since output indices from different transactions are often\nequivalent, while all bytes of the transaction hash are effectively\nrandom variables.\n\nPrevious transaction hashes (in reversed byte-order) are to be sorted in\nascending order, lexicographically. In the event of two matching\ntransaction hashes, the respective previous output indices will be\ncompared by their integer value, in ascending order. If the previous\noutput indices match, the inputs are considered equal.\n\nTransaction malleability will not negatively impact the correctness of\nthis process. Even if a wallet client follows this process using\nunconfirmed UTXOs as inputs and an attacker modifies the blockchain's\nrecord of the hash of the previous transaction, the wallet client will\ninclude the invalidated previous transaction hash in its input data, and\nwill still correctly sort with respect to that invalidated hash."
    },
    {
      "header": "Transaction Outputs {#transaction_outputs}",
      "content": "A transaction output is defined by its scriptPubKey and amount. \\[3\\]\nFor the sake of efficiency, amounts should be compared first for\nsorting, since they contain fewer bytes of information (8 bytes)\ncompared to a standard P2PKH scriptPubKey (25 bytes). \\[4\\]\n\nTransaction output amounts (as 64-bit unsigned integers) are to be\nsorted in ascending order. In the event of two matching output amounts,\nthe respective output scriptPubKeys (as a byte-array) will be compared\nlexicographically, in ascending order. If the scriptPubKeys match, the\noutputs are considered equal."
    },
    {
      "header": "Examples",
      "content": "Transaction\n0a6a357e2f7796444e02638749d9611c008b253fb55f5dc88b739b230ed0c4c3:\n\nInputs:\n\n`0:\u00a00e53ec5dfb2cb8a71fec32dc9a634a35b7e24799295ddd5278217822e0b31f57[0]`\\\n`\u00a01:\u00a026aa6e6d8b9e49bb0630aac301db6757c02e3619feb4ee0eea81eb1672947024[1]`\\\n`\u00a02:\u00a028e0fdd185542f2c6ea19030b0796051e7772b6026dd5ddccd7a2f93b73e6fc2[0]`\\\n`\u00a03:\u00a0381de9b9ae1a94d9c17f6a08ef9d341a5ce29e2e60c36a52d333ff6203e58d5d[1]`\\\n`\u00a04:\u00a03b8b2f8efceb60ba78ca8bba206a137f14cb5ea4035e761ee204302d46b98de2[0]`\\\n`\u00a05:\u00a0402b2c02411720bf409eff60d05adad684f135838962823f3614cc657dd7bc0a[1]`\\\n`\u00a06:\u00a054ffff182965ed0957dba1239c27164ace5a73c9b62a660c74b7b7f15ff61e7a[1]`\\\n`\u00a07:\u00a0643e5f4e66373a57251fb173151e838ccd27d279aca882997e005016bb53d5aa[0]`\\\n`\u00a08:\u00a06c1d56f31b2de4bfc6aaea28396b333102b1f600da9c6d6149e96ca43f1102b1[1]`\\\n`\u00a09:\u00a07a1de137cbafb5c70405455c49c5104ca3057a1f1243e6563bb9245c9c88c191[0]`\\\n`\u00a010:\u00a07d037ceb2ee0dc03e82f17be7935d238b35d1deabf953a892a4507bfbeeb3ba4[1]`\\\n`\u00a011:\u00a0a5e899dddb28776ea9ddac0a502316d53a4a3fca607c72f66c470e0412e34086[0]`\\\n`\u00a012:\u00a0b4112b8f900a7ca0c8b0e7c4dfad35c6be5f6be46b3458974988e1cdb2fa61b8[0]`\\\n`\u00a013:\u00a0bafd65e3c7f3f9fdfdc1ddb026131b278c3be1af90a4a6ffa78c4658f9ec0c85[0]`\\\n`\u00a014:\u00a0de0411a1e97484a2804ff1dbde260ac19de841bebad1880c782941aca883b4e9[1]`\\\n`\u00a015:\u00a0f0a130a84912d03c1d284974f563c5949ac13f8342b8112edff52971599e6a45[0]`\\\n`\u00a016:\u00a0f320832a9d2e2452af63154bc687493484a0e7745ebd3aaf9ca19eb80834ad60[0]`\n\nOutputs:\n\n`0:\u00a0\u00a0\u00a0\u00a0400057456\u00a0\u00a0\u00a0\u00a076a9144a5fba237213a062f6f57978f796390bdcf8d01588ac`\\\n`\u00a01:\u00a0\u00a0\u00a0\u00a040000000000\u00a0\u00a0\u00a0\u00a076a9145be32612930b8323add2212a4ec03c1562084f8488ac`\n\nTransaction\n28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f\n\nInputs:\n\n`0:\u00a035288d269cee1941eaebb2ea85e32b42cdb2b04284a56d8b14dcc3f5c65d6055[0]`\\\n`\u00a01:\u00a035288d269cee1941eaebb2ea85e32b42cdb2b04284a56d8b14dcc3f5c65d6055[1]`\n\nOutputs:\n\n`0:\u00a0\u00a0\u00a0\u00a0100000000\u00a0\u00a0\u00a0\u00a041046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac`\\\n`\u00a01:\u00a0\u00a0\u00a0\u00a02400000000\u00a0\u00a0\u00a0\u00a041044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac`"
    },
    {
      "header": "Discussion",
      "content": "-   [\\[Bitcoin-development\\] Lexicographical Indexing of Transaction\nInputs and\nOutputs](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008484.html \"wikilink\")\n-   [\\[Bitcoin-development\\] \\[RFC\\] Canonical input and output ordering\nin\ntransactions](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008487.html \"wikilink\")"
    },
    {
      "header": "References",
      "content": "-   [1: Bitstamp Info\nLeak](https://bitcoinmagazine.com/20273/bitstamp-exchange-activity-trackable-due-multisig-wallet-implementation/ \"wikilink\")\n-   [2: OBPP Random Indexing as\nCountermeasure](https://github.com/OpenBitcoinPrivacyProject/wallet-ratings/blob/5a7e2e1555e91bb48edeca3aa710272777d98c2a/2015-1/criteria.md \"wikilink\")\n-   [3: Mastering\nBitcoin](https://github.com/aantonop/bitcoinbook/blob/develop/ch05.asciidoc \"wikilink\")\n-   [4: Bitcoin Wiki on\nScript](https://en.bitcoin.it/wiki/Script \"wikilink\")\n-   [5:\nstd::lexicographical_compare](http://www.cplusplus.com/reference/algorithm/lexicographical_compare \"wikilink\")\n-   [6:\nmemcmp](http://www.cplusplus.com/reference/cstring/memcmp \"wikilink\")\n-   [7:\nBuffer.compare](https://nodejs.org/api/buffer.html#buffer_class_method_buffer_compare_buf1_buf2 \"wikilink\")\n-   [8: Lexicographical\norder](https://en.wikipedia.org/wiki/Lexicographical_order \"wikilink\")"
    },
    {
      "header": "Implementations",
      "content": "-   [Electrum](https://github.com/spesmilo/electrum/blob/2af670ea2b92e835919b745d94afcb8b4ec32fda/lib/transaction.py#L648 \"wikilink\")\n-   [BitcoinJS](https://github.com/bitcoinjs/bip69/blob/master/index.js \"wikilink\")\n-   [BitcoinJS Test\nFixtures](https://github.com/bitcoinjs/bip69/blob/master/test/fixtures.json \"wikilink\")\n-   [NodeJS](https://www.npmjs.com/package/bip69 \"wikilink\")\n-   [Blockchain.info public\nbeta](https://github.com/blockchain/My-Wallet-V3/blob/v3.8.0/src/transaction.js#L120-L142 \"wikilink\")\n-   [Btcsuite](https://github.com/btcsuite/btcutil/blob/master/txsort/txsort.go \"wikilink\")"
    },
    {
      "header": "Acknowledgements",
      "content": "Danno Ferrin \\<danno@numisight.com\\>, Sergio Demian Lerner\n\\<sergiolerner@certimix.com\\>, Justus Ranvier\n\\<justus@openbitcoinprivacyproject.org\\>, and Peter Todd\n\\<pete@petertodd.org\\> contributed to the design and motivations for\nthis BIP. A similar proposal was submitted to the Bitcoin-dev mailing\nlist independently by Rusty Russell \\<rusty@rustcorp.com.au\\>"
    }
  ]
}