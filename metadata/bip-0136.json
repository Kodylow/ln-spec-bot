{
  "BIP": "136",
  "Layer": "Applications",
  "Title": "Bech32 Encoded Tx Position References",
  "Author": "\u0412\u0435\u043b\u0435\u0441\u043b\u0430\u0432 <veleslav.bips@protonmail.com>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0136",
  "Status": "Draft",
  "Type": "Informational",
  "Created": "2017-07-09",
  "License": "BSD-2-Clause",
  "sections": [
    {
      "header": "Introduction",
      "content": "### Abstract\n\nThis document proposes a convenient, human usable encoding to refer to a\n**confirmed transaction position** within the Bitcoin blockchain\\--known\nas **\\\"TxRef\\\"**. The primary purpose of this encoding is to allow users\nto refer to a confirmed transaction (and optionally, a particular\noutpoint index within the transaction) in a standard, reliable, and\nconcise way.\n\n*Please note: Unlike a transaction ID, **\\\"TxID\\\"**, where there is a\nstrong cryptographic link between the ID and the actual transaction, a\n**TxRef** only provides a weak link to a particular transaction. A\n**TxRef** locates an offset within a blockchain for a transaction, that\nmay - or may not - point to an actual transaction, which in fact may\nchange with reorganisations. We recommend that **TxRef**s should be not\nused for positions within the blockchain having a maturity less than 100\nblocks.*\n\nThe key words \\\"MUST\\\", \\\"MUST NOT\\\", \\\"REQUIRED\\\", \\\"SHALL\\\", \\\"SHALL\nNOT\\\", \\\"SHOULD\\\", \\\"SHOULD NOT\\\", \\\"RECOMMENDED\\\", \\\"MAY\\\", and\n\\\"OPTIONAL\\\" in this document are to be interpreted as described in [RFC\n2119](https://tools.ietf.org/html/rfc2119)."
    },
    {
      "header": "Copyright",
      "content": "This BIP is licensed under the 2-clause BSD license."
    },
    {
      "header": "Motivation",
      "content": "Since the first version of Bitcoin, **TxID**s have been a core part of\nthe consensus protocol and are routinely used to identify individual\ntransactions between users.\n\nHowever, for many use-cases they have practical limitations:\n\n-   **TxID**s are expensive for full nodes to lookup (requiring either a\nlinear scan of the blockchain, or an expensive **TxID** index).\n-   **TxID**s require third-party services for SPV wallets to lookup.\n-   **TxID**s are 64 character HEX encoded values.\n\nIt is possible to reference transactions not only by their **TxID**, but\nby their location within the blockchain itself. Rather than use the 64\ncharacter **TxID**, an encoding of the position coordinates can be made\nfriendly for occasional human transcription. In this document, we\npropose a standard for doing this."
    },
    {
      "header": "Examples",
      "content": "Block \\#   Transaction \\#   Outpoint \\#   TxRef                        TxID\n---------- ---------------- ------------- ---------------------------- ------------------------------------------------------------------\n0          0                0             tx1:rqqq\u2011qqqq\u2011qwtv\u2011vjr       4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\n170        1                0             tx1:r52q\u2011qqpq\u2011qpty\u2011cfg       f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16\n456789     1234             1             tx1:y29u\u2011mqjx\u2011ppqq\u2011sfp2\u2011tt   6fb8960f70667dc9666329728a19917937896fc476dfc54a3e802e887ecb4e82"
    },
    {
      "header": "Specification",
      "content": "A **confirmed transaction position reference**, or **TxRef**, is a\nreference to a particular location within the blockchain, specified by\nthe block height and a transaction index within the block, and\noptionally, an outpoint index within the transaction.\n\n*Please Note: All values in this specification are encoded in\nlittle-endian format.*"
    },
    {
      "header": "TxRef Considerations {#txref_considerations}",
      "content": "It is possible for a **TxRef** to reference a transaction that doesn\\'t\nreally exist because:\n\n-   The specified block hasn\\'t yet been mined.\n-   The transaction index is greater than the total number of\ntransactions included within the specified block.\n-   The optional outpoint index is greater than the total outpoints\ncontained within the transaction.\n\nTherefore, implementers must be careful not to display **TxRef**s to\nusers prematurely:\n\n-   Applications MUST NOT display **TxRef**s for transactions with less\nthan 6 confirmations.\n-   Application MUST show a warning for **TxRef**s for transactions with\nless than 100 confirmations.\n-   This warning SHOULD state that in the case of a large\nreorganisation, the **TxRef**s displayed may point to a\ndifferent transaction, or to no transaction at all."
    },
    {
      "header": "TxRef Format {#txref_format}",
      "content": "**TxRef** MUST use the **Bech32m**[^1] encoding as defined in\n[BIP-0173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)\nand later refined in\n[BIP-0350](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki).\nThe Bech32m encoding consists of:"
    },
    {
      "header": "Human-Readable Part {#human_readable_part}",
      "content": "The **HRP** can be thought of as a label. We have chosen labels to\ndistinguish between Main, Test, and Regtest networks:\n\n-   Mainnet: **\\\"tx\\\"**.\n-   Testnet: **\\\"txtest\\\"**.\n-   Regtest: **\\\"txrt\\\"**."
    },
    {
      "header": "Separator",
      "content": "The separator is the character **\\\"1\\\"**."
    },
    {
      "header": "Data Part {#data_part}",
      "content": "The data part for a **TxRef** consists of the transaction\\'s block\nheight, transaction index within the block, and optionally, an outpoint\nindex. Specific encoding details for the data are given below.\n\n*Please note: other specifications, such as [the Decentralized\nIdentifiers spec](https://w3c-ccg.github.io/did-spec/), have implicitly\nencoded the information contained within the HRP elsewhere. In this case\nthey may choose to not include the HRP as specified here.*"
    },
    {
      "header": "Readability",
      "content": "To increase portability and readability, additional separator characters\nSHOULD be added to the **TxRef**:\n\n-   A Colon[^2] **\\\":\\\"** added after the separator character \\'1\\'.\n-   Hyphens[^3] **\\\"-\\\"** added after every 4 characters beyond the\ncolon."
    },
    {
      "header": "Encoding",
      "content": "Encoding a **TxRef** requires 4 or 5 pieces of data: a magic code\ndenoting which network is being used; a version number (currently always\n0); the block height of the block containing the transaction; the index\nof the transaction within the block; and optionally, the index of the\noutpoint within the transaction. Only a certain number of bits are\nsupported for each of these values, see the following table for details.\n\n+-------------+-------------+-------------+-------------+-------------+\n|             | Description | Possible    | **\\# of     | Values      |\n|             |             | Data Type   | Bits used** |             |\n+=============+=============+=============+=============+=============+\n| Magic Code  | Chain       | uint8       | 5           | **3**:      |\n|             | Namespacing |             |             | Mainnet\\    |\n|             | Code        |             |             | **4**:      |\n|             |             |             |             | Mainnet     |\n|             |             |             |             | with        |\n|             |             |             |             | Outpoint\\   |\n|             |             |             |             | **6**:      |\n|             |             |             |             | Testnet\\    |\n|             |             |             |             | **7**:      |\n|             |             |             |             | Testnet     |\n|             |             |             |             | with        |\n|             |             |             |             | Outpoint\\   |\n|             |             |             |             | **0**:      |\n|             |             |             |             | Regtest\\    |\n|             |             |             |             | **1**:      |\n|             |             |             |             | Regtest     |\n|             |             |             |             | with        |\n|             |             |             |             | Outpoint    |\n+-------------+-------------+-------------+-------------+-------------+\n| Version     | For Future  | uint8       | 1           | Must be     |\n|             | Use         |             |             | **0**       |\n+-------------+-------------+-------------+-------------+-------------+\n| Block\\      | The Block   | uint32      | 24          | Block 0 to  |\n| Height      | Height of   |             |             | Block       |\n|             | the Tx      |             |             | 16777215    |\n+-------------+-------------+-------------+-------------+-------------+\n| T           | The index   | uint16,     | 15          | Tx 0 to Tx  |\n| ransaction\\ | of the Tx   | uint32      |             | 32767       |\n| Index       | inside the  |             |             |             |\n|             | block       |             |             |             |\n+-------------+-------------+-------------+-------------+-------------+\n| Outpoint\\   | The index   | uint16,     | 15          | Outpoint 0  |\n| Index       | of the      | uint32      |             | to Outpoint |\n|             | Outpoint    |             |             | 32767       |\n|             | inside the  |             |             |             |\n|             | Tx          |             |             |             |\n+-------------+-------------+-------------+-------------+-------------+"
    },
    {
      "header": "Magic Notes {#magic_notes}",
      "content": "The magic code provides namespacing between chains:\n\n-   For Mainnet the magic code is: **0x3**, leading to an **\\\"r\\\"**\ncharacter when encoded.\n-   For Mainnet with Outpoint Encoded the magic code is: **0x4**,\nleading to a **\\\"y\\\"** character when encoded.\n-   For Testnet the magic code is: **0x6**, leading to an **\\\"x\\\"**\ncharacter when encoded.\n-   For Testnet with Outpoint Encoded the magic code is: **0x7**,\nleading to an **\\\"8\\\"** character when encoded.\n-   For Regtest the magic code is: **0x0**, leading to a **\\\"q\\\"**\ncharacter when encoded.\n-   For Regtest with Outpoint Encoded the magic code is: **0x1**,\nleading to a **\\\"p\\\"** character when encoded."
    },
    {
      "header": "Encoding Example {#encoding_example}",
      "content": "We want to encode a **TxRef** that refers to Transaction #1234 of Block"
    },
    {
      "header": "456789 on the Mainnet chain. We use this data in preparation for the",
      "content": "Bech32 encoding algorithm:\n\n+--------------+----------+-----------+--------------+--------------+\n|              | Decimal\\ | Binary\\   | **\\# of      | Bit Indexes  |\n|              | Value    | Value     | Bits\\        | and Values   |\n|              |          |           | used**       |              |\n+==============+==========+===========+==============+==============+\n| Magic\\       | 3        | 00000011  | 5            | (mc04, mc03, |\n| Code         |          |           |              | mc02, mc01,  |\n|              |          |           |              | mc00) = (0,  |\n|              |          |           |              | 0, 0, 1, 1)  |\n+--------------+----------+-----------+--------------+--------------+\n| Version      | 0        | 00000000  | 1            | (v0) = (0)   |\n+--------------+----------+-----------+--------------+--------------+\n| Block\\       | 456789   | 00000110\\ | 24           | (bh23, bh22, |\n| Height       |          | 11111000\\ |              | bh21, bh20,  |\n|              |          | 01010101  |              | bh19, bh18,  |\n|              |          |           |              | bh17, bh16)  |\n|              |          |           |              | = (0, 0, 0,  |\n|              |          |           |              | 0, 0, 1, 1,  |\n|              |          |           |              | 0)\\          |\n|              |          |           |              | (bh15, bh14, |\n|              |          |           |              | bh13, bh12,  |\n|              |          |           |              | bh11, bh10,  |\n|              |          |           |              | bh09, bh08)  |\n|              |          |           |              | = (1, 1, 1,  |\n|              |          |           |              | 1, 1, 0, 0,  |\n|              |          |           |              | 0)\\          |\n|              |          |           |              | (bh07, bh06, |\n|              |          |           |              | bh05, bh04,  |\n|              |          |           |              | bh03, bh02,  |\n|              |          |           |              | bh01, bh00)  |\n|              |          |           |              | = (0, 1, 0,  |\n|              |          |           |              | 1, 0, 1, 0,  |\n|              |          |           |              | 1)           |\n+--------------+----------+-----------+--------------+--------------+\n| Transaction\\ | 1234     | 00000100\\ | 15           | (ti14, ti13, |\n| Index        |          | 11010010  |              | ti12, ti11,  |\n|              |          |           |              | ti10, ti09,  |\n|              |          |           |              | ti08) = (0,  |\n|              |          |           |              | 0, 0, 0, 1,  |\n|              |          |           |              | 0, 0)\\       |\n|              |          |           |              | (ti07, ti06, |\n|              |          |           |              | ti05, ti04,  |\n|              |          |           |              | ti03, ti02,  |\n|              |          |           |              | ti01, ti00)  |\n|              |          |           |              | = (1, 1, 0,  |\n|              |          |           |              | 1, 0, 0, 1,  |\n|              |          |           |              | 0)           |\n+--------------+----------+-----------+--------------+--------------+\n\nAs shown in the last column, we take the necessary bits of each binary\nvalue and copy them into nine unsigned chars illustrated in the next\ntable. We only set the lower five bits of each unsigned char as the\nbech32 algorithm only uses those bits.\n\n<table>\n<thead>\n<tr class=\"header\">\n<th></th>\n<th></th>\n<th style=\"width:2em\"><p>7</p></th>\n<th style=\"width:2em\"><p>6</p></th>\n<th style=\"width:2em\"><p>5</p></th>\n<th style=\"width:2em\"><p>4</p></th>\n<th style=\"width:2em\"><p>3</p></th>\n<th style=\"width:2em\"><p>2</p></th>\n<th style=\"width:2em\"><p>1</p></th>\n<th style=\"width:2em\"><p>0</p></th>\n<th></th>\n<th><p>Decimal<br />\nValue</p></th>\n<th><p>Bech32<br />\nCharacter</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td rowspan=\"2\"><p>data[0]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #99DDFF; color: black; text-align : center;\"><p>mc04</p></td>\n<td\nstyle=\"background: #99DDFF; color: black; text-align : center;\"><p>mc03</p></td>\n<td\nstyle=\"background: #99DDFF; color: black; text-align : center;\"><p>mc02</p></td>\n<td\nstyle=\"background: #99DDFF; color: black; text-align : center;\"><p>mc01</p></td>\n<td\nstyle=\"background: #99DDFF; color: black; text-align : center;\"><p>mc00</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td><p>1</p></td>\n<td></td>\n<td><p>3</p></td>\n<td><p>r</p></td>\n</tr>\n<tr class=\"even\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td rowspan=\"2\"><p>data[1]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh03</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh02</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh01</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh00</p></td>\n<td\nstyle=\"background: #DDDDDD; color: black; text-align : center;\"><p>v0</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td><p>0</p></td>\n<td></td>\n<td><p>10</p></td>\n<td><p>2</p></td>\n</tr>\n<tr class=\"odd\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td rowspan=\"2\"><p>data[2]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh08</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh07</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh06</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh05</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh04</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td></td>\n<td><p>5</p></td>\n<td><p>9</p></td>\n</tr>\n<tr class=\"even\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td rowspan=\"2\"><p>data[3]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh13</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh12</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh11</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh10</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh09</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td><p>1</p></td>\n<td><p>1</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td></td>\n<td><p>28</p></td>\n<td><p>u</p></td>\n</tr>\n<tr class=\"odd\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td rowspan=\"2\"><p>data[4]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh18</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh17</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh16</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh15</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh14</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td><p>1</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td><p>1</p></td>\n<td></td>\n<td><p>27</p></td>\n<td><p>m</p></td>\n</tr>\n<tr class=\"even\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td rowspan=\"2\"><p>data[5]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh23</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh22</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh21</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh20</p></td>\n<td\nstyle=\"background: #EEDD88; color: black; text-align : center;\"><p>bh19</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td></td>\n<td><p>0</p></td>\n<td><p>q</p></td>\n</tr>\n<tr class=\"odd\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td rowspan=\"2\"><p>data[6]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti04</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti03</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti02</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti01</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti00</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td><p>0</p></td>\n<td></td>\n<td><p>18</p></td>\n<td><p>j</p></td>\n</tr>\n<tr class=\"even\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td rowspan=\"2\"><p>data[7]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti09</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti08</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti07</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti06</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti05</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td><p>1</p></td>\n<td><p>0</p></td>\n<td></td>\n<td><p>6</p></td>\n<td><p>x</p></td>\n</tr>\n<tr class=\"odd\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td rowspan=\"2\"><p>data[8]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti14</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti13</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti12</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti11</p></td>\n<td\nstyle=\"background: #FFAABB; color: black; text-align : center;\"><p>ti10</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td></td>\n<td><p>1</p></td>\n<td><p>p</p></td>\n</tr>\n</tbody>\n</table>\n\nThe Bech32 algorithm encodes the nine unsigned chars above and computes\na checksum of those chars and encodes that as well\\--this gives a six\ncharacter checksum (in this case, **utt3p0**) which is appended to the\nfinal **TxRef**. The final **TxRef** given is:\n**tx1:r29u-mqjx-putt-3p0** and is illustrated in the following table:\n\nTxRef character indexes and descriptions\n\nIndex   0   1   2   3   4   5   6   7   8    9   10   11   12   13   14   15   16   17   18   19   20   21\n------- --- --- --- --- --- --- --- --- ---- --- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----\nChar:   t   x   1   :   r   2   9   u   \\-   m   q    j    x    \\-   p    u    t    t    \\-   3    p    0"
    },
    {
      "header": "Outpoint Index {#outpoint_index}",
      "content": "Some uses of **TxRef** may want to refer to a specific outpoint of the\ntransaction. In the previous example, since we did not specify the\noutpoint index, the **TxRef** **tx1:r29u-mqjx-putt-3p0** implicitly\nreferences the first (index 0) outpoint of the 1234th transaction in the\n456789th block in the blockchain.\n\nIf instead, for example, we want to reference the second (index 1)\noutpoint, we need to change the magic code from **3** to **4** and would\ninclude the following in the data to be encoded:\n\n+-------------+----------+-------------+-------------+-------------+\n|             | Decimal\\ | Binary\\     | **\\# of     | Bit Indexes |\n|             | Value    | Value       | Bits\\       | and Values  |\n|             |          |             | used**      |             |\n+=============+==========+=============+=============+=============+\n| Magic\\      | 4        | 00000100    | 5           | (mc04,      |\n| Code        |          |             |             | mc03, mc02, |\n|             |          |             |             | mc01, mc00) |\n|             |          |             |             | = (0, 0, 1, |\n|             |          |             |             | 0, 0)       |\n+-------------+----------+-------------+-------------+-------------+\n| Outpoint    | 1        | 00000000    | 15          | (op14,      |\n| Index       |          | 00000001    |             | op13, op12, |\n|             |          |             |             | op11, op10, |\n|             |          |             |             | op09, op08) |\n|             |          |             |             | = (0, 0, 0, |\n|             |          |             |             | 0, 0, 0,    |\n|             |          |             |             | 0)\\         |\n|             |          |             |             | (op07,      |\n|             |          |             |             | op06, op05, |\n|             |          |             |             | op04, op03, |\n|             |          |             |             | op02, op01, |\n|             |          |             |             | op00) = (0, |\n|             |          |             |             | 0, 0, 0, 0, |\n|             |          |             |             | 0, 0, 1)    |\n+-------------+----------+-------------+-------------+-------------+\n\n<table>\n<thead>\n<tr class=\"header\">\n<th></th>\n<th></th>\n<th style=\"width:2em\"><p>7</p></th>\n<th style=\"width:2em\"><p>6</p></th>\n<th style=\"width:2em\"><p>5</p></th>\n<th style=\"width:2em\"><p>4</p></th>\n<th style=\"width:2em\"><p>3</p></th>\n<th style=\"width:2em\"><p>2</p></th>\n<th style=\"width:2em\"><p>1</p></th>\n<th style=\"width:2em\"><p>0</p></th>\n<th></th>\n<th><p>Decimal<br />\nValue</p></th>\n<th><p>Bech32<br />\nCharacter</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td rowspan=\"2\"><p>data[0]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #99DDFF; color: black; text-align : center;\"><p>mc04</p></td>\n<td\nstyle=\"background: #99DDFF; color: black; text-align : center;\"><p>mc03</p></td>\n<td\nstyle=\"background: #99DDFF; color: black; text-align : center;\"><p>mc02</p></td>\n<td\nstyle=\"background: #99DDFF; color: black; text-align : center;\"><p>mc01</p></td>\n<td\nstyle=\"background: #99DDFF; color: black; text-align : center;\"><p>mc00</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td></td>\n<td><p>4</p></td>\n<td><p>y</p></td>\n</tr>\n<tr class=\"even\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td rowspan=\"2\"><p>data[9]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op04</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op03</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op02</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op01</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op00</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>1</p></td>\n<td></td>\n<td><p>1</p></td>\n<td><p>p</p></td>\n</tr>\n<tr class=\"odd\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td rowspan=\"2\"><p>data[10]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op09</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op08</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op07</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op06</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op05</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td></td>\n<td><p>0</p></td>\n<td><p>q</p></td>\n</tr>\n<tr class=\"even\">\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td rowspan=\"2\"><p>data[11]</p></td>\n<td><p>Index</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td><p>na</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op14</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op13</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op12</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op11</p></td>\n<td\nstyle=\"background: #BBCC33; color: black; text-align : center;\"><p>op10</p></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><p>Value</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td><p>0</p></td>\n<td></td>\n<td><p>0</p></td>\n<td><p>q</p></td>\n</tr>\n</tbody>\n</table>\n\nAfter Bech32 encoding all twelve unsigned chars above, we get the\nchecksum: **sfp2tt**. The final **TxRef** given is:\n**tx1:y29u-mqjx-ppqq-sfp2-tt** and is illustrated in the following\ntable:\n\nTxRef character indexes and descriptions\n\nIndex   0   1   2   3   4   5   6   7   8    9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25\n------- --- --- --- --- --- --- --- --- ---- --- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----\nChar:   t   x   1   :   y   2   9   u   \\-   m   q    j    x    \\-   p    p    q    q    \\-   s    f    p    2    \\-   t    t"
    },
    {
      "header": "Decoding",
      "content": "The Bech32 spec defines 32 valid characters as its \\\"alphabet\\\". All\nnon-Bech32-alphabet characters present in a **TxRef** after the Bech32\nseparator character MUST be ignored/removed when parsing (except for\nterminating characters). We do not wish to expect the users to keep\ntheir **TxRef**s in good form and **TxRef**s may contains hyphens,\ncolons, invisible spaces, uppercase or random characters. We expect\nusers to copy, paste, write by-hand, write in a mix of character sets,\netc. Parsers SHOULD attempt to correct for these and other common\nerrors, reporting to the user any **TxRef**s that violate a proper\nBech32 encoding.\n\nAs of early 2021, **TxRef** has been in limited use for a couple of\nyears and it is possible that there are some **TxRef**s in use which\nwere created with the original specification of Bech32 before the\nBech32m refinement was codified. Due to this possibility, a **TxRef**\nparser SHOULD be able to decode both Bech32m and Bech32 encoded\n**TxRef**s. In such a case, a **TxRef** parser SHOULD display or somehow\nnotify the user that they are using an obsolete **TxRef** and that they\nshould upgrade it to the Bech32m version. Additionally, the parser MAY\nalso display the Bech32m version."
    },
    {
      "header": "Rationale",
      "content": "```{=html}\n<references />\n```"
    },
    {
      "header": "Reference implementations {#reference_implementations}",
      "content": "C Reference Implementation (supports magic codes 0x3 and 0x6):\n<https://github.com/jonasschnelli/bitcoin_txref_code>\n\nGo Reference Implementation (supports magic codes 0x3 and 0x6):\n<https://github.com/kulpreet/txref>\n\nC++ Reference Implementation (supports magic codes 0x3, 0x4, 0x6, 0x7,\n0x0 and 0x1): <https://github.com/dcdpr/libtxref/>\n\nJava Reference Implementation (supports magic codes 0x3, 0x4, 0x6, 0x7,\n0x0 and 0x1): <https://github.com/dcdpr/libtxref-java/>"
    },
    {
      "header": "Appendices",
      "content": "### Test Examples {#test_examples}\n\nThe following examples show values for various combinations on mainnet\nand testnet; encoding block height, transaction index, and an optional\noutput index."
    },
    {
      "header": "TxRef",
      "content": "The following list gives properly encoded mainnet **TxRef**s and the\ndecoded hex values (block height, transaction index)\n\n-   `tx1:rqqq-qqqq-qwtv-vjr`: `(0x0, 0x0)`\n-   `tx1:rqqq-qqll-lj68-7n2`: `(0x0, 0x7FFF)`\n-   `tx1:r7ll-llqq-qats-vx9`: `(0xFFFFFF, 0x0)`\n-   `tx1:r7ll-llll-lp6m-78v`: `(0xFFFFFF, 0x7FFF)`\n\nThe following list gives properly encoded testnet **TxRef**s and the\ndecoded hex values (block height, transaction index)\n\n-   `txtest1:xqqq-qqqq-qrrd-ksa`: `(0x0, 0x0)`\n-   `txtest1:xqqq-qqll-lljx-y35`: `(0x0, 0x7FFF)`\n-   `txtest1:x7ll-llqq-qsr3-kym`: `(0xFFFFFF, 0x0)`\n-   `txtest1:x7ll-llll-lvj6-y9j`: `(0xFFFFFF, 0x7FFF)`\n\nThe following list gives valid (sometimes strangely formatted)\n**TxRef**s and the decoded values (block height, transaction index)\\*\n\n-   `tx1:r29u-mqjx-putt-3p0`: `(456789, 1234)`\n-   `TX1R29UMQJXPUTT3P0`: `(456789, 1234)`\n-   `tx1 r29u mqjx putt 3p0`: `(456789, 1234)`\n-   `tx1!r29u/mqj*x-putt^^3p0`: `(456789, 1234)`\n\nThe following list gives invalid **TxRef**s and the reason for their\ninvalidity.\n\n-   `tx1:t7ll-llll-lcq3-aj4`: Magic 0xB instead of 0x3.\n-   `tx1:rlll-llll-lu9m-00x`: Version 1 instead of 0.\n-   `tx1:r7ll-llll-lqfu-gss2`: Valid Bech32, but ten 5 bit unsigned\nchars instead of nine.\n-   `tx1:r7ll-llll-rt5h-wz`: Valid Bech32, but eight 5 bit unsigned\nchars instead of nine.\n-   `tx1:r7ll-LLLL-lp6m-78v`: Invalid Bech32 due to mixed case. Would\ndecode correctly otherwise."
    },
    {
      "header": "TxRef with Outpoints {#txref_with_outpoints}",
      "content": "The following list gives properly encoded mainnet **TxRef**s with\nOutpoints and the decoded values (block height, transaction index,\noutpoint index)\n\n-   `tx1:yqqq-qqqq-qqqq-rvum-0c`: `(0x0, 0x0, 0x0)`\n-   `tx1:yqqq-qqll-lqqq-en8x-05`: `(0x0, 0x7FFF, 0x0)`\n-   `tx1:y7ll-llqq-qqqq-ggjg-w6`: `(0xFFFFFF, 0x0, 0x0)`\n-   `tx1:y7ll-llll-lqqq-jhf4-wk`: `(0xFFFFFF, 0x7FFF, 0x0)`\n\n```{=html}\n<!-- -->\n```\n-   `tx1:yqqq-qqqq-qpqq-pw4v-kq`: `(0x0, 0x0, 0x1)`\n-   `tx1:yqqq-qqll-lpqq-m3w3-kv`: `(0x0, 0x7FFF, 0x1)`\n-   `tx1:y7ll-llqq-qpqq-22ml-hz`: `(0xFFFFFF, 0x0, 0x1)`\n-   `tx1:y7ll-llll-lpqq-s4qz-hw`: `(0xFFFFFF, 0x7FFF, 0x1)`\n\n```{=html}\n<!-- -->\n```\n-   `tx1:y29u-mqjx-ppqq-sfp2-tt`: `(456789, 1234, 1)`\n\nThe following list gives properly encoded testnet **TxRef**s with\nOutpoints and the decoded values (block height, transaction index,\noutpoint index)\n\n-   `txtest1:8qqq-qqqq-qqqq-d5ns-vl`: `(0x0, 0x0, 0x0)`\n-   `txtest1:8qqq-qqll-lqqq-htgd-vn`: `(0x0, 0x7FFF, 0x0)`\n-   `txtest1:87ll-llqq-qqqq-xsar-da`: `(0xFFFFFF, 0x0, 0x0)`\n-   `txtest1:87ll-llll-lqqq-u0x7-d3`: `(0xFFFFFF, 0x7FFF, 0x0)`\n\n```{=html}\n<!-- -->\n```\n-   `txtest1:8qqq-qqqq-qpqq-0k68-48`: `(0x0, 0x0, 0x1)`\n-   `txtest1:8qqq-qqll-lpqq-4fp6-4t`: `(0x0, 0x7FFF, 0x1)`\n-   `txtest1:87ll-llqq-qpqq-yj55-59`: `(0xFFFFFF, 0x0, 0x1)`\n-   `txtest1:87ll-llll-lpqq-7d0f-5f`: `(0xFFFFFF, 0x7FFF, 0x1)`\n\n```{=html}\n<!-- -->\n```\n-   `txtest1:829u-mqjx-ppqq-73wp-gv`: `(456789, 1234, 1)`"
    },
    {
      "header": "TxRef Payload Value Choices: {#txref_payload_value_choices}",
      "content": "Some calculations showing why we chose these particular bit-length of\nthe block height and transaction index."
    },
    {
      "header": "Block Height Value: {#block_height_value}",
      "content": "24 bits: value can be between 0, and 0xFFFFFF (16777216 blocks).\n\n-   In early April, 2021, there have been 677700 blocks\n-   There are roughly (365 days \\* 24 hours \\* 6 blocks / hour) = 52560\nblocks every year, implying about (16777216 - 677700) / 52560 = 306\nmore years of addressable blocks.\n-   Some time before year 2327 this specification should be extended."
    },
    {
      "header": "Tx Position Value: {#tx_position_value}",
      "content": "15 bits: value can be between 0x0, and 0x7FFF (32768 transactions).\n\n-   The *realistic* smallest Tx is 83 Bytes for maximum 12047 tx in a\nblock.\n-   4B version + 1B tx_in count + 36B previous_output + 1B script\nlength + 0B signature script + 4B sequence + 1B tx_out count +\n8B amount + 1B script length + 23B pubkey script + 4B lock_time\n= 83B\n-   The *extreme* smallest Tx is 60 Bytes for maximum 16665 tx in a\nblock.\n-   4B version + 1B tx_in count + 36B previous_output + 1B script\nlength + 0B signature script + 4B sequence + 1B tx_out count +\n8B amount + 1B script length + 0B pubkey script + 4B lock_time =\n60B"
    },
    {
      "header": "Acknowledgements",
      "content": "Special Thanks to Pieter Wuille and Greg Maxwell for Bech32, a wonderful\nuser-facing data encoding.\n\n[^1]: **Why use Bech32 Encoding for Confirmed Transaction References?**\nThe error detection and correction properties of this encoding\nformat make it very attractive. We expect that it will be reasonable\nfor software to correct a maximum of two characters; however, we\nhaven't specified this yet.\n\n[^2]: **Why add a colon here?** This allows it to conform better with\nW3C URN/URL standards.\n\n[^3]: **Why hyphens within the TxRef?** As **TxRef**s are short, we\nexpect that they will be quoted via voice or written by hand. The\ninclusion of hyphens every 4 characters breaks up the string and\nmeans people don\\'t lose their place so easily."
    }
  ]
}