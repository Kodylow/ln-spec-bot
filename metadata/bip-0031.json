{
  "BIP": "31",
  "Layer": "Peer Services",
  "Title": "Pong message",
  "Author": "Mike Hearn <hearn@google.com>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0031",
  "Status": "Final",
  "Type": "Standards Track",
  "Created": "2012-04-11",
  "sections": [
    {
      "header": "Abstract",
      "content": "This document describes a trivial protocol extension that makes it\neasier for clients to detect dead peer connections."
    },
    {
      "header": "Motivation",
      "content": "Today there are a few network related problems that can degrade the\nBitcoin user experience:\n\n1\\) Some Bitcoin clients run on platforms that can go to sleep and\nessentially stop running at any time without warning. Notably, this is\nvery common on both mobiles and laptops (shut the lid). When the system\ncomes back, TCP connections that existed before the sleep still exist\nbut may no longer function correctly, eg, because the IP address has\nchanged, or because the remote peer went away or the connection was\ntimed out by some other system. Currently it can often take a while to\nnotice this has happened.\n\n2\\) The reference Satoshi client is largely single threaded and when\nplaced under heavy load (e.g., because it is downloading the block\nchain) becomes very slow to respond to network messages. There\\'s no\neasy way to detect this has occurred, especially if you are just\npassively waiting for broadcasts from that peer. A way to detect\noverloaded remote peers and avoid them would both help balance load and\nprovide a better, more responsive system.\n\n3\\) When downloading large data structures like the block chain it is\nefficient to choose a peer that is near to you network-wise, in order to\nreduce load on often congested trans-national links and ensure lower\nlatency. Currently it is difficult to measure the latency to a remote\npeer so clients don\\'t bother, and instead just select a random peer to\ndownload from.\n\nAll of these can be solved by a backwards compatible protocol\nmodification."
    },
    {
      "header": "Specification",
      "content": "When the protocol version as negotiated in the \\\"ver\\\" message is\ngreater than 60000, the \\\"ping\\\" message must contain a uint64 field\ncalled \\\"nonce\\\". A peer sending \\\"ping\\\" should set the nonce to a\nrandom value, and it is then echoed back by the recipient in a new\n\\\"pong\\\" message that also contains a single uint64 field.\n\nIn this way, the client can send a ping and measure the time taken to\nreceive the corresponding pong. If a client sends two pings before\nhearing back the first pong, the responses can be distinguished using\nthe nonce. If the client chooses to never overlap pings in this way it\nshould simply set the nonce value to zero."
    },
    {
      "header": "Backward compatibility {#backward_compatibility}",
      "content": "Clients must opt-in to the new feature by advertising a protocol version\n\\> 60000. Clients with older protocol versions are not expected to\nprovide a nonce in the ping message and will not be sent a pong."
    },
    {
      "header": "Implementation",
      "content": "<https://github.com/bitcoin/bitcoin/pull/932/files>"
    }
  ]
}