{
  "BIP": "326",
  "Layer": "Applications",
  "Title": "Anti-fee-sniping in taproot transactions",
  "Author": "Chris Belcher <belcher@riseup.net>",
  "Status": "Draft",
  "Type": "Informational",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0326",
  "Created": "2021-06-10",
  "License": "CC0-1.0",
  "Post-History": "2021-6-10: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019048.html",
  "sections": [
    {
      "header": "Abstract",
      "content": "This document proposes a certain type of wallet behaviour which uses\nBIP341 taproot\\[1\\]. It provides a greater anonymity set for off-chain\nprotocols which will make use of point-time-locked contracts (PTLCs)\nsuch as CoinSwap, Lightning and Discrete Log Contracts."
    },
    {
      "header": "Motivation",
      "content": "With taproot recently added to bitcoin, and wallet software about to\nimplement taproot wallets, we are in a unique position to improve the\nprivacy of off-chain protocols if we act soon.\n\nTaproot allows for point-time-locked contracts (PTLCs) as a more private\nreplacement for hash-time-locked contracts (HTLCs). If an off-chain\ncontract (for example a Lightning channel) is closed using a PTLC\ninstead of an HTLC, then the blockchain will just see a regular taproot\nscript instead of a hash value and preimage. However, if a contract is\nclosed using the timelock path, then the blockchain will either see a\nOP_CHECKSEQUENCEVERIFY opcode or a nSequence value in the transaction,\nneither of which are very common today, and this would mark the closing\ntransaction as something special and unusual.\n\nThis BIP proposes to improve the privacy and fungibility of off-chain\nprotocols by having on-chain wallets like Bitcoin Core also set the\nnSequence field in their taproot transactions as in BIP68\\[5\\]. This\nwould be in place of their regular nLockTime anti-fee-sniping\nprotection. The end result is that, if an observer of the blockchain\nsees a taproot spend with an nSequence value, then that could be either:\na regular spend from a wallet, or an off-chain settlement transaction\nspent with a timelock. The two cases would be indistinguishable, and\nthis could greatly improve the privacy and fungibility of bitcoin. The\ncommunity and wallet developers should act now to implement this so that\nthe anonymity set of nSequence transactions starts to be built up as\nsoon as taproot itself becomes adopted by wallets."
    },
    {
      "header": "Background",
      "content": "### Fee sniping {#fee_sniping}\n\nFee sniping is a hypothetical outcome of bad incentives to bitcoin\nmining in the low-inflation future. For a large miner the value of the\ntransactions in the best block and the mempool can be exceeded by the\ncost of deliberately attempting to mine two blocks to orphan the best\nblock. However with anti-fee-sniping protection using nLockTime or\nnSequence the bad miner will soon run out of transactions that can be\nput in the first block, which means they now need to go in the second.\nAnti-fee-sniping adds to the incentive to move the blockchain forward.\n\nThe nLockTime field is being used this way today. It is implemented in\nBitcoin Core\\[2\\] and Electrum\\[3\\], and adopted by approximately 20% of\nall recent transactions\\[4\\]."
    },
    {
      "header": "Absolute vs relative locktime {#absolute_vs_relative_locktime}",
      "content": "nLockTime is an absolute lock time, it allows the transaction to only be\nmined after a certain block height or unix time. The widespread adoption\nof it might have provided a good anonymity set for off-chain protocols.\nUnfortunately those protocols also commonly use relative lock times,\nbecause it allows contracts (for example Lightning payment channels or\nCoinSwaps) to remain open indefinitely as the countdown clock only\nstarts ticking when the closing transaction is confirmed.\n\nAbsolute locktimes are also still used, so we should keep using\nnLockTime, but also often use nSequence."
    },
    {
      "header": "Transaction pinning {#transaction_pinning}",
      "content": "Transaction pinning\\[8\\] is a method for making fee bumping\nprohibitively expensive by abusing node protections against attacks that\ncan waste bandwidth, CPU, and memory. This can make fee management more\ndifficult in multipart contract protocols (such as Lightning Network or\nCoinSwap). One possible way of solving the problem is to include a\n1-block relative timelock \\`1 OP_CSV\\` to all spend paths, making it\nimpossible to spend the unconfirmed UTXO. Such a 1-block locktime can\nalso be created with an nSequence value of 1. Many on-chain transactions\nin bitcoin spend inputs that were created just one or two blocks ago,\nfollowing this BIP such transactions with \\`nSequence=1\\` would also\nprovide cover traffic for off-chain transactions which disable\ntransaction pinning."
    },
    {
      "header": "Specifications",
      "content": "When wallets create transactions spending UTXOs protected by BIP341\ntaproot, they should set either an nLockTime value or nSequence values\nto discourage fee sniping, by allowing the transaction to only be mined\nin the next block after the tip, not the current block. This BIP\nsuggests 50% probability for using nLockTime and 50% for nSequence. If\nnSequence is set it should apply to at least one of the inputs of the\ntransaction, if it has multiple inputs. It is suggested that on-chain\nwallets pick an input randomly.\n\nWallets should also have a second random branch which sets the nLockTime\nor nSequence value even further back, so that transactions that are\ndelayed after signing for whatever reason (e.g. high-latency mix\nnetworks) have better privacy. Existing behaviour is that with a\nprobability of 10%, choose a random number between 0 and 99, and\nsubtract it from the current block height. See the Bitcoin Core and\nElectrum source codes linked in the references for an example.\n\nnSequence can only encode up to 65535 for the block distance\\[5\\] so if\nthe UTXOs being spent have more than 65535 confirmations, then the\nwallet should use nLockTime instead."
    },
    {
      "header": "Pseudocode",
      "content": "def apply_anti_fee_sniping_fields(transaction, rbf_set):"
    },
    {
      "header": "bip68 requires v=2",
      "content": "transaction.version = 2"
    },
    {
      "header": "Initialize all nsequence to indicate the requested RBF state",
      "content": "# nsequence can not be 2**32 - 1 in order for nlocktime to take effect\nfor input in transaction.inputs:\nif rbf_set:\ninput.nsequence = 2**32 - 3\nelse:\ninput.nsequence = 2**32 - 2"
    },
    {
      "header": "always set nlocktime if any of the transaction inputs have more",
      "content": "# confirmations than 65535 or are not taproot inputs, or have"
    },
    {
      "header": "unconfirmed inputs",
      "content": "# otherwise choose either nlocktime or nsequence with 50% probability\nif not rbf_set || any(map(lambda input: input.confirmations() > 65535\n|| !input.is_taproot() || input.confirmations() == 0,\ntransaction.inputs)) || randint(2) == 0:\ntransaction.nlocktime = blockchain.height()\nif randint(10) == 0:\ntransaction.nlocktime = max(0, transaction.nlocktime\n- randint(0, 99))"
    },
    {
      "header": "nsequence must be set in order for nlocktime to take effect",
      "content": "else:\ntransaction.nlocktime = 0\ninput_index = randint(len(transaction.inputs))\ntransaction.inputs[input_index].nsequence = transaction.inputs\\\n[input_index].confirmations()\nif randint(10) == 0:\ntransaction.inputs[input_index].nsequence = max(1,\ntransaction.inputs[input_index].nsequence - randint(0, 99))"
    },
    {
      "header": "Compatibility",
      "content": "This BIP doesn\\'t need any consensus changes. It can be adopted\nunilaterally and gradually by wallets. Although for greater privacy it\nwould be good for software to adopt it as soon as possible. Ideally\nduring the process of developers implementing their taproot wallets, so\nthat when taproot starts to be used it will already include the\nnSequence code.\n\nAll wallet software already keeps track of how many confirmations its\nUTXOs have, so the information required to set the nSequence field is\nalready available."
    },
    {
      "header": "Acknowledgements",
      "content": "Originally suggested by David Harding\\[6\\] and mentioned to me by\nZmnSCPxj.\n\nThanks to craigraw for suggesting a new value for input nsequence in the\nabsolute locktime case\\[7\\]."
    },
    {
      "header": "Copyright",
      "content": "This BIP is licensed under the Creative Commons CC0 1.0 Universal\nlicence."
    },
    {
      "header": "References",
      "content": "\\[1\\] <https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki>\n\n\\[2\\] <https://github.com/bitcoin/bitcoin/pull/2340>\n\n\\[3\\]\n<https://github.com/spesmilo/electrum/blob/7e6d65ec11c0dccfc24478471c5951d3ae586937/electrum/wallet.py#L211-L224>\n\n\\[4\\]\n<https://txstats.com/dashboard/db/blocks-statistics?panelId=4&fullscreen&orgId=1>\n\n\\[5\\] <https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki>\n\n\\[6\\]\n<https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002412.html>\n\n\\[7\\]\n<https://github.com/sparrowwallet/sparrow/issues/161#issuecomment-925003231>\n\n\\[8\\] <https://bitcoinops.org/en/topics/transaction-pinning/>"
    }
  ]
}