{
  "BIP": "14",
  "Layer": "Peer Services",
  "Title": "Protocol Version and User Agent",
  "Author": "Amir Taaki <genjix@riseup.net>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0014",
  "Status": "Final",
  "Type": "Standards Track",
  "Created": "2011-11-10",
  "Post-History": "2011-11-02",
  "sections": [
    {
      "header": "Past Situation {#past_situation}",
      "content": "Bitcoin as a protocol began life with the Satoshi client. Now that the\ncommunity is diversifying, a number of alternative clients with their\nown codebases written in a variety of languages (Java, Python,\nJavascript, C++) are rapidly developing their own feature-sets.\n\nEmbedded in the protocol is a version number. Primarily this version\nnumber is in the \\\"version\\\" and \\\"getblocks\\\" messages, but is also in\nthe \\\"block\\\" message to indicate the software version that created that\nblock. Currently this version number is the same version number as that\nof the client. This document is a proposal to separate the protocol\nversion from the client version, together with a proposed method to do\nso."
    },
    {
      "header": "Rationale",
      "content": "With non-separated version numbers, every release of the Satoshi client\nwill increase its internal version number. Primarily this holds every\nother client hostage to a game of catch-up with Satoshi version number\nschemes. This plays against the decentralised nature of bitcoin, by\nforcing every software release to remain in step with the release\nschedule of one group of bitcoin developers.\n\nVersion bumping can also introduce incompatibilities and fracture the\nnetwork. In order that the health of the network is maintained, the\ndevelopment of the protocol as a shared common collaborative process\nrequires being split off from the implementation of that protocol.\nNeutral third entities to guide the protocol with representatives from\nall groups, present the chance for bitcoin to grow in a positive manner\nwith minimal risks.\n\nBy using a protocol version, we set all implementations on the network\nto a common standard. Everybody is able to agree within their confines\nwhat is protocol and what is implementation-dependent. A user agent\nstring is offered as a \\'vanity-plate\\' for clients to distinguish\nthemselves in the network.\n\nSeparation of the network protocol from the implemention, and forming\ndevelopment of said protocol by means of a mutual consensus among\nparticipants, has the democratic disadvantage when agreement is hard to\nreach on contentious issues. To mitigate this issue, strong\ncommunication channels and fast release schedules are needed, and are\noutside the scope of this document (concerning a process-BIP type).\n\nUser agents provide extra tracking information that is useful for\nkeeping tabs on network data such as client implementations used or\ncommon architectures/operating-systems. In the rare case they may even\nprovide an emergency method of shunning faulty clients that threaten\nnetwork health- although this is strongly unrecommended and extremely\nbad form. The user agent does not provide a method for clients to work\naround and behave differently to different implementations, as this will\nlead to protocol fracturing.\n\nIn short:\n\n-   Protocol version: way to distinguish between nodes and behave\ndifferent accordingly.\n-   User agent: simple informational tool. Protocol should not be\nmodified depending on user agent."
    },
    {
      "header": "Browser User-Agents {#browser_user_agents}",
      "content": "[RFC 1945](http://tools.ietf.org/html/rfc1945) vaguely specifies a user\nagent to be a string of the product with optional comments.\n\n`\u00a0Mozilla/5.0\u00a0(X11;\u00a0U;\u00a0Linux\u00a0i686;\u00a0en-US;\u00a0rv:1.9.1.6)\u00a0Gecko/20100127\u00a0Gentoo\u00a0Shiretoko/3.5.6`\n\nUser agents are most often parsed by computers more than humans. The\nspace delimited format, does not provide an easy, fast or efficient way\nfor parsing. The data contains no structure indicating hierarchy in this\nplacement.\n\nThe most immediate pieces of information there are the browser product,\nrendering engine and the build (Gentoo Shiretoko) together with version\nnumber. Various other pieces of information as included as comments such\nas desktop environment, platform, language and revision number of the\nbuild."
    },
    {
      "header": "Proposal",
      "content": "The version field in \\\"version\\\" and \\\"getblocks\\\" packets will become\nthe protocol version number. The version number in the \\\"blocks\\\"\nreflects the protocol version from when that block was created.\n\nThe currently unused sub_version_num field in \\\"version\\\" packets will\nbecome the new user-agent string.\n\nBitcoin user agents are a modified browser user agent with more\nstructure to aid parsers and provide some coherence. In bitcoin, the\nsoftware usually works like a stack starting from the core code-base up\nto the end graphical interface. Therefore the user agent strings codify\nthis relationship.\n\nBasic format:\n\n`\u00a0/Name:Version/Name:Version/.../`\n\nExample:\n\n`\u00a0/Satoshi:5.64/bitcoin-qt:0.4/`\\\n`\u00a0/Satoshi:5.12/Spesmilo:0.8/`\n\nHere bitcoin-qt and Spesmilo may use protocol version 5.0, however the\ninternal codebase they use are different versions of the same software.\nThe version numbers are not defined to any strict format, although this\nguide recommends:\n\n-   Version numbers in the form of Major.Minor.Revision (2.6.41)\n-   Repository builds using a date in the format of YYYYMMDD (20110128)\n\nFor git repository builds, implementations are free to use the git\ncommitish. However the issue lies in that it is not immediately obvious\nwithout the repository which version precedes another. For this reason,\nwe lightly recommend dates in the format specified above, although this\nis by no means a requirement.\n\nOptional -r1, -r2, \\... can be appended to user agent version numbers.\nThis is another light recommendation, but not a requirement.\nImplementations are free to specify version numbers in whatever format\nneeded insofar as it does not include (, ), : or / to interfere with the\nuser agent syntax.\n\nAn optional comments field after the version number is also allowed.\nComments should be delimited by brackets (\\...). The contents of\ncomments is entirely implementation defined although this BIP recommends\nthe use of semi-colons ; as a delimiter between pieces of information.\n\nExample:\n\n`\u00a0/BitcoinJ:0.2(iPad;\u00a0U;\u00a0CPU\u00a0OS\u00a03_2_1)/AndroidBuild:0.8/`\n\nReserved symbols are therefore: / : ( )\n\nThey should not be misused beyond what is specified in this section.\n\n-   / separates the code-stack\n-   : specifies the implementation version of the particular stack\n-   ( and ) delimits a comment which optionally separates data using ;"
    },
    {
      "header": "Timeline",
      "content": "When this document was published, the bitcoin protocol and Satoshi\nclient versions were currently at 0.5 and undergoing changes. In order\nto minimise disruption and allow the undergoing changes to be completed,\nthe next protocol version at 0.6 became peeled from the client version\n(also at 0.6). As of that time (January 2012), protocol and\nimplementation version numbers are distinct from each other."
    }
  ]
}