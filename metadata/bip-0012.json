{
  "BIP": "12",
  "Layer": "Consensus (soft fork)",
  "Title": "OP_EVAL",
  "Author": "Gavin Andresen <gavinandresen@gmail.com>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0012",
  "Status": "Withdrawn",
  "Type": "Standards Track",
  "Created": "2011-10-18",
  "sections": [
    {
      "header": "Abstract",
      "content": "This BIP describes a new opcode (OP_EVAL) for the [Bitcoin scripting\nsystem](https://en.bitcoin.it/wiki/Script), and a new \\'standard\\'\ntransaction type that uses it to enables the receiver of bitcoins to\nspecify the transaction type needed to re-spend them."
    },
    {
      "header": "Motivation",
      "content": "Enable \\\"end-to-end\\\" secure wallets and payments to fund escrow\ntransactions or other complex transactions in a way that is\nbackwards-compatible for old clients and miners."
    },
    {
      "header": "Specification",
      "content": "OP_EVAL will re-define the existing OP_NOP1 opcode, and will function as\nfollows:\n\n-   When executed during transaction verification, pops the item from\nthe top of the stack, deserializes it, and executes the resulting\nscript.\n-   If there is no item on the top of the stack or the item is not a\nvalid script then transaction validation fails.\n-   If there are any OP_CODESEPARATORs in the deserialized script then\ntransaction validation fails.\n-   If there are any OP_EVALs in the deserialized script they are also\nexecuted, but recursion is limited to a depth of 2.\n-   Transaction verification must fail if interpreting OP_EVAL as a\nno-op would cause the verification to fail.\n\nA new standard transaction type (scriptPubKey) that is relayed by\nclients and included in mined blocks is also defined:\n\n`\u00a0\u00a0\u00a0DUP\u00a0HASH160\u00a0{20-byte-hash-value}\u00a0EQUALVERIFY\u00a0OP_EVAL`\n\nWhich is redeemed by a standard scriptSig:\n\n`\u00a0\u00a0\u00a0...signatures...\u00a0{serialized\u00a0script}`\n\nTransactions that redeem standard OP_EVAL scriptPubKeys are only\nconsidered standard if the *serialized script* is, itself, one of the\nstandard transaction types."
    },
    {
      "header": "Rationale",
      "content": "OP_EVAL allows the receiver of bitcoins to specify how they can be spent\nwhen they are spent, instead of requiring the sender of the bitcoins to\nknow the details of how the bitcoins may be redeemed. The sender only\nneeds to know the hash of the *serialized script*, and one new type of\nbitcoin address can be used to fund arbitrarily complex transactions.\n\nIf *serialized script* is a large or complicated multi-signature script,\nthen the burden of paying for it (in increased transaction fees due to\nmore signature operations or transaction size) is shifted from the\nsender to the receiver.\n\nThe main objection to OP_EVAL is that it adds complexity, and complexity\nis the enemy of security. Also, evaluating data as code has a long\nrecord of being a source of security vulnerabilties.\n\nThat same argument can be applied to the existing Bitcoin \\'scripting\\'\nsystem; scriptPubKeys are transmit as data across the network and are\nthen interpreted by every bitcoin implementation. OP_EVAL just moves the\ndata that will be interpreted. It is debatable whether or not the entire\nidea of putting a little interpreted expression evaluation language at\nthe core of Bitcoin was brilliant or stupid, but the existence of\nOP_EVAL does not make the expression language less secure.\n\nThere is a 1-confirmation attack on old clients that interepret OP_EVAL\nas a no-op, but it is expensive and difficult in practice. The attack\nis:\n\n1.  Attacker creates an OP_EVAL transaction that is valid as seen by old\nclients, but invalid for new clients.\n2.  Attacker also creates a standard transaction that spends the OP_EVAL\ntransaction, and pays the victim.\n3.  Attacker manages to mine a block that contains both transactions. If\nthe victim accepts the 1-confirmation payment, then the attacker\nwins because both transactions will be invalidated when the rest of\nthe network overwrites the attacker\\'s invalid block.\n\nThe attack is expensive because it requires the attacker create a block\nthat they know will be invalidated. It is difficult because bitcoin\nbusinesses should not accept 1-confirmation transactions for\nhigher-value transactions."
    },
    {
      "header": "Backwards Compatibility {#backwards_compatibility}",
      "content": "Surprisingly, because OP_EVAL redefines the OP_NOP1 opcode, standard\nOP_EVAL transactions will validate with old clients and miners. They\nwill check only that the *serialized script* hashes to the correct\nvalue; the OP_EVAL will be interpreted as a no-op, and as long as the\nhash is correct the transaction will be considered valid (no signature\nchecking will be done by old clients and miners).\n\nOld clients will ignore OP_EVAL transactions and transactions that\ndepend on them until they are put into a block by either an old miner\nthat includes non-standard transactions in its blocks or by a new miner.\n\nAvoiding a block-chain split by malicious OP_EVAL transactions requires\ncareful handling of two cases:\n\n1.  An OP_EVAL transaction that is invalid for new clients/miners but\nvalid for old clients/miners.\n2.  An OP_EVAL transaction that is valid for new clients/miners but\ninvalid for old clients/miners.\n\nFor case (1), new clients and miners will be coded to interpret OP_EVAL\nas a no-op until February 1, 2012. Before then, miners will be asked to\nput the string \\\"OP_EVAL\\\" in blocks that they produce so that hashing\npower that supports the new opcode can be gauged. If less than 50% of\nminers accept the change as of January 15, 2012 the rollout will be\npostponed until more than 50% of hashing power supports OP_EVAL (the\nrollout will be rejected if it becomes clear that a majority of hashing\npower will not be achieved).\n\nFor case (2), new clients and miners will be written to make sure that\ntransactions involving OP_EVAL are valid if OP_EVAL is interpreted as a\nno-op. Example of a transaction that must fail for both old and new\nminers/clients:\n\n`\u00a0scriptSig:\u00a0\u00a0{serialized\u00a0OP_11}`\\\n`\u00a0scriptPubKey:\u00a0\u00a0OP_EVAL\u00a0OP_11\u00a0OP_EQUAL`"
    },
    {
      "header": "Reference Implementation {#reference_implementation}",
      "content": "<https://github.com/gavinandresen/bitcoin-git/tree/77f21f1583deb89bf3fffe80fe9b181fedb1dd60>"
    },
    {
      "header": "See Also {#see_also}",
      "content": "<https://bitcointalk.org/index.php?topic=46538>\n\n\\\"Bitcoin Address 01\\\" BIP\n\nM-of-N Multisignature Transactions BIP 11"
    }
  ]
}