{
  "BIP": "21",
  "Layer": "Applications",
  "Title": "URI Scheme",
  "Author": "Nils Schneider <nils.schneider@gmail.com>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0021",
  "Status": "Final",
  "Type": "Standards Track",
  "Created": "2012-01-29",
  "sections": [
    {
      "header": "Abstract",
      "content": "This BIP proposes a URI scheme for making Bitcoin payments."
    },
    {
      "header": "Motivation",
      "content": "The purpose of this URI scheme is to enable users to easily make\npayments by simply clicking links on webpages or scanning QR Codes."
    },
    {
      "header": "Specification",
      "content": "### General rules for handling (important!) {#general_rules_for_handling_important}\n\nBitcoin clients MUST NOT act on URIs without getting the user\\'s\nauthorization. They SHOULD require the user to manually approve each\npayment individually, though in some cases they MAY allow the user to\nautomatically make this decision."
    },
    {
      "header": "Operating system integration {#operating_system_integration}",
      "content": "Graphical bitcoin clients SHOULD register themselves as the handler for\nthe \\\"bitcoin:\\\" URI scheme by default, if no other handler is already\nregistered. If there is already a registered handler, they MAY prompt\nthe user to change it once when they first run the client."
    },
    {
      "header": "General Format {#general_format}",
      "content": "Bitcoin URIs follow the general format for URIs as set forth in RFC\n3986. The path component consists of a bitcoin address, and the query\ncomponent provides additional payment options.\n\nElements of the query component may contain characters outside the valid\nrange. These must first be encoded according to UTF-8, and then each\noctet of the corresponding UTF-8 sequence must be percent-encoded as\ndescribed in RFC 3986."
    },
    {
      "header": "ABNF grammar {#abnf_grammar}",
      "content": "(See also [a simpler representation of\nsyntax](#Simpler_syntax \"wikilink\"))\n\n`bitcoinurn\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0\"bitcoin:\"\u00a0bitcoinaddress\u00a0[\u00a0\"?\"\u00a0bitcoinparams\u00a0]`\\\n`bitcoinaddress\u00a0=\u00a0*base58`\\\n`bitcoinparams\u00a0\u00a0=\u00a0bitcoinparam\u00a0[\u00a0\"&\"\u00a0bitcoinparams\u00a0]`\\\n`bitcoinparam\u00a0\u00a0\u00a0=\u00a0[\u00a0amountparam\u00a0/\u00a0labelparam\u00a0/\u00a0messageparam\u00a0/\u00a0otherparam\u00a0/\u00a0reqparam\u00a0]`\\\n`amountparam\u00a0\u00a0\u00a0\u00a0=\u00a0\"amount=\"\u00a0*digit\u00a0[\u00a0\".\"\u00a0*digit\u00a0]`\\\n`labelparam\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0\"label=\"\u00a0*qchar`\\\n`messageparam\u00a0\u00a0\u00a0=\u00a0\"message=\"\u00a0*qchar`\\\n`otherparam\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0qchar\u00a0*qchar\u00a0[\u00a0\"=\"\u00a0*qchar\u00a0]`\\\n`reqparam\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0\"req-\"\u00a0qchar\u00a0*qchar\u00a0[\u00a0\"=\"\u00a0*qchar\u00a0]`\n\nHere, \\\"qchar\\\" corresponds to valid characters of an RFC 3986 URI query\ncomponent, excluding the \\\"=\\\" and \\\"&\\\" characters, which this BIP\ntakes as separators.\n\nThe scheme component (\\\"bitcoin:\\\") is case-insensitive, and\nimplementations must accept any combination of uppercase and lowercase\nletters. The rest of the URI is case-sensitive, including the query\nparameter keys."
    },
    {
      "header": "Query Keys {#query_keys}",
      "content": "-   label: Label for that address (e.g. name of receiver)\n-   address: bitcoin address\n-   message: message that describes the transaction to the user ([see\nexamples below](#Examples \"wikilink\"))\n-   (others): optional, for future extensions"
    },
    {
      "header": "Transfer amount {#transfer_amount}",
      "content": "If an amount is provided, it MUST be specified in decimal BTC. All\namounts MUST contain no commas and use a period (.) as the separating\ncharacter to separate whole numbers and decimal fractions. I.e.\namount=50.00 or amount=50 is treated as 50 BTC, and amount=50,000.00 is\ninvalid.\n\nBitcoin clients MAY display the amount in any format that is not\nintended to deceive the user. They SHOULD choose a format that is\nforemost least confusing, and only after that most reasonable given the\namount requested. For example, so long as the majority of users work in\nBTC units, values should always be displayed in BTC by default, even if\nmBTC or TBC would otherwise be a more logical interpretation of the\namount."
    },
    {
      "header": "Rationale",
      "content": "### Payment identifiers, not person identifiers {#payment_identifiers_not_person_identifiers}\n\nCurrent best practices are that a unique address should be used for\nevery transaction. Therefore, a URI scheme should not represent an\nexchange of personal information, but a one-time payment."
    },
    {
      "header": "Accessibility (URI scheme name) {#accessibility_uri_scheme_name}",
      "content": "Should someone from the outside happen to see such a URI, the URI scheme\nname already gives a description. A quick search should then do the rest\nto help them find the resources needed to make their payment. Other\nproposed names sound much more cryptic; the chance that someone googles\nthat out of curiosity are much slimmer. Also, very likely, what he will\nfind are mostly technical specifications - not the best introduction to\nbitcoin."
    },
    {
      "header": "Forward compatibility {#forward_compatibility}",
      "content": "Variables which are prefixed with a req- are considered required. If a\nclient does not implement any variables which are prefixed with req-, it\nMUST consider the entire URI invalid. Any other variables which are not\nimplemented, but which are not prefixed with a req-, can be safely\nignored."
    },
    {
      "header": "Backward compatibility {#backward_compatibility}",
      "content": "As this BIP is written, several clients already implement a bitcoin: URI\nscheme similar to this one, however usually without the additional\n\\\"req-\\\" prefix requirement. Thus, it is recommended that additional\nvariables prefixed with req- not be used in a mission-critical way until\na grace period of 6 months from the finalization of this BIP has passed\nin order to allow client developers to release new versions, and users\nof old clients to upgrade."
    },
    {
      "header": "Appendix",
      "content": "### Simpler syntax {#simpler_syntax}\n\nThis section is non-normative and does not cover all possible syntax.\nPlease see the BNF grammar above for the normative syntax.\n\n\\[foo\\] means optional, \\<bar\\> are placeholders\n\n`bitcoin:<address>[?amount=<amount>][?label=<label>][?message=<message>]`"
    },
    {
      "header": "Examples",
      "content": "Just the address:\n\n[`bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W`](bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W)\n\nAddress with name:\n\n[`bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?label=Luke-Jr`](bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?label=Luke-Jr)\n\nRequest 20.30 BTC to \\\"Luke-Jr\\\":\n\n[`bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?amount=20.3&label=Luke-Jr`](bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?amount=20.3&label=Luke-Jr)\n\nRequest 50 BTC with message:\n\n[`bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?amount=50&label=Luke-Jr&message=Donation%20for%20project%20xyz`](bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?amount=50&label=Luke-Jr&message=Donation%20for%20project%20xyz)\n\nSome future version that has variables which are (currently) not\nunderstood and required and thus invalid:\n\n[`bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?req-somethingyoudontunderstand=50&req-somethingelseyoudontget=999`](bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?req-somethingyoudontunderstand=50&req-somethingelseyoudontget=999)\n\nSome future version that has variables which are (currently) not\nunderstood but not required and thus valid:\n\n[`bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?somethingyoudontunderstand=50&somethingelseyoudontget=999`](bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?somethingyoudontunderstand=50&somethingelseyoudontget=999)\n\nCharacters must be URI encoded properly."
    },
    {
      "header": "Reference Implementations {#reference_implementations}",
      "content": "### Bitcoin clients {#bitcoin_clients}\n\n-   Bitcoin-Qt supports the old version of Bitcoin URIs (ie without the\nreq- prefix), with Windows and KDE integration as of commit\n70f55355e29c8e45b607e782c5d76609d23cc858."
    },
    {
      "header": "Libraries",
      "content": "-   Javascript - <https://github.com/bitcoinjs/bip21>\n-   Java - <https://github.com/SandroMachado/BitcoinPaymentURI>\n-   Swift - <https://github.com/SandroMachado/BitcoinPaymentURISwift>"
    }
  ]
}