{
  "BIP": "16",
  "Layer": "Consensus (soft fork)",
  "Title": "Pay to Script Hash",
  "Author": "Gavin Andresen <gavinandresen@gmail.com>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0016",
  "Status": "Final",
  "Type": "Standards Track",
  "Created": "2012-01-03",
  "sections": [
    {
      "header": "Abstract",
      "content": "This BIP describes a new \\\"standard\\\" transaction type for the Bitcoin\nscripting system, and defines additional validation rules that apply\nonly to the new transactions."
    },
    {
      "header": "Motivation",
      "content": "The purpose of pay-to-script-hash is to move the responsibility for\nsupplying the conditions to redeem a transaction from the sender of the\nfunds to the redeemer.\n\nThe benefit is allowing a sender to fund any arbitrary transaction, no\nmatter how complicated, using a fixed-length 20-byte hash that is short\nenough to scan from a QR code or easily copied and pasted."
    },
    {
      "header": "Specification",
      "content": "A new standard transaction type that is relayed and included in mined\nblocks is defined:\n\n`\u00a0\u00a0\u00a0OP_HASH160\u00a0[20-byte-hash-value]\u00a0OP_EQUAL`\n\n\\[20-byte-hash-value\\] shall be the push-20-bytes-onto-the-stack opcode\n(0x14) followed by exactly 20 bytes.\n\nThis new transaction type is redeemed by a standard scriptSig:\n\n`\u00a0\u00a0\u00a0...signatures...\u00a0{serialized\u00a0script}`\n\nTransactions that redeem these pay-to-script outpoints are only\nconsidered standard if the *serialized script* - also referred to as the\n*redeemScript* - is, itself, one of the other standard transaction\ntypes.\n\nThe rules for validating these outpoints when relaying transactions or\nconsidering them for inclusion in a new block are as follows:\n\n1.  Validation fails if there are any operations other than \\\"push\ndata\\\" operations in the scriptSig.\n2.  Normal validation is done: an initial stack is created from the\nsignatures and {serialized script}, and the hash of the script is\ncomputed and validation fails immediately if it does not match the\nhash in the outpoint.\n3.  {serialized script} is popped off the initial stack, and the\ntransaction is validated again using the popped stack and the\ndeserialized script as the scriptPubKey.\n\nThese new rules should only be applied when validating transactions in\nblocks with timestamps \\>= 1333238400 (Apr 1 2012) [^1]. There are\ntransactions earlier than 1333238400 in the block chain that fail these\nnew validation rules. [^2]. Older transactions must be validated under\nthe old rules. (see the Backwards Compatibility section for details).\n\nFor example, the scriptPubKey and corresponding scriptSig for a\none-signature-required transaction is:\n\n`\u00a0\u00a0\u00a0scriptSig:\u00a0[signature]\u00a0{[pubkey]\u00a0OP_CHECKSIG}`\\\n`\u00a0\u00a0\u00a0scriptPubKey:\u00a0OP_HASH160\u00a0[20-byte-hash\u00a0of\u00a0{[pubkey]\u00a0OP_CHECKSIG}\u00a0]\u00a0OP_EQUAL`\n\nSignature operations in the {serialized script} shall contribute to the\nmaximum number allowed per block (20,000) as follows:\n\n1.  OP_CHECKSIG and OP_CHECKSIGVERIFY count as 1 signature operation,\nwhether or not they are evaluated.\n2.  OP_CHECKMULTISIG and OP_CHECKMULTISIGVERIFY immediately preceded by\nOP_1 through OP_16 are counted as 1 to 16 signature operation,\nwhether or not they are evaluated.\n3.  All other OP_CHECKMULTISIG and OP_CHECKMULTISIGVERIFY are counted as\n20 signature operations.\n\nExamples:\n\n+3 signature operations:\n\n`\u00a0\u00a0\u00a0{2\u00a0[pubkey1]\u00a0[pubkey2]\u00a0[pubkey3]\u00a03\u00a0OP_CHECKMULTISIG}`\n\n+22 signature operations\n\n`\u00a0\u00a0\u00a0{OP_CHECKSIG\u00a0OP_IF\u00a0OP_CHECKSIGVERIFY\u00a0OP_ELSE\u00a0OP_CHECKMULTISIGVERIFY\u00a0OP_ENDIF}`"
    },
    {
      "header": "Rationale",
      "content": "This BIP replaces BIP 12, which proposed a new Script opcode\n(\\\"OP_EVAL\\\") to accomplish everything in this BIP and more.\n\nThe Motivation for this BIP (and BIP 13, the pay-to-script-hash address\ntype) is somewhat controversial; several people feel that it is\nunnecessary, and complex/multisignature transaction types should be\nsupported by simply giving the sender the complete {serialized script}.\nThe author believes that this BIP will minimize the changes needed to\nall of the supporting infrastructure that has already been created to\nsend funds to a base58-encoded-20-byte bitcoin addresses, allowing\nmerchants and exchanges and other software to start supporting\nmultisignature transactions sooner.\n\nRecognizing one \\'special\\' form of scriptPubKey and performing extra\nvalidation when it is detected is ugly. However, the consensus is that\nthe alternatives are either uglier, are more complex to implement,\nand/or expand the power of the expression language in dangerous ways.\n\nThe signature operation counting rules are intended to be easy and quick\nto implement by statically scanning the {serialized script}. Bitcoin\nimposes a maximum-number-of-signature-operations per block to prevent\ndenial-of-service attacks on miners. If there was no limit, a rogue\nminer might broadcast a block that required hundreds of thousands of\nECDSA signature operations to validate, and it might be able to get a\nhead start computing the next block while the rest of the network worked\nto validate the current one.\n\nThere is a 1-confirmation attack on old implementations, but it is\nexpensive and difficult in practice. The attack is:\n\n1.  Attacker creates a pay-to-script-hash transaction that is valid as\nseen by old software, but invalid for new implementation, and sends\nthemselves some coins using it.\n2.  Attacker also creates a standard transaction that spends the\npay-to-script transaction, and pays the victim who is running old\nsoftware.\n3.  Attacker mines a block that contains both transactions.\n\nIf the victim accepts the 1-confirmation payment, then the attacker wins\nbecause both transactions will be invalidated when the rest of the\nnetwork overwrites the attacker\\'s invalid block.\n\nThe attack is expensive because it requires the attacker create a block\nthat they know will be invalidated by the rest of the network. It is\ndifficult because creating blocks is difficult and users should not\naccept 1-confirmation transactions for higher-value transactions."
    },
    {
      "header": "Backwards Compatibility {#backwards_compatibility}",
      "content": "These transactions are non-standard to old implementations, which will\n(typically) not relay them or include them in blocks.\n\nOld implementations will validate that the {serialize script}\\'s hash\nvalue matches when they validate blocks created by software that fully\nsupport this BIP, but will do no other validation.\n\nAvoiding a block-chain split by malicious pay-to-script transactions\nrequires careful handling of one case:\n\n-   A pay-to-script-hash transaction that is invalid for new\nclients/miners but valid for old clients/miners.\n\nTo gracefully upgrade and ensure no long-lasting block-chain split\noccurs, more than 50% of miners must support full validation of the new\ntransaction type and must switch from the old validation rules to the\nnew rules at the same time.\n\nTo judge whether or not more than 50% of hashing power supports this\nBIP, miners are asked to upgrade their software and put the string\n\\\"/P2SH/\\\" in the input of the coinbase transaction for blocks that they\ncreate.\n\nOn February 1, 2012, the block-chain will be examined to determine the\nnumber of blocks supporting pay-to-script-hash for the previous 7 days.\nIf 550 or more contain \\\"/P2SH/\\\" in their coinbase, then all blocks\nwith timestamps after 15 Feb 2012, 00:00:00 GMT shall have their\npay-to-script-hash transactions fully validated. Approximately 1,000\nblocks are created in a week; 550 should, therefore, be approximately\n55% of the network supporting the new feature.\n\nIf a majority of hashing power does not support the new validation\nrules, then rollout will be postponed (or rejected if it becomes clear\nthat a majority will never be achieved)."
    },
    {
      "header": "520-byte limitation on serialized script size {#byte_limitation_on_serialized_script_size}",
      "content": "As a consequence of the requirement for backwards compatibility the\nserialized script is itself subject to the same rules as any other\nPUSHDATA operation, including the rule that no data greater than 520\nbytes may be pushed to the stack. Thus it is not possible to spend a\nP2SH output if the redemption script it refers to is \\>520 bytes in\nlength. For instance while the OP_CHECKMULTISIG opcode can itself accept\nup to 20 pubkeys, with 33-byte compressed pubkeys it is only possible to\nspend a P2SH output requiring a maximum of 15 pubkeys to redeem: 3\nbytes + 15 pubkeys \\* 34 bytes/pubkey = 513 bytes."
    },
    {
      "header": "Reference Implementation {#reference_implementation}",
      "content": "<https://gist.github.com/gavinandresen/3966071>"
    },
    {
      "header": "See Also {#see_also}",
      "content": "-   <https://bitcointalk.org/index.php?topic=46538>\n-   The [Address format for Pay to Script Hash\nBIP](bip-0013.mediawiki \"wikilink\")\n-   M-of-N Multisignature Transactions [BIP\n11](bip-0011.mediawiki \"wikilink\")\n-   [Quality Assurance test checklist](bip-0016/qa.mediawiki \"wikilink\")"
    },
    {
      "header": "References",
      "content": "```{=html}\n<references>\n```\n\n[^1]: [Remove -bip16 and -paytoscripthashtime command-line\narguments](https://github.com/bitcoin/bitcoin/commit/8f188ece3c82c4cf5d52a3363e7643c23169c0ff)\n\n[^2]: [Transaction\n6a26d2ecb67f27d1fa5524763b49029d7106e91e3cc05743073461a719776192](https://web.archive.org/web/20141122040355/http://blockexplorer.com/tx/6a26d2ecb67f27d1fa5524763b49029d7106e91e3cc05743073461a719776192)"
    }
  ]
}