{
  "BIP": "68",
  "Layer": "Consensus (soft fork)",
  "Title": "Relative lock-time using consensus-enforced sequence numbers",
  "Author": "Mark Friedenbach <mark@friedenbach.org>",
  "Comments-Summary": "No comments yet.",
  "Comments-URI": "https://github.com/bitcoin/bips/wiki/Comments:BIP-0068",
  "Status": "Final",
  "Type": "Standards Track",
  "Created": "2015-05-28",
  "sections": [
    {
      "header": "Abstract",
      "content": "This BIP introduces relative lock-time (RLT) consensus-enforced\nsemantics of the sequence number field to enable a signed transaction\ninput to remain invalid for a defined period of time after confirmation\nof its corresponding outpoint."
    },
    {
      "header": "Motivation",
      "content": "Bitcoin transactions have a sequence number field for each input. The\noriginal idea appears to have been that a transaction in the mempool\nwould be replaced by using the same input with a higher sequence value.\nAlthough this was not properly implemented, it assumes miners would\nprefer higher sequence numbers even if the lower ones were more\nprofitable to mine. However, a miner acting on profit motives alone\nwould break that assumption completely. The change described by this BIP\nrepurposes the sequence number for new use cases without breaking\nexisting functionality. It also leaves room for future expansion and\nother use cases.\n\nThe transaction nLockTime is used to prevent the mining of a transaction\nuntil a certain date. nSequence will be repurposed to prevent mining of\na transaction until a certain age of the spent output in blocks or\ntimespan. This, among other uses, allows bi-directional payment channels\nas used in [Hashed Timelock Contracts\n(HTLCs)](https://github.com/ElementsProject/lightning/raw/master/doc/deployable-lightning.pdf)\nand\n[BIP112](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki#Bidirectional_Payment_Channels)."
    },
    {
      "header": "Specification",
      "content": "This specification defines the meaning of sequence numbers for\ntransactions with an nVersion greater than or equal to 2 for which the\nrest of this specification relies on.\n\nAll references to median-time-past (MTP) are as defined by BIP113.\n\nIf bit (1 \\<\\< 31) of the sequence number is set, then no consensus\nmeaning is applied to the sequence number and can be included in any\nblock under all currently possible circumstances.\n\nIf bit (1 \\<\\< 31) of the sequence number is not set, then the sequence\nnumber is interpreted as an encoded relative lock-time.\n\nThe sequence number encoding is interpreted as follows:\n\nBit (1 \\<\\< 22) determines if the relative lock-time is time-based or\nblock based: If the bit is set, the relative lock-time specifies a\ntimespan in units of 512 seconds granularity. The timespan starts from\nthe median-time-past of the output's previous block, and ends at the MTP\nof the previous block. If the bit is not set, the relative lock-time\nspecifies a number of blocks.\n\nThe flag (1\\<\\<22) is the highest order bit in a 3-byte signed integer\nfor use in bitcoin scripts as a 3-byte PUSHDATA with\nOP_CHECKSEQUENCEVERIFY (BIP 112).\n\nThis specification only interprets 16 bits of the sequence number as\nrelative lock-time, so a mask of 0x0000ffff MUST be applied to the\nsequence field to extract the relative lock-time. The 16-bit\nspecification allows for a year of relative lock-time and the remaining\nbits allow for future expansion.\n\n`<img src=bip-0068/encoding.png>`{=html}`</img>`{=html}\n\nFor time based relative lock-time, 512 second granularity was chosen\nbecause bitcoin blocks are generated every 600 seconds. So when using\nblock-based or time-based, the same amount of time can be encoded with\nthe available number of bits. Converting from a sequence number to\nseconds is performed by multiplying by 512 = 2\\^9, or equivalently\nshifting up by 9 bits.\n\nWhen the relative lock-time is time-based, it is interpreted as a\nminimum block-time constraint over the input\\'s age. A relative\ntime-based lock-time of zero indicates an input which can be included in\nany block. More generally, a relative time-based lock-time n can be\nincluded into any block produced 512 \\* n seconds after the mining date\nof the output it is spending, or any block thereafter. The mining date\nof the output is equal to the median-time-past of the previous block\nwhich mined it.\n\nThe block produced time is equal to the median-time-past of its previous\nblock.\n\nWhen the relative lock-time is block-based, it is interpreted as a\nminimum block-height constraint over the input\\'s age. A relative\nblock-based lock-time of zero indicates an input which can be included\nin any block. More generally, a relative block lock-time n can be\nincluded n blocks after the mining date of the output it is spending, or\nany block thereafter.\n\nThe new rules are not applied to the nSequence field of the input of the\ncoinbase transaction."
    },
    {
      "header": "Implementation",
      "content": "A reference implementation is provided by the following pull request\n\n<https://github.com/bitcoin/bitcoin/pull/7184>\n\nenum {\n/* Interpret sequence numbers as relative lock-time constraints. */\nLOCKTIME_VERIFY_SEQUENCE = (1 << 0),\n};\n\n/* Setting nSequence to this value for every input in a transaction\n* disables nLockTime. */\nstatic const uint32_t SEQUENCE_FINAL = 0xffffffff;\n\n/* Below flags apply in the context of BIP 68*/\n/* If this flag set, CTxIn::nSequence is NOT interpreted as a\n* relative lock-time. */\nstatic const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31);\n\n/* If CTxIn::nSequence encodes a relative lock-time and this flag\n* is set, the relative lock-time has units of 512 seconds,\n* otherwise it specifies blocks with a granularity of 1. */\nstatic const uint32_t SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);\n\n/* If CTxIn::nSequence encodes a relative lock-time, this mask is\n* applied to extract that lock-time from the sequence field. */\nstatic const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n\n/* In order to use the same number of bits to encode roughly the\n* same wall-clock duration, and because blocks are naturally\n* limited to occur every 600s on average, the minimum granularity\n* for time-based relative lock-time is fixed at 512 seconds.\n* Converting from CTxIn::nSequence to seconds is performed by\n* multiplying by 512 = 2^9, or equivalently shifting up by\n* 9 bits. */\nstatic const int SEQUENCE_LOCKTIME_GRANULARITY = 9;\n\n/**\n* Calculates the block height and previous block's median time past at\n* which the transaction will be considered final in the context of BIP 68.\n* Also removes from the vector of input heights any entries which did not\n* correspond to sequence locked inputs as they do not affect the calculation.\n*/\nstatic std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n{\nassert(prevHeights->size() == tx.vin.size());\n\n// Will be set to the equivalent height- and time-based nLockTime\n// values that would be necessary to satisfy all relative lock-\n// time constraints given our view of block chain history.\n// The semantics of nLockTime are the last invalid height/time, so\n// use -1 to have the effect of any height or time being valid.\nint nMinHeight = -1;\nint64_t nMinTime = -1;\n\n// tx.nVersion is signed integer so requires cast to unsigned otherwise\n// we would be doing a signed comparison and half the range of nVersion\n// wouldn't support BIP 68.\nbool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n&& flags & LOCKTIME_VERIFY_SEQUENCE;\n\n// Do not enforce sequence numbers as a relative lock time\n// unless we have been instructed to\nif (!fEnforceBIP68) {\nreturn std::make_pair(nMinHeight, nMinTime);\n}\n\nfor (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\nconst CTxIn& txin = tx.vin[txinIndex];\n\n// Sequence numbers with the most significant bit set are not\n// treated as relative lock-times, nor are they given any\n// consensus-enforced meaning at this point.\nif (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n// The height of this input is not relevant for sequence locks\n(*prevHeights)[txinIndex] = 0;\ncontinue;\n}\n\nint nCoinHeight = (*prevHeights)[txinIndex];\n\nif (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\nint64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n// NOTE: Subtract 1 to maintain nLockTime semantics\n// BIP 68 relative lock times have the semantics of calculating\n// the first block or time at which the transaction would be\n// valid. When calculating the effective block time or height\n// for the entire transaction, we switch to using the\n// semantics of nLockTime which is the last invalid block\n// time or height.  Thus we subtract 1 from the calculated\n// time or height.\n\n// Time-based relative lock-times are measured from the\n// smallest allowed timestamp of the block containing the\n// txout being spent, which is the median time past of the\n// block prior.\nnMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n} else {\nnMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n}\n}\n\nreturn std::make_pair(nMinHeight, nMinTime);\n}\n\nstatic bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n{\nassert(block.pprev);\nint64_t nBlockTime = block.pprev->GetMedianTimePast();\nif (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\nreturn false;\n\nreturn true;\n}\n\nbool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n{\nreturn EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n}\n\nbool CheckSequenceLocks(const CTransaction &tx, int flags)\n{\nAssertLockHeld(cs_main);\nAssertLockHeld(mempool.cs);\n\nCBlockIndex* tip = chainActive.Tip();\nCBlockIndex index;\nindex.pprev = tip;\n// CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n// height based locks because when SequenceLocks() is called within\n// ConnectBlock(), the height of the block *being*\n// evaluated is what is used.\n// Thus if we want to know if a transaction can be part of the\n// *next* block, we need to use one more than chainActive.Height()\nindex.nHeight = tip->nHeight + 1;\n\n// pcoinsTip contains the UTXO set for chainActive.Tip()\nCCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\nstd::vector<int> prevheights;\nprevheights.resize(tx.vin.size());\nfor (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\nconst CTxIn& txin = tx.vin[txinIndex];\nCCoins coins;\nif (!viewMemPool.GetCoins(txin.prevout.hash, coins)) {\nreturn error(\"%s: Missing input\", __func__);\n}\nif (coins.nHeight == MEMPOOL_HEIGHT) {\n// Assume all mempool transaction confirm in the next block\nprevheights[txinIndex] = tip->nHeight + 1;\n} else {\nprevheights[txinIndex] = coins.nHeight;\n}\n}\n\nstd::pair<int, int64_t> lockPair = CalculateSequenceLocks(tx, flags, &prevheights, index);\nreturn EvaluateSequenceLocks(index, lockPair);\n}"
    },
    {
      "header": "Acknowledgments",
      "content": "Credit goes to Gregory Maxwell for providing a succinct and clear\ndescription of the behavior of this change, which became the basis of\nthis BIP text.\n\nThis BIP was edited by BtcDrak, Nicolas Dorier and kinoshitajona."
    },
    {
      "header": "Deployment",
      "content": "This BIP is to be deployed by \\\"versionbits\\\" BIP9 using bit 0.\n\nFor Bitcoin **mainnet**, the BIP9 **starttime** will be midnight 1st May\n2016 UTC (Epoch timestamp 1462060800) and BIP9 **timeout** will be\nmidnight 1st May 2017 UTC (Epoch timestamp 1493596800).\n\nFor Bitcoin **testnet**, the BIP9 **starttime** will be midnight 1st\nMarch 2016 UTC (Epoch timestamp 1456790400) and BIP9 **timeout** will be\nmidnight 1st May 2017 UTC (Epoch timestamp 1493596800).\n\nThis BIP must be deployed simultaneously with BIP112 and BIP113 using\nthe same deployment mechanism."
    },
    {
      "header": "Compatibility",
      "content": "The only use of sequence numbers by the Bitcoin Core reference client\nsoftware is to disable checking the nLockTime constraints in a\ntransaction. The semantics of that application are preserved by this\nBIP.\n\nAs can be seen from the specification section, a number of bits are\nundefined by this BIP to allow for other use cases by setting bit (1\n\\<\\< 31) as the remaining 31 bits have no meaning under this BIP.\nAdditionally, bits (1 \\<\\< 23) through (1 \\<\\< 30) inclusive have no\nmeaning at all when bit (1 \\<\\< 31) is unset.\n\nAdditionally, this BIP specifies only 16 bits to actually encode\nrelative lock-time meaning a further 6 are unused (1 \\<\\< 16 through 1\n\\<\\< 21 inclusive). This allows the possibility to increase granularity\nby soft-fork, or for increasing the maximum possible relative lock-time\nin the future.\n\nThe most efficient way to calculate sequence number from relative\nlock-time is with bit masks and shifts:\n\n// 0 <= nHeight < 65,535 blocks (1.25 years)\nnSequence = nHeight;\nnHeight = nSequence & 0x0000ffff;\n\n// 0 <= nTime < 33,554,431 seconds (1.06 years)\nnSequence = (1 << 22) | (nTime >> 9);\nnTime = (nSequence & 0x0000ffff) << 9;"
    },
    {
      "header": "References",
      "content": "Bitcoin mailing list discussion:\n<https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg07864.html>\n\nBIP9: <https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki>\n\nBIP112: <https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki>\n\nBIP113: <https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki>\n\nHashed Timelock Contracts (HTLCs):\n<https://github.com/ElementsProject/lightning/raw/master/doc/deployable-lightning.pdf>"
    }
  ]
}